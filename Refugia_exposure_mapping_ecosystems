# Load required libraries
library(terra)
library(RStoolbox)
library(terra)
library(sf)
library(ggplot2)
library(dplyr)
library(rnaturalearth)  # For country boundaries
library(rnaturalearthdata)  # Supporting dataset for natural ea

par(mfrow = c(3, 3))

# Read Bioclim variables historical

MAT <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/historical/masked_MAT.tif")
MAT
MAP <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/historical/masked_MAP.tif")
DD_18 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/historical/masked_DD_18.tif")
DD18 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/historical/masked_DD18.tif")
NFFD <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/historical/masked_NFFD.tif")
EMT <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/historical/masked_EMT.tif")
EXT <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/historical/masked_EXT.tif")
Tave_wt <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/historical/masked_Tav_wt.tif")
Tave_sm <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/historical/masked_Tav_sm.tif")
Tave_sp <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/historical/masked_Tav_sp.tif")
Tave_at <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/historical/masked_Tav_at.tif")
PPT_wt <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/historical/masked_PPT_wt.tif")
PPT_sm <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/historical/masked_PPT_sm.tif")
PPT_sp <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/historical/masked_PPT_sp.tif")
PPT_at <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/historical/masked_PPT_at.tif")
slope <- rast("F:/Uillinois_data/analysis/habitat_suitability/slope.tif")
elevation <- rast("F:/Uillinois_data/analysis/habitat_suitability/elevation.tif")


# Read Bioclim variables
MAT_2020_ssp126 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2011_2040_ssp126/masked_MAT.tif")
MAT_2020_ssp126
MAP_2020_ssp126 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2011_2040_ssp126/masked_MAP.tif")
DD_18_2020_ssp126 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2011_2040_ssp126/masked_DD_18.tif")
DD18_2020_ssp126 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2011_2040_ssp126/masked_DD18.tif")
NFFD_2020_ssp126 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2011_2040_ssp126/masked_NFFD.tif")
EMT_2020_ssp126 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2011_2040_ssp126/masked_EMT.tif")
EXT_2020_ssp126 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2011_2040_ssp126/masked_EXT.tif")
Tave_wt_2020_ssp126 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2011_2040_ssp126/masked_Tav_wt.tif")
Tave_sm_2020_ssp126 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2011_2040_ssp126/masked_Tav_sm.tif")
Tave_sp_2020_ssp126 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2011_2040_ssp126/masked_Tav_sp.tif")
Tave_at_2020_ssp126 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2011_2040_ssp126/masked_Tav_at.tif")
PPT_wt_2020_ssp126 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2011_2040_ssp126/masked_PPT_wt.tif")
PPT_sm_2020_ssp126 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2011_2040_ssp126/masked_PPT_sm.tif")
PPT_sp_2020_ssp126 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2011_2040_ssp126/masked_PPT_sp.tif")
PPT_at_2020_ssp126 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2011_2040_ssp126/masked_PPT_at.tif")

# SSP245

# Read Bioclim variables
MAT_2020_ssp245 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2011_2040_ssp245/masked_MAT.tif")
MAT_2020_ssp245
MAP_2020_ssp245 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2011_2040_ssp245/masked_MAP.tif")
DD_18_2020_ssp245 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2011_2040_ssp245/masked_DD_18.tif")
DD18_2020_ssp245 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2011_2040_ssp245/masked_DD18.tif")
NFFD_2020_ssp245 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2011_2040_ssp245/masked_NFFD.tif")
EMT_2020_ssp245 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2011_2040_ssp245/masked_EMT.tif")
EXT_2020_ssp245 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2011_2040_ssp245/masked_EXT.tif")
Tave_wt_2020_ssp245 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2011_2040_ssp245/masked_Tav_wt.tif")
Tave_sm_2020_ssp245 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2011_2040_ssp245/masked_Tav_sm.tif")
Tave_sp_2020_ssp245 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2011_2040_ssp245/masked_Tav_sp.tif")
Tave_at_2020_ssp245 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2011_2040_ssp245/masked_Tav_at.tif")
PPT_wt_2020_ssp245 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2011_2040_ssp245/masked_PPT_wt.tif")
PPT_sm_2020_ssp245 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2011_2040_ssp245/masked_PPT_sm.tif")
PPT_sp_2020_ssp245 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2011_2040_ssp245/masked_PPT_sp.tif")
PPT_at_2020_ssp245 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2011_2040_ssp245/masked_PPT_at.tif")

# SSP585

# Read Bioclim variables
MAT_2020_ssp585 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2011_2040_ssp585/masked_MAT.tif")
MAT_2020_ssp585
MAP_2020_ssp585 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2011_2040_ssp585/masked_MAP.tif")
DD_18_2020_ssp585 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2011_2040_ssp585/masked_DD_18.tif")
DD18_2020_ssp585 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2011_2040_ssp585/masked_DD18.tif")
NFFD_2020_ssp585 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2011_2040_ssp585/masked_NFFD.tif")
EMT_2020_ssp585 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2011_2040_ssp585/masked_EMT.tif")
EXT_2020_ssp585 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2011_2040_ssp585/masked_EXT.tif")
Tave_wt_2020_ssp585 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2011_2040_ssp585/masked_Tav_wt.tif")
Tave_sm_2020_ssp585 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2011_2040_ssp585/masked_Tav_sm.tif")
Tave_sp_2020_ssp585 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2011_2040_ssp585/masked_Tav_sp.tif")
Tave_at_2020_ssp585 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2011_2040_ssp585/masked_Tav_at.tif")
PPT_wt_2020_ssp585 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2011_2040_ssp585/masked_PPT_wt.tif")
PPT_sm_2020_ssp585 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2011_2040_ssp585/masked_PPT_sm.tif")
PPT_sp_2020_ssp585 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2011_2040_ssp585/masked_PPT_sp.tif")
PPT_at_2020_ssp585 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2011_2040_ssp585/masked_PPT_at.tif")

# SSP126

# Read Bioclim variables
MAT_2050_ssp126 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2041_2070_ssp126/masked_MAT.tif")
MAT_2050_ssp126
MAP_2050_ssp126 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2041_2070_ssp126/masked_MAP.tif")
DD_18_2050_ssp126 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2041_2070_ssp126/masked_DD_18.tif")
DD18_2050_ssp126 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2041_2070_ssp126/masked_DD18.tif")
NFFD_2050_ssp126 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2041_2070_ssp126/masked_NFFD.tif")
EMT_2050_ssp126 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2041_2070_ssp126/masked_EMT.tif")
EXT_2050_ssp126 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2041_2070_ssp126/masked_EXT.tif")
Tave_wt_2050_ssp126 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2041_2070_ssp126/masked_Tav_wt.tif")
Tave_sm_2050_ssp126 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2041_2070_ssp126/masked_Tav_sm.tif")
Tave_sp_2050_ssp126 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2041_2070_ssp126/masked_Tav_sp.tif")
Tave_at_2050_ssp126 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2041_2070_ssp126/masked_Tav_at.tif")
PPT_wt_2050_ssp126 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2041_2070_ssp126/masked_PPT_wt.tif")
PPT_sm_2050_ssp126 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2041_2070_ssp126/masked_PPT_sm.tif")
PPT_sp_2050_ssp126 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2041_2070_ssp126/masked_PPT_sp.tif")
PPT_at_2050_ssp126 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2041_2070_ssp126/masked_PPT_at.tif")

# SSP245

# Read Bioclim variables
MAT_2050_ssp245 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2041_2070_ssp245/masked_MAT.tif")
MAT_2050_ssp245
MAP_2050_ssp245 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2041_2070_ssp245/masked_MAP.tif")
DD_18_2050_ssp245 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2041_2070_ssp245/masked_DD_18.tif")
DD18_2050_ssp245 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2041_2070_ssp245/masked_DD18.tif")
NFFD_2050_ssp245 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2041_2070_ssp245/masked_NFFD.tif")
EMT_2050_ssp245 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2041_2070_ssp245/masked_EMT.tif")
EXT_2050_ssp245 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2041_2070_ssp245/masked_EXT.tif")
Tave_wt_2050_ssp245 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2041_2070_ssp245/masked_Tav_wt.tif")
Tave_sm_2050_ssp245 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2041_2070_ssp245/masked_Tav_sm.tif")
Tave_sp_2050_ssp245 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2041_2070_ssp245/masked_Tav_sp.tif")
Tave_at_2050_ssp245 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2041_2070_ssp245/masked_Tav_at.tif")
PPT_wt_2050_ssp245 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2041_2070_ssp245/masked_PPT_wt.tif")
PPT_sm_2050_ssp245 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2041_2070_ssp245/masked_PPT_sm.tif")
PPT_sp_2050_ssp245 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2041_2070_ssp245/masked_PPT_sp.tif")
PPT_at_2050_ssp245 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2041_2070_ssp245/masked_PPT_at.tif")

# SSP585

# Read Bioclim variables
MAT_2050_ssp585 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2041_2070_ssp585/masked_MAT.tif")
MAT_2050_ssp585
MAP_2050_ssp585 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2041_2070_ssp585/masked_MAP.tif")
DD_18_2050_ssp585 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2041_2070_ssp585/masked_DD_18.tif")
DD18_2050_ssp585 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2041_2070_ssp585/masked_DD18.tif")
NFFD_2050_ssp585 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2041_2070_ssp585/masked_NFFD.tif")
EMT_2050_ssp585 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2041_2070_ssp585/masked_EMT.tif")
EXT_2050_ssp585 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2041_2070_ssp585/masked_EXT.tif")
Tave_wt_2050_ssp585 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2041_2070_ssp585/masked_Tav_wt.tif")
Tave_sm_2050_ssp585 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2041_2070_ssp585/masked_Tav_sm.tif")
Tave_sp_2050_ssp585 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2041_2070_ssp585/masked_Tav_sp.tif")
Tave_at_2050_ssp585 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2041_2070_ssp585/masked_Tav_at.tif")
PPT_wt_2050_ssp585 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2041_2070_ssp585/masked_PPT_wt.tif")
PPT_sm_2050_ssp585 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2041_2070_ssp585/masked_PPT_sm.tif")
PPT_sp_2050_ssp585 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2041_2070_ssp585/masked_PPT_sp.tif")
PPT_at_2050_ssp585 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2041_2070_ssp585/masked_PPT_at.tif")

# Repeat for 2080

# SSP126

# Read Bioclim variables
MAT_2080_ssp126 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2071_2100_ssp126/masked_MAT.tif")
MAT_2080_ssp126
MAP_2080_ssp126 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2071_2100_ssp126/masked_MAP.tif")
DD_18_2080_ssp126 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2071_2100_ssp126/masked_DD_18.tif")
DD18_2080_ssp126 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2071_2100_ssp126/masked_DD18.tif")
NFFD_2080_ssp126 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2071_2100_ssp126/masked_NFFD.tif")
EMT_2080_ssp126 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2071_2100_ssp126/masked_EMT.tif")
EXT_2080_ssp126 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2071_2100_ssp126/masked_EXT.tif")
Tave_wt_2080_ssp126 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2071_2100_ssp126/masked_Tav_wt.tif")
Tave_sm_2080_ssp126 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2071_2100_ssp126/masked_Tav_sm.tif")
Tave_sp_2080_ssp126 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2071_2100_ssp126/masked_Tav_sp.tif")
Tave_at_2080_ssp126 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2071_2100_ssp126/masked_Tav_at.tif")
PPT_wt_2080_ssp126 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2071_2100_ssp126/masked_PPT_wt.tif")
PPT_sm_2080_ssp126 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2071_2100_ssp126/masked_PPT_sm.tif")
PPT_sp_2080_ssp126 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2071_2100_ssp126/masked_PPT_sp.tif")
PPT_at_2080_ssp126 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2071_2100_ssp126/masked_PPT_at.tif")

# SSP245

# Read Bioclim variables
MAT_2080_ssp245 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2071_2100_ssp245/masked_MAT.tif")
MAT_2080_ssp245
MAP_2080_ssp245 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2071_2100_ssp245/masked_MAP.tif")
DD_18_2080_ssp245 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2071_2100_ssp245/masked_DD_18.tif")
DD18_2080_ssp245 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2071_2100_ssp245/masked_DD18.tif")
NFFD_2080_ssp245 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2071_2100_ssp245/masked_NFFD.tif")
EMT_2080_ssp245 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2071_2100_ssp245/masked_EMT.tif")
EXT_2080_ssp245 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2071_2100_ssp245/masked_EXT.tif")
Tave_wt_2080_ssp245 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2071_2100_ssp245/masked_Tav_wt.tif")
Tave_sm_2080_ssp245 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2071_2100_ssp245/masked_Tav_sm.tif")
Tave_sp_2080_ssp245 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2071_2100_ssp245/masked_Tav_sp.tif")
Tave_at_2080_ssp245 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2071_2100_ssp245/masked_Tav_at.tif")
PPT_wt_2080_ssp245 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2071_2100_ssp245/masked_PPT_wt.tif")
PPT_sm_2080_ssp245 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2071_2100_ssp245/masked_PPT_sm.tif")
PPT_sp_2080_ssp245 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2071_2100_ssp245/masked_PPT_sp.tif")
PPT_at_2080_ssp245 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2071_2100_ssp245/masked_PPT_at.tif")

# SSP585

# Read Bioclim variables
MAT_2080_ssp585 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2071_2100_ssp585/masked_MAT.tif")
MAT_2080_ssp585
MAP_2080_ssp585 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2071_2100_ssp585/masked_MAP.tif")
DD_18_2080_ssp585 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2071_2100_ssp585/masked_DD_18.tif")
DD18_2080_ssp585 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2071_2100_ssp585/masked_DD18.tif")
NFFD_2080_ssp585 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2071_2100_ssp585/masked_NFFD.tif")
EMT_2080_ssp585 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2071_2100_ssp585/masked_EMT.tif")
EXT_2080_ssp585 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2071_2100_ssp585/masked_EXT.tif")
Tave_wt_2080_ssp585 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2071_2100_ssp585/masked_Tav_wt.tif")
Tave_sm_2080_ssp585 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2071_2100_ssp585/masked_Tav_sm.tif")
Tave_sp_2080_ssp585 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2071_2100_ssp585/masked_Tav_sp.tif")
Tave_at_2080_ssp585 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2071_2100_ssp585/masked_Tav_at.tif")
PPT_wt_2080_ssp585 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2071_2100_ssp585/masked_PPT_wt.tif")
PPT_sm_2080_ssp585 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2071_2100_ssp585/masked_PPT_sm.tif")
PPT_sp_2080_ssp585 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2071_2100_ssp585/masked_PPT_sp.tif")
PPT_at_2080_ssp585 <- rast("F:/Uillinois_data/analysis/habitat_suitability/climate_data/2071_2100_ssp585/masked_PPT_at.tif")


# Load land cover data------------------------------
forest <- rast("F:/Uillinois_data/analysis/habitat_suitability/pattern_scaling_approach/forest_resampled.tif")
forest
shrubland <- rast("F:/Uillinois_data/analysis/habitat_suitability/pattern_scaling_approach/shrubland_resampled.tif")
grassland <- rast("F:/Uillinois_data/analysis/habitat_suitability/pattern_scaling_approach/grassland_resampled.tif")
wetland <- rast("F:/Uillinois_data/analysis/habitat_suitability/pattern_scaling_approach/wetland_resampled.tif")
cropland <- rast("F:/Uillinois_data/analysis/habitat_suitability/pattern_scaling_approach/cropland_resampled.tif")
water <- rast("F:/Uillinois_data/analysis/habitat_suitability/pattern_scaling_approach/water_resampled.tif")
urban <- rast("F:/Uillinois_data/analysis/habitat_suitability/pattern_scaling_approach/urban_resampled.tif")
PA <- rast("F:/Uillinois_data/analysis/habitat_suitability/pattern_scaling_approach/PA_reclass_resampled.tif")



library(terra)
library(randomForest)
library(pROC)
library(PresenceAbsence)

# resample forest to align with predictors
water_r <- resample(water, EMT, method = "near")

# resample elevation and slope and to match other predictors
elevation <- resample(elevation, EMT, method = "near")
slope <- resample(slope, EMT, method = "near")
elevation1 <- raster(elevation)
slope1 <- raster(slope)
plot(slope)

r_stack <- c(EMT, EXT, PPT_at, PPT_sm, PPT_wt, elevation, slope, water_r)
names(r_stack) <- c("EMT", "EXT", "PPT_at", "PPT_sm",
                    "PPT_wt", "elevation", "slope", "water")

# prepare data for modeling

# Convert to data frame
df <- as.data.frame(r_stack, xy = TRUE, na.rm = TRUE)
df$water <- ifelse(df$water >= 1, 1, 0)


# --------------------------------------------
# Step 2: Sample 10k presence & background points
# --------------------------------------------
set.seed(123)
presence_df <- df[df$water == 1, c("x", "y")]
background_df <- df[df$water == 0, c("x", "y")]

n_presence <- min(100000, nrow(presence_df))
n_background <- min(100000, nrow(background_df))

presence_points <- presence_df[sample(1:nrow(presence_df), n_presence), ]
background_points <- background_df[sample(1:nrow(background_df), n_background), ]

# --------------------------------------------
# Step 3: Train/test split (80/20)
# --------------------------------------------
train_idx_pres <- sample(1:n_presence, size = 0.8 * n_presence)
train_idx_back <- sample(1:n_background, size = 0.8 * n_background)

train_pres <- presence_points[train_idx_pres, ]
test_pres <- presence_points[-train_idx_pres, ]

train_back <- background_points[train_idx_back, ]
test_back <- background_points[-train_idx_back, ]


# --------------------------------------------
# Step 3: Combine and split into train/test (80/20)
# --------------------------------------------
presence_points$label <- 1
background_points$label <- 0

all_data <- rbind(presence_points, background_points)
train_idx <- sample(1:nrow(all_data), size = 0.8 * nrow(all_data))

train_data <- all_data[train_idx, ]
test_data <- all_data[-train_idx, ]


# Extract predictor values
predictors_stack <- c(EMT, EXT, PPT_at, PPT_sm, PPT_wt, elevation, slope)
names(predictors_stack) <- c("EMT", "EXT", "PPT_at", "PPT_sm",
                             "PPT_wt", "elevation", "slope")
predictor_values <- extract(predictors_stack, train_data[, c("x", "y")])

# Combine and remove NA
model_data <- cbind(label = train_data$label, predictor_values)
model_data <- na.omit(model_data)

# Now convert to data frame
model_data <- as.data.frame(model_data)

# Now safely convert label to a factor
model_data$label <- factor(model_data$label, levels = c(0, 1))
names(predictors_stack)

# Train RF model
rf_model <- randomForest(
  label ~ ., 
  data = model_data[, -which(names(model_data) == "ID")],
  ntree = 50,
  importance = TRUE
)

# Get variable importance (Mean Decrease in Gini)
var_imp <- importance(rf_model)

# Extract Gini importance and convert to data frame
var_imp_df <- data.frame(
  Variable = rownames(var_imp),
  Gini = var_imp[, "MeanDecreaseGini"]
)

# Calculate percentage contribution
var_imp_df$PercentContribution <- 100 * var_imp_df$Gini / sum(var_imp_df$Gini)

# Round for display
var_imp_df$PercentContribution <- round(var_imp_df$PercentContribution, 2)

# Sort descending
var_imp_df <- var_imp_df[order(-var_imp_df$PercentContribution), ]

# View
print(var_imp_df)


#predict suitability

rf_pred_prob <- terra::predict(predictors_stack, rf_model, type = "prob", index = 2)
plot(rf_pred_prob, main = "Predicted Suitability (RF)")

predictors_stack_2020_ssp126 <- c(EMT_2020_ssp126, EXT_2020_ssp126, 
                                  PPT_at_2020_ssp126, PPT_sm_2020_ssp126, 
                                  PPT_wt_2020_ssp126, elevation, slope)
names(predictors_stack_2020_ssp126) <- c("EMT", "EXT", "PPT_at", "PPT_sm",
                             "PPT_wt", "elevation", "slope")

rf_pred_prob_2020_ssp126 <- terra::predict(predictors_stack_2020_ssp126, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2020_ssp126, main = "Predicted Suitability (RF)")


predictors_stack_2020_ssp245 <- c(EMT_2020_ssp245, EXT_2020_ssp245, 
                                  PPT_at_2020_ssp245, PPT_sm_2020_ssp245, 
                                  PPT_wt_2020_ssp245, elevation, slope)
names(predictors_stack_2020_ssp245) <- c("EMT", "EXT", "PPT_at", "PPT_sm",
                                         "PPT_wt", "elevation", "slope")
rf_pred_prob_2020_ssp245 <- terra::predict(predictors_stack_2020_ssp245, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2020_ssp245, main = "Predicted Suitability (RF)")


predictors_stack_2020_ssp585 <- c(EMT_2020_ssp585, EXT_2020_ssp585, 
                                  PPT_at_2020_ssp585, PPT_sm_2020_ssp585, 
                                  PPT_wt_2020_ssp585, elevation, slope)
names(predictors_stack_2020_ssp585) <- c("EMT", "EXT", "PPT_at", "PPT_sm",
                                         "PPT_wt", "elevation", "slope")
rf_pred_prob_2020_ssp585 <- terra::predict(predictors_stack_2020_ssp585, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2020_ssp585, main = "Predicted Suitability (RF)")


predictors_stack_2050_ssp126 <- c(EMT_2050_ssp126, EXT_2050_ssp126, 
                                  PPT_at_2050_ssp126, PPT_sm_2050_ssp126, 
                                  PPT_wt_2050_ssp126, elevation, slope)
names(predictors_stack_2050_ssp126) <- c("EMT", "EXT", "PPT_at", "PPT_sm",
                                         "PPT_wt", "elevation", "slope")
rf_pred_prob_2050_ssp126 <- terra::predict(predictors_stack_2050_ssp126, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2050_ssp126, main = "Predicted Suitability (RF)")


predictors_stack_2050_ssp245 <- c(EMT_2050_ssp245, EXT_2050_ssp245, 
                                  PPT_at_2050_ssp245, PPT_sm_2050_ssp245, 
                                  PPT_wt_2050_ssp245, elevation, slope)
names(predictors_stack_2050_ssp245) <- c("EMT", "EXT", "PPT_at", "PPT_sm",
                                         "PPT_wt", "elevation", "slope")

rf_pred_prob_2050_ssp245 <- terra::predict(predictors_stack_2050_ssp245, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2050_ssp245, main = "Predicted Suitability (RF)")

predictors_stack_2050_ssp585 <- c(EMT_2050_ssp585, EXT_2050_ssp585, 
                                  PPT_at_2050_ssp585, PPT_sm_2050_ssp585, 
                                  PPT_wt_2050_ssp585, elevation, slope)
names(predictors_stack_2050_ssp585) <- c("EMT", "EXT", "PPT_at", "PPT_sm",
                                         "PPT_wt", "elevation", "slope")
rf_pred_prob_2050_ssp585 <- terra::predict(predictors_stack_2050_ssp585, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2050_ssp585, main = "Predicted Suitability (RF)")


predictors_stack_2080_ssp126 <- c(EMT_2080_ssp126, EXT_2080_ssp126, 
                                  PPT_at_2080_ssp126, PPT_sm_2080_ssp126, 
                                  PPT_wt_2080_ssp126, elevation, slope)
names(predictors_stack_2080_ssp126) <- c("EMT", "EXT", "PPT_at", "PPT_sm",
                                         "PPT_wt", "elevation", "slope")
rf_pred_prob_2080_ssp126 <- terra::predict(predictors_stack_2080_ssp126, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2080_ssp126, main = "Predicted Suitability (RF)")


predictors_stack_2080_ssp245 <- c(EMT_2080_ssp245, EXT_2080_ssp245, 
                                  PPT_at_2080_ssp245, PPT_sm_2080_ssp245, 
                                  PPT_wt_2080_ssp245, elevation, slope)
names(predictors_stack_2080_ssp245) <- c("EMT", "EXT", "PPT_at", "PPT_sm",
                                         "PPT_wt", "elevation", "slope")
rf_pred_prob_2080_ssp245 <- terra::predict(predictors_stack_2080_ssp245, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2080_ssp245, main = "Predicted Suitability (RF)")


predictors_stack_2080_ssp585 <- c(EMT_2080_ssp585, EXT_2080_ssp585, 
                                  PPT_at_2080_ssp585, PPT_sm_2080_ssp585, 
                                  PPT_wt_2080_ssp585, elevation, slope)
names(predictors_stack_2080_ssp585) <- c("EMT", "EXT", "PPT_at", "PPT_sm",
                                         "PPT_wt", "elevation", "slope")
rf_pred_prob_2080_ssp585 <- terra::predict(predictors_stack_2080_ssp585, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2080_ssp585, main = "Predicted Suitability (RF)")


writeRaster(rf_pred_prob,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/water/suitability/water_suitability_hist_updated.tif",
            overwrite = TRUE)

writeRaster(rf_pred_prob_2020_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/water/suitability/water_suitability_2020_ssp126_updated.tif",
            overwrite = TRUE)

writeRaster(rf_pred_prob_2020_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/water/suitability/water_suitability_2020_ssp245_updated.tif",
            overwrite = TRUE)

writeRaster(rf_pred_prob_2020_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/water/suitability/water_suitability_2020_ssp585_updated.tif",
            overwrite = TRUE)

writeRaster(rf_pred_prob_2050_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/water/suitability/water_suitability_2050_ssp126_updated.tif",
            overwrite = TRUE)

writeRaster(rf_pred_prob_2050_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/water/suitability/water_suitability_2050_ssp245_updated.tif",
            overwrite = TRUE)

writeRaster(rf_pred_prob_2050_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/water/suitability/water_suitability_2050_ssp585_updated.tif",
            overwrite = TRUE)


writeRaster(rf_pred_prob_2080_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/water/suitability/water_suitability_2080_ssp126_updated.tif",
            overwrite = TRUE)

writeRaster(rf_pred_prob_2080_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/water/suitability/water_suitability_2080_ssp245_updated.tif",
            overwrite = TRUE)

writeRaster(rf_pred_prob_2080_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/water/suitability/water_suitability_2080_ssp585_updated.tif",
            overwrite = TRUE)



# --------------------------------------------
# Step 7: Model Evaluation (AUC, TSS)
# --------------------------------------------

# Extract predictors for test data locations
test_predictors <- extract(predictors_stack, test_data[, c("x", "y")])

# Combine label and predictor values
test_model_data <- cbind(label = test_data$label, test_predictors)

# Remove rows with NA values
test_model_data <- na.omit(as.data.frame(test_model_data))

# Predict probability of presence (class 1)
test_pred <- predict(rf_model, newdata = test_model_data, type = "prob")[, 2]

# Predict probabilities for test data (class "1" = presence)
test_pred <- predict(rf_model, newdata = test_data, type = "prob")[, 2]

obs_labels <- as.numeric(as.character(test_model_data$label))  # convert factor to numeric if needed

# Convert obs_labels to factor with levels 0 and 1
obs_labels_factor <- factor(obs_labels, levels = c(0,1))

# Compute ROC object explicitly
roc_obj <- roc(response = obs_labels_factor, predictor = test_pred, quiet = TRUE)
str(roc_obj)
summary(roc_obj)

auc_value <- as.numeric(roc_obj$auc)
cat("AUC =", round(auc_value, 3), "\n")

auc_value_manual <- roc_obj$auc
print(auc_value_manual)


# Get sensitivities, specificities, and thresholds from ROC object
sens <- roc_obj$sensitivities
spec <- roc_obj$specificities
thresh <- roc_obj$thresholds

# Compute TSS = sensitivity + specificity - 1
tss_vals <- sens + spec - 1

# Identify the threshold that gives the maximum TSS
max_tss_index <- which.max(tss_vals)
optimal_threshold <- thresh[max_tss_index]
max_tss <- tss_vals[max_tss_index]

max_tss <- 0.50
# Output results
cat("Optimal threshold (Max Sens + Spec):", round(optimal_threshold, 3), "\n")
cat("TSS at optimal threshold:", round(max_tss, 3), "\n")

# Create binary presence–absence map
binary_water_map_hist <- rf_pred_prob >= max_tss
binary_water_map_2020_ssp126 <- rf_pred_prob_2020_ssp126 >= max_tss
binary_water_map_2020_ssp245 <- rf_pred_prob_2020_ssp245 >= max_tss
binary_water_map_2020_ssp585 <- rf_pred_prob_2020_ssp585 >= max_tss

binary_water_map_2050_ssp126 <- rf_pred_prob_2050_ssp126 >= max_tss
binary_water_map_2050_ssp245 <- rf_pred_prob_2050_ssp245 >= max_tss
binary_water_map_2050_ssp585 <- rf_pred_prob_2050_ssp585 >= max_tss

binary_water_map_2080_ssp126 <- rf_pred_prob_2080_ssp126 >= max_tss
binary_water_map_2080_ssp245 <- rf_pred_prob_2080_ssp245 >= max_tss
binary_water_map_2080_ssp585 <- rf_pred_prob_2080_ssp585 >= max_tss

plot(binary_water_map_hist)
plot(binary_water_map_2020_ssp126)
plot(binary_water_map_2020_ssp245)
plot(binary_water_map_2020_ssp585)

plot(binary_water_map_2050_ssp126)
plot(binary_water_map_2050_ssp245)
plot(binary_water_map_2050_ssp585)

plot(binary_water_map_2080_ssp126)
plot(binary_water_map_2080_ssp245)
plot(binary_water_map_2080_ssp585)

writeRaster(binary_water_map_hist,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/water/suitability/threshold/binary_water_map_hist_updated_50.tif",
            overwrite = TRUE)

writeRaster(binary_water_map_2020_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/water/suitability/threshold/binary_water_map_2020_ssp126_updated_50.tif",
            overwrite = TRUE)

writeRaster(binary_water_map_2020_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/water/suitability/threshold/binary_water_map_2020_ssp245_updated_50.tif",
            overwrite = TRUE)

writeRaster(binary_water_map_2020_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/water/suitability/threshold/binary_water_map_2020_ssp585_updated_50.tif",
            overwrite = TRUE)

writeRaster(binary_water_map_2050_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/water/suitability/threshold/binary_water_map_2050_ssp126_updated_50.tif",
            overwrite = TRUE)

writeRaster(binary_water_map_2050_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/water/suitability/threshold/binary_water_map_2050_ssp245_updated_50.tif",
            overwrite = TRUE)

writeRaster(binary_water_map_2050_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/water/suitability/threshold/binary_water_map_2050_ssp585_updated_50.tif",
            overwrite = TRUE)


writeRaster(binary_water_map_2080_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/water/suitability/threshold/binary_water_map_2080_ssp126_updated_50.tif",
            overwrite = TRUE)

writeRaster(binary_water_map_2080_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/water/suitability/threshold/binary_water_map_2080_ssp245_updated_50.tif",
            overwrite = TRUE)

writeRaster(binary_water_map_2080_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/water/suitability/threshold/binary_water_map_2080_ssp585_updated_50.tif",
            overwrite = TRUE)


# Water stable-loss, or refugia

refugia_water_2020_ssp126 <- binary_water_map_hist & binary_water_map_2020_ssp126
plot(refugia_water_2020_ssp126)
exposure_water_2020_ssp126 <- binary_water_map_hist & !binary_water_map_2020_ssp126
plot(exposure_water_2020_ssp126)

combined_water_change_2020_ssp126 <- classify(
  refugia_water_2020_ssp126, cbind(1, 1))  # Start with refugia: value 1
combined_water_change_2020_ssp126[exposure_water_2020_ssp126 == 1] <- 2  # Set exposure to value 2
combined_water_change_2020_ssp126[refugia_water_2020_ssp126 == 0 & exposure_water_2020_ssp126 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")

# Step 3: Plot the heatmap
plot(combined_water_change_2020_ssp126, col = colors, legend = FALSE, main = "Water Refugia and Exposure (2020 SSP126)")


refugia_water_2020_ssp245 <- binary_water_map_hist & binary_water_map_2020_ssp245
plot(refugia_water_2020_ssp245)
exposure_water_2020_ssp245 <- binary_water_map_hist & !binary_water_map_2020_ssp245
plot(exposure_water_2020_ssp245)

combined_water_change_2020_ssp245 <- classify(
  refugia_water_2020_ssp245, cbind(1, 1))  # Start with refugia: value 1
combined_water_change_2020_ssp245[exposure_water_2020_ssp245 == 1] <- 2  # Set exposure to value 2
combined_water_change_2020_ssp245[refugia_water_2020_ssp245 == 0 & exposure_water_2020_ssp245 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")

# Step 3: Plot the heatmap
plot(combined_water_change_2020_ssp245, col = colors, legend = FALSE, main = "Water Refugia and Exposure (2020 SSP245)")


refugia_water_2020_ssp585 <- binary_water_map_hist & binary_water_map_2020_ssp585
plot(refugia_water_2020_ssp585)
exposure_water_2020_ssp585 <- binary_water_map_hist & !binary_water_map_2020_ssp585
plot(exposure_water_2020_ssp585)

combined_water_change_2020_ssp585 <- classify(
  refugia_water_2020_ssp585, cbind(1, 1))  # Start with refugia: value 1
combined_water_change_2020_ssp585[exposure_water_2020_ssp585 == 1] <- 2  # Set exposure to value 2
combined_water_change_2020_ssp585[refugia_water_2020_ssp585 == 0 & exposure_water_2020_ssp585 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")

# Step 3: Plot the heatmap
plot(combined_water_change_2020_ssp585, col = colors, legend = FALSE, main = "Water Refugia and Exposure (2020 SSP245)")



refugia_water_2050_ssp126 <- binary_water_map_hist & binary_water_map_2050_ssp126
plot(refugia_water_2050_ssp126)
exposure_water_2050_ssp126 <- binary_water_map_hist & !binary_water_map_2050_ssp126
plot(exposure_water_2050_ssp126)

combined_water_change_2050_ssp126 <- classify(
  refugia_water_2050_ssp126, cbind(1, 1))  # Start with refugia: value 1
combined_water_change_2050_ssp126[exposure_water_2050_ssp126 == 1] <- 2  # Set exposure to value 2
combined_water_change_2050_ssp126[refugia_water_2050_ssp126 == 0 & exposure_water_2050_ssp126 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")

# Step 3: Plot the heatmap
plot(combined_water_change_2050_ssp126, col = colors, legend = FALSE, main = "Water Refugia and Exposure (2050 SSP126)")


refugia_water_2050_ssp245 <- binary_water_map_hist & binary_water_map_2050_ssp245
plot(refugia_water_2050_ssp245)
exposure_water_2050_ssp245 <- binary_water_map_hist & !binary_water_map_2050_ssp245
plot(exposure_water_2050_ssp245)

combined_water_change_2050_ssp245 <- classify(
  refugia_water_2050_ssp245, cbind(1, 1))  # Start with refugia: value 1
combined_water_change_2050_ssp245[exposure_water_2050_ssp245 == 1] <- 2  # Set exposure to value 2
combined_water_change_2050_ssp245[refugia_water_2050_ssp245 == 0 & exposure_water_2050_ssp245 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")

# Step 3: Plot the heatmap
plot(combined_water_change_2050_ssp245, col = colors, legend = FALSE, main = "Water Refugia and Exposure (2050 SSP245)")


refugia_water_2050_ssp585 <- binary_water_map_hist & binary_water_map_2050_ssp585
plot(refugia_water_2050_ssp585)
exposure_water_2050_ssp585 <- binary_water_map_hist & !binary_water_map_2050_ssp585
plot(exposure_water_2050_ssp585)

combined_water_change_2050_ssp585 <- classify(
  refugia_water_2050_ssp585, cbind(1, 1))  # Start with refugia: value 1
combined_water_change_2050_ssp585[exposure_water_2050_ssp585 == 1] <- 2  # Set exposure to value 2
combined_water_change_2050_ssp585[refugia_water_2050_ssp585 == 0 & exposure_water_2050_ssp585 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")

# Step 3: Plot the heatmap
plot(combined_water_change_2050_ssp585, col = colors, legend = FALSE, main = "Water Refugia and Exposure (2050 SSP585)")


refugia_water_2080_ssp126 <- binary_water_map_hist & binary_water_map_2080_ssp126
plot(refugia_water_2080_ssp126)
exposure_water_2080_ssp126 <- binary_water_map_hist & !binary_water_map_2080_ssp126
plot(exposure_water_2080_ssp126)

combined_water_change_2080_ssp126 <- classify(
  refugia_water_2080_ssp126, cbind(1, 1))  # Start with refugia: value 1
combined_water_change_2080_ssp126[exposure_water_2080_ssp126 == 1] <- 2  # Set exposure to value 2
combined_water_change_2080_ssp126[refugia_water_2080_ssp126 == 0 & exposure_water_2080_ssp126 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")

# Step 3: Plot the heatmap
plot(combined_water_change_2080_ssp126, col = colors, legend = FALSE, main = "Water Refugia and Exposure (2050 SSP126)")


refugia_water_2080_ssp245 <- binary_water_map_hist & binary_water_map_2080_ssp245
plot(refugia_water_2080_ssp245)
exposure_water_2080_ssp245 <- binary_water_map_hist & !binary_water_map_2080_ssp245
plot(exposure_water_2080_ssp245)

combined_water_change_2080_ssp245 <- classify(
  refugia_water_2080_ssp245, cbind(1, 1))  # Start with refugia: value 1
combined_water_change_2080_ssp245[exposure_water_2080_ssp245 == 1] <- 2  # Set exposure to value 2
combined_water_change_2080_ssp245[refugia_water_2080_ssp245 == 0 & exposure_water_2080_ssp245 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")

# Step 3: Plot the heatmap
plot(combined_water_change_2080_ssp245, col = colors, legend = FALSE, main = "Water Refugia and Exposure (2050 SSP245)")


refugia_water_2080_ssp585 <- binary_water_map_hist & binary_water_map_2080_ssp585
plot(refugia_water_2080_ssp585)
exposure_water_2080_ssp585 <- binary_water_map_hist & !binary_water_map_2080_ssp585
plot(exposure_water_2080_ssp585)

combined_water_change_2080_ssp585 <- classify(
  refugia_water_2080_ssp585, cbind(1, 1))  # Start with refugia: value 1
combined_water_change_2080_ssp585[exposure_water_2080_ssp585 == 1] <- 2  # Set exposure to value 2
combined_water_change_2080_ssp585[refugia_water_2080_ssp585 == 0 & exposure_water_2080_ssp585 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")


# Step 3: Plot the heatmap
plot(combined_water_change_2080_ssp585, col = colors, legend = FALSE, main = "Water Refugia and Exposure (2050 SSP585)")


writeRaster(combined_water_change_2020_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/water/refugia/threshold/combined_water_refugia_exposure_2020_ssp126_updated_50.tif",
            overwrite = TRUE)

writeRaster(combined_water_change_2020_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/water/refugia/threshold/combined_water_refugia_exposure_2020_ssp245_updated_50.tif",
            overwrite = TRUE)

writeRaster(combined_water_change_2020_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/water/refugia/threshold/combined_water_refugia_exposure_2020_ssp585_updated_50.tif",
            overwrite = TRUE)

writeRaster(combined_water_change_2050_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/water/refugia/threshold/combined_water_refugia_exposure_2050_ssp126_updated_50.tif",
            overwrite = TRUE)

writeRaster(combined_water_change_2050_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/water/refugia/threshold/combined_water_refugia_exposure_2050_ssp245_updated_50.tif",
            overwrite = TRUE)

writeRaster(combined_water_change_2050_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/water/refugia/threshold/combined_water_refugia_exposure_2050_ssp585_updated_50.tif",
            overwrite = TRUE)

writeRaster(combined_water_change_2080_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/water/refugia/threshold/combined_water_refugia_exposure_2080_ssp126_updated_50.tif",
            overwrite = TRUE)


writeRaster(combined_water_change_2080_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/water/refugia/threshold/combined_water_refugia_exposure_2080_ssp245_updated_50.tif",
            overwrite = TRUE)

writeRaster(combined_water_change_2080_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/water/refugia/threshold/combined_water_refugia_exposure_2080_ssp585_updated_50.tif",
            overwrite = TRUE)



# convert heat maps to polygon
combined_water_change_polygon_2020_ssp126 <- as.polygons(combined_water_change_2020_ssp126, dissolve = TRUE)
# Save as a shapefile
writeVector(combined_water_change_polygon_2020_ssp126, "F:/Uillinois_data/analysis/habitat_suitability/RF/water/refugia/threshold/combined_water_refugia_exposure_2020_ssp126_updated_50.shp", filetype = "ESRI Shapefile", overwrite = TRUE)

combined_water_change_polygon_2020_ssp245 <- as.polygons(combined_water_change_2020_ssp245, dissolve = TRUE)
writeVector(combined_water_change_polygon_2020_ssp245, "F:/Uillinois_data/analysis/habitat_suitability/RF/water/refugia/threshold/combined_water_refugia_exposure_2020_ssp245_updated_50.shp", filetype = "ESRI Shapefile", overwrite = TRUE)

combined_water_change_polygon_2020_ssp585 <- as.polygons(combined_water_change_2020_ssp585, dissolve = TRUE)
writeVector(combined_water_change_polygon_2020_ssp585, "F:/Uillinois_data/analysis/habitat_suitability/RF/water/refugia/threshold/combined_water_refugia_exposure_2020_ssp585_updated_50.shp", filetype = "ESRI Shapefile", overwrite = TRUE)


combined_water_change_polygon_2050_ssp126 <- as.polygons(combined_water_change_2050_ssp126, dissolve = TRUE)
writeVector(combined_water_change_polygon_2050_ssp126, "F:/Uillinois_data/analysis/habitat_suitability/RF/water/refugia/threshold/combined_water_refugia_exposure_2050_ssp126_updated_50.shp", filetype = "ESRI Shapefile", overwrite = TRUE)

combined_water_change_polygon_2050_ssp245 <- as.polygons(combined_water_change_2050_ssp245, dissolve = TRUE)
writeVector(combined_water_change_polygon_2050_ssp245, "F:/Uillinois_data/analysis/habitat_suitability/RF/water/refugia/threshold/combined_water_refugia_exposure_2050_ssp245_updated_50.shp", filetype = "ESRI Shapefile", overwrite = TRUE)

combined_water_change_polygon_2050_ssp585 <- as.polygons(combined_water_change_2050_ssp585, dissolve = TRUE)
writeVector(combined_water_change_polygon_2050_ssp585, "F:/Uillinois_data/analysis/habitat_suitability/RF/water/refugia/threshold/combined_water_refugia_exposure_2050_ssp585_updated_50.shp", filetype = "ESRI Shapefile", overwrite = TRUE)


combined_water_change_polygon_2080_ssp126 <- as.polygons(combined_water_change_2080_ssp126, dissolve = TRUE)
writeVector(combined_water_change_polygon_2080_ssp126, "F:/Uillinois_data/analysis/habitat_suitability/RF/water/refugia/threshold/combined_water_refugia_exposure_2080_ssp126_updated_50.shp", filetype = "ESRI Shapefile", overwrite = TRUE)

combined_water_change_polygon_2080_ssp245 <- as.polygons(combined_water_change_2080_ssp245, dissolve = TRUE)
writeVector(combined_water_change_polygon_2080_ssp245, "F:/Uillinois_data/analysis/habitat_suitability/RF/water/refugia/threshold/combined_water_refugia_exposure_2080_ssp245_updated_50.shp", filetype = "ESRI Shapefile", overwrite = TRUE)

combined_water_change_polygon_2080_ssp585 <- as.polygons(combined_water_change_2080_ssp585, dissolve = TRUE)
writeVector(combined_water_change_polygon_2080_ssp585, "F:/Uillinois_data/analysis/habitat_suitability/RF/water/refugia/threshold/combined_water_refugia_exposure_2080_ssp585_updated_50.shp", filetype = "ESRI Shapefile", overwrite = TRUE)



# Combine results into a data frame

# Refugia

cell_area_km2 <- 1  # each pixel is 1 km² due to 1000m x 1000m resolution

water_refugia_hist_2020_ssp126_area <- global(refugia_water_2020_ssp126, "sum", na.rm = TRUE)[[1]] * cell_area_km2
water_refugia_hist_2020_ssp245_area <- global(refugia_water_2020_ssp245, "sum", na.rm = TRUE)[[1]] * cell_area_km2
water_refugia_hist_2020_ssp585_area <- global(refugia_water_2020_ssp585, "sum", na.rm = TRUE)[[1]] * cell_area_km2

water_refugia_hist_2050_ssp126_area <- global(refugia_water_2050_ssp126, "sum", na.rm = TRUE)[[1]] * cell_area_km2
water_refugia_hist_2050_ssp245_area <- global(refugia_water_2050_ssp245, "sum", na.rm = TRUE)[[1]] * cell_area_km2
water_refugia_hist_2050_ssp585_area <- global(refugia_water_2050_ssp585, "sum", na.rm = TRUE)[[1]] * cell_area_km2

water_refugia_hist_2080_ssp126_area <- global(refugia_water_2080_ssp126, "sum", na.rm = TRUE)[[1]] * cell_area_km2
water_refugia_hist_2080_ssp245_area <- global(refugia_water_2080_ssp245, "sum", na.rm = TRUE)[[1]] * cell_area_km2
water_refugia_hist_2080_ssp585_area <- global(refugia_water_2080_ssp585, "sum", na.rm = TRUE)[[1]] * cell_area_km2


water_refugia_df <- data.frame(
  TimePeriod = c("2020", "2020", "2020",
                 "2050", "2050", "2050",
                 "2080", "2080", "2080"),
  Scenario = c("ssp126", "ssp245", "ssp585",
               "ssp126", "ssp245", "ssp585",
               "ssp126", "ssp245", "ssp585"),
  RefugiaArea_km2 = c(water_refugia_hist_2020_ssp126_area,
                      water_refugia_hist_2020_ssp245_area,
                      water_refugia_hist_2020_ssp585_area,
                      water_refugia_hist_2050_ssp126_area,
                      water_refugia_hist_2050_ssp245_area,
                      water_refugia_hist_2050_ssp585_area,
                      water_refugia_hist_2080_ssp126_area,
                      water_refugia_hist_2080_ssp245_area,
                      water_refugia_hist_2080_ssp585_area)
)

# Write to CSV
write.csv(water_refugia_df, "F:/Uillinois_data/analysis/habitat_suitability/RF/water/refugia/threshold/water_refugia_areas_by_scenario_updated_50.csv", row.names = FALSE)
water_refugia_df

# Exposure

water_exposure_hist_2020_ssp126_area <- global(exposure_water_2020_ssp126, "sum", na.rm = TRUE)[[1]] * cell_area_km2
water_exposure_hist_2020_ssp245_area <- global(exposure_water_2020_ssp245, "sum", na.rm = TRUE)[[1]] * cell_area_km2
water_exposure_hist_2020_ssp585_area <- global(exposure_water_2020_ssp585, "sum", na.rm = TRUE)[[1]] * cell_area_km2

water_exposure_hist_2050_ssp126_area <- global(exposure_water_2050_ssp126, "sum", na.rm = TRUE)[[1]] * cell_area_km2
water_exposure_hist_2050_ssp245_area <- global(exposure_water_2050_ssp245, "sum", na.rm = TRUE)[[1]] * cell_area_km2
water_exposure_hist_2050_ssp585_area <- global(exposure_water_2050_ssp585, "sum", na.rm = TRUE)[[1]] * cell_area_km2

water_exposure_hist_2080_ssp126_area <- global(exposure_water_2080_ssp126, "sum", na.rm = TRUE)[[1]] * cell_area_km2
water_exposure_hist_2080_ssp245_area <- global(exposure_water_2080_ssp245, "sum", na.rm = TRUE)[[1]] * cell_area_km2
water_exposure_hist_2080_ssp585_area <- global(exposure_water_2080_ssp585, "sum", na.rm = TRUE)[[1]] * cell_area_km2



water_exposure_df <- data.frame(
  TimePeriod = c("2020", "2020", "2020",
                 "2050", "2050", "2050",
                 "2080", "2080", "2080"),
  Scenario = c("ssp126", "ssp245", "ssp585",
               "ssp126", "ssp245", "ssp585",
               "ssp126", "ssp245", "ssp585"),
  RefugiaArea_km2 = c(water_exposure_hist_2020_ssp126_area,
                      water_exposure_hist_2020_ssp245_area,
                      water_exposure_hist_2020_ssp585_area,
                      water_exposure_hist_2050_ssp126_area,
                      water_exposure_hist_2050_ssp245_area,
                      water_exposure_hist_2050_ssp585_area,
                      water_exposure_hist_2080_ssp126_area,
                      water_exposure_hist_2080_ssp245_area,
                      water_exposure_hist_2080_ssp585_area)
)

# Write to CSV
write.csv(water_exposure_df, "F:/Uillinois_data/analysis/habitat_suitability/RF/water/refugia/water_exposure_areas_by_scenario_updated_50.csv", row.names = FALSE)


# Plot calculated forest Refugia and exposure
# Create the data frame using calculated refugia areas

# Count the number of cells with water (value == 1)
water_area_km2 <- sum(values(water) == 1, na.rm = TRUE)

cat("Total water area (km²):", water_area_km2, "\n")

water_refugia <- data.frame(
  Year = c("2020s", "2020s", "2020s", "2050s", "2050s", "2050s", "2080s", "2080s", "2080s"),
  Emission_Scenario = c("ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585"),
  Refugia = c(85.4, 82.4, 81.8, 74.3, 67.4, 56.4, 74.5, 51, 6.7)
)

# Convert Year to an ordered factor for proper sequencing
water_refugia$Year <- factor(water_refugia$Year, levels = c("2020s", "2050s", "2080s"))

# Plot the refugia data and customized axis lines
ggplot(water_refugia, aes(x = Year, y = Refugia, group = Emission_Scenario, color = Emission_Scenario)) +
  geom_line(size = 1.2) +
  geom_point(size = 3) +
  labs(title = "Projected Fresh Water Refugia for the MW CASC Region",
       x = "Time Period",
       y = "Percentage Refugia",
       color = "Emission Scenario") +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank(),  # Remove minor grid lines
    axis.line = element_line(size = 1, color = "black"),  # Bold x and y axis lines
    axis.text = element_text(size = 11),  # Adjust axis text size
    axis.title = element_text(size = 12, face = "bold")  # Bold x and y axis labels
  )


# Repeat for exposure

# Create the data frame
water_exposure_data <- data.frame(
  Year = c("2020s", "2020s", "2020s", "2050s", "2050s", "2050s", "2080s", "2080s", "2080s"),
  Emission_Scenario = c("ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585"),
  Vulnerability = c(1.4, 4.4, 5, 12.6, 19.4, 30.4,12, 35.8, 80.1)
)

# Convert Year to an ordered factor for proper sequencing
water_exposure_data$Year <- factor(water_exposure_data$Year, levels = c("2020s", "2050s", "2080s"))

# Plot the vulnerabile areas data
ggplot(water_exposure_data, aes(x = Year, y = Vulnerability, group = Emission_Scenario, color = Emission_Scenario)) +
  geom_line(size = 1.2) +
  geom_point(size = 3) +
  labs(title = "Projected Fresh Water Exposure Areas for the MW CASC Region",
       x = "Time Period",
       y = "Percentage Exposure",
       color = "Emission Scenario") +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank(),  # Remove minor grid lines
    axis.line = element_line(size = 1, color = "black"),  # Bold x and y axis lines
    axis.text = element_text(size = 11),  # Adjust axis text size
    axis.title = element_text(size = 12, face = "bold")  # Bold x and y axis labels
  )




# Do for 90 percentile maps

# Count the number of cells with water (value == 1)
water_area_km2 <- sum(values(water) == 1, na.rm = TRUE)

cat("Total water area (km²):", water_area_km2, "\n")

water_refugia <- data.frame(
  Year = c("2020s", "2020s", "2020s", "2050s", "2050s", "2050s", "2080s", "2080s", "2080s"),
  Emission_Scenario = c("ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585"),
  Refugia = c(86.2, 82.9, 82.4, 78.4, 73.6, 61.8, 78.3, 54.5, 14.1)
)

# Convert Year to an ordered factor for proper sequencing
water_refugia$Year <- factor(water_refugia$Year, levels = c("2020s", "2050s", "2080s"))

# Plot the refugia data and customized axis lines
ggplot(water_refugia, aes(x = Year, y = Refugia, group = Emission_Scenario, color = Emission_Scenario)) +
  geom_line(size = 1.2) +
  geom_point(size = 3) +
  labs(title = "Projected Fresh Water Refugia for the MW CASC Region",
       x = "Time Period",
       y = "Percentage Refugia",
       color = "Emission Scenario") +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank(),  # Remove minor grid lines
    axis.line = element_line(size = 1, color = "black"),  # Bold x and y axis lines
    axis.text = element_text(size = 11),  # Adjust axis text size
    axis.title = element_text(size = 12, face = "bold")  # Bold x and y axis labels
  )


# Repeat for exposure

# Create the data frame
water_exposure_data <- data.frame(
  Year = c("2020s", "2020s", "2020s", "2050s", "2050s", "2050s", "2080s", "2080s", "2080s"),
  Emission_Scenario = c("ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585"),
  Vulnerability = c(1.6, 4.9, 5.4, 9.4, 14.2, 26, 9.5, 33.3, 73.7)
)

# Convert Year to an ordered factor for proper sequencing
water_exposure_data$Year <- factor(water_exposure_data$Year, levels = c("2020s", "2050s", "2080s"))

# Plot the vulnerabile areas data
ggplot(water_exposure_data, aes(x = Year, y = Vulnerability, group = Emission_Scenario, color = Emission_Scenario)) +
  geom_line(size = 1.2) +
  geom_point(size = 3) +
  labs(title = "Projected Fresh Water Exposure Areas for the MW CASC Region",
       x = "Time Period",
       y = "Percentage Exposure",
       color = "Emission Scenario") +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank(),  # Remove minor grid lines
    axis.line = element_line(size = 1, color = "black"),  # Bold x and y axis lines
    axis.text = element_text(size = 11),  # Adjust axis text size
    axis.title = element_text(size = 12, face = "bold")  # Bold x and y axis labels
  )




# Do for 70 percentile maps

# Count the number of cells with water (value == 1)
water_area_km2 <- sum(values(water) == 1, na.rm = TRUE)

cat("Total water area (km²):", water_area_km2, "\n")

water_refugia <- data.frame(
  Year = c("2020s", "2020s", "2020s", "2050s", "2050s", "2050s", "2080s", "2080s", "2080s"),
  Emission_Scenario = c("ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585"),
  Refugia = c(92.2, 86.5, 85.9, 81.9, 80.4, 75.6, 81.7, 71, 28.6)
)

# Convert Year to an ordered factor for proper sequencing
water_refugia$Year <- factor(water_refugia$Year, levels = c("2020s", "2050s", "2080s"))

# Plot the refugia data and customized axis lines
ggplot(water_refugia, aes(x = Year, y = Refugia, group = Emission_Scenario, color = Emission_Scenario)) +
  geom_line(size = 1.2) +
  geom_point(size = 3) +
  labs(title = "Projected Fresh Water Refugia for the MW CASC Region",
       x = "Time Period",
       y = "Percentage Refugia",
       color = "Emission Scenario") +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank(),  # Remove minor grid lines
    axis.line = element_line(size = 1, color = "black"),  # Bold x and y axis lines
    axis.text = element_text(size = 11),  # Adjust axis text size
    axis.title = element_text(size = 12, face = "bold")  # Bold x and y axis labels
  )


# Repeat for exposure

# Create the data frame
water_exposure_data <- data.frame(
  Year = c("2020s", "2020s", "2020s", "2050s", "2050s", "2050s", "2080s", "2080s", "2080s"),
  Emission_Scenario = c("ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585"),
  Vulnerability = c(2.3, 8, 8.6, 12.6, 14.1, 18.9, 12.8, 23.5, 70)
)

# Convert Year to an ordered factor for proper sequencing
water_exposure_data$Year <- factor(water_exposure_data$Year, levels = c("2020s", "2050s", "2080s"))

# Plot the vulnerabile areas data
ggplot(water_exposure_data, aes(x = Year, y = Vulnerability, group = Emission_Scenario, color = Emission_Scenario)) +
  geom_line(size = 1.2) +
  geom_point(size = 3) +
  labs(title = "Projected Fresh Water Exposure Areas for the MW CASC Region",
       x = "Time Period",
       y = "Percentage Exposure",
       color = "Emission Scenario") +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank(),  # Remove minor grid lines
    axis.line = element_line(size = 1, color = "black"),  # Bold x and y axis lines
    axis.text = element_text(size = 11),  # Adjust axis text size
    axis.title = element_text(size = 12, face = "bold")  # Bold x and y axis labels
  )



# Do for 50 percentile maps

# Count the number of cells with water (value == 1)
water_area_km2 <- sum(values(binary_water_map_hist) == 1, na.rm = TRUE)

cat("Total water area (km²):", water_area_km2, "\n")

water_refugia <- data.frame(
  Year = c("2020s", "2020s", "2020s", "2050s", "2050s", "2050s", "2080s", "2080s", "2080s"),
  Emission_Scenario = c("ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585"),
  Refugia = c(95.4, 88.8, 87.4, 79.8, 77.6, 75.1, 79.4, 74.9, 57)
)

# Convert Year to an ordered factor for proper sequencing
water_refugia$Year <- factor(water_refugia$Year, levels = c("2020s", "2050s", "2080s"))

# Plot the refugia data and customized axis lines
ggplot(water_refugia, aes(x = Year, y = Refugia, group = Emission_Scenario, color = Emission_Scenario)) +
  geom_line(size = 1.2) +
  geom_point(size = 3) +
  labs(title = "Projected Fresh Water Refugia for the MW CASC Region",
       x = "Time Period",
       y = "Percentage Refugia",
       color = "Emission Scenario") +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank(),  # Remove minor grid lines
    axis.line = element_line(size = 1, color = "black"),  # Bold x and y axis lines
    axis.text = element_text(size = 11),  # Adjust axis text size
    axis.title = element_text(size = 12, face = "bold")  # Bold x and y axis labels
  )


# Repeat for exposure

# Create the data frame
water_exposure_data <- data.frame(
  Year = c("2020s", "2020s", "2020s", "2050s", "2050s", "2050s", "2080s", "2080s", "2080s"),
  Emission_Scenario = c("ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585"),
  Vulnerability = c(4.6, 11.2, 12.6, 20.2, 22.4, 24.9, 20.6, 25.1, 43)
)

# Convert Year to an ordered factor for proper sequencing
water_exposure_data$Year <- factor(water_exposure_data$Year, levels = c("2020s", "2050s", "2080s"))

# Plot the vulnerabile areas data
ggplot(water_exposure_data, aes(x = Year, y = Vulnerability, group = Emission_Scenario, color = Emission_Scenario)) +
  geom_line(size = 1.2) +
  geom_point(size = 3) +
  labs(title = "Projected Fresh Water Exposure Areas for the MW CASC Region",
       x = "Time Period",
       y = "Percentage Exposure",
       color = "Emission Scenario") +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank(),  # Remove minor grid lines
    axis.line = element_line(size = 1, color = "black"),  # Bold x and y axis lines
    axis.text = element_text(size = 11),  # Adjust axis text size
    axis.title = element_text(size = 12, face = "bold")  # Bold x and y axis labels
  )




# ----------------------------------------------------------------



# Test RandomForest model for forest

# resample forest to align with predictors
forest_r <- resample(forest, EMT, method = "near")
r_stack <- c(EMT, EXT, PPT_at, PPT_sm, PPT_wt, elevation, slope, forest_r)
names(r_stack) <- c("EMT", "EXT", "PPT_at", "PPT_sm",
                    "PPT_wt", "elevation", "slope", "forest")

# prepare data for modeling

# Convert to data frame
df <- as.data.frame(r_stack, xy = TRUE, na.rm = TRUE)
df$forest <- ifelse(df$forest >= 1, 1, 0)


# --------------------------------------------
# Step 2: Sample 10k presence & background points
# --------------------------------------------
set.seed(123)
presence_df <- df[df$forest == 1, c("x", "y")]
background_df <- df[df$forest == 0, c("x", "y")]

n_presence <- min(100000, nrow(presence_df))
n_background <- min(100000, nrow(background_df))

presence_points <- presence_df[sample(1:nrow(presence_df), n_presence), ]
background_points <- background_df[sample(1:nrow(background_df), n_background), ]

# --------------------------------------------
# Step 3: Train/test split (80/20)
# --------------------------------------------
train_idx_pres <- sample(1:n_presence, size = 0.8 * n_presence)
train_idx_back <- sample(1:n_background, size = 0.8 * n_background)

train_pres <- presence_points[train_idx_pres, ]
test_pres <- presence_points[-train_idx_pres, ]

train_back <- background_points[train_idx_back, ]
test_back <- background_points[-train_idx_back, ]


# --------------------------------------------
# Step 3: Combine and split into train/test (80/20)
# --------------------------------------------
presence_points$label <- 1
background_points$label <- 0

all_data <- rbind(presence_points, background_points)
train_idx <- sample(1:nrow(all_data), size = 0.8 * nrow(all_data))

train_data <- all_data[train_idx, ]
test_data <- all_data[-train_idx, ]


# Extract predictor values
predictor_values <- extract(predictors_stack, train_data[, c("x", "y")])

# Combine and remove NA
model_data <- cbind(label = train_data$label, predictor_values)
model_data <- na.omit(model_data)

# Now convert to data frame
model_data <- as.data.frame(model_data)

# Now safely convert label to a factor
model_data$label <- factor(model_data$label, levels = c(0, 1))


# Train RF model
rf_model <- randomForest(
  label ~ ., 
  data = model_data[, -which(names(model_data) == "ID")],
  ntree = 50,
  importance = TRUE
)

# Get variable importance (Mean Decrease in Gini)
var_imp <- importance(rf_model)

# Extract Gini importance and convert to data frame
var_imp_df <- data.frame(
  Variable = rownames(var_imp),
  Gini = var_imp[, "MeanDecreaseGini"]
)

# Calculate percentage contribution
var_imp_df$PercentContribution <- 100 * var_imp_df$Gini / sum(var_imp_df$Gini)

# Round for display
var_imp_df$PercentContribution <- round(var_imp_df$PercentContribution, 2)

# Sort descending
var_imp_df <- var_imp_df[order(-var_imp_df$PercentContribution), ]

# View
print(var_imp_df)

rf_pred_prob <- terra::predict(predictors_stack, rf_model, type = "prob", index = 2)
plot(rf_pred_prob, main = "Predicted Suitability (RF)")

rf_pred_prob_2020_ssp126 <- terra::predict(predictors_stack_2020_ssp126, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2020_ssp126, main = "Predicted Suitability (RF)")

rf_pred_prob_2020_ssp245 <- terra::predict(predictors_stack_2020_ssp245, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2020_ssp245, main = "Predicted Suitability (RF)")

rf_pred_prob_2020_ssp585 <- terra::predict(predictors_stack_2020_ssp585, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2020_ssp585, main = "Predicted Suitability (RF)")

rf_pred_prob_2050_ssp126 <- terra::predict(predictors_stack_2050_ssp126, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2050_ssp126, main = "Predicted Suitability (RF)")

rf_pred_prob_2050_ssp245 <- terra::predict(predictors_stack_2050_ssp245, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2050_ssp245, main = "Predicted Suitability (RF)")

rf_pred_prob_2050_ssp585 <- terra::predict(predictors_stack_2050_ssp585, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2050_ssp585, main = "Predicted Suitability (RF)")


rf_pred_prob_2080_ssp126 <- terra::predict(predictors_stack_2080_ssp126, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2080_ssp126, main = "Predicted Suitability (RF)")

rf_pred_prob_2080_ssp245 <- terra::predict(predictors_stack_2080_ssp245, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2080_ssp245, main = "Predicted Suitability (RF)")

rf_pred_prob_2080_ssp585 <- terra::predict(predictors_stack_2080_ssp585, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2080_ssp585, main = "Predicted Suitability (RF)")


writeRaster(rf_pred_prob,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/forest/suitability/forest_suitability_hist_updated.tif",
            overwrite = TRUE)

writeRaster(rf_pred_prob_2020_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/forest/suitability/forest_suitability_2020_ssp126_updated.tif",
            overwrite = TRUE)

writeRaster(rf_pred_prob_2020_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/forest/suitability/forest_suitability_2020_ssp245_updated.tif",
            overwrite = TRUE)

writeRaster(rf_pred_prob_2020_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/forest/suitability/forest_suitability_2020_ssp585_updated.tif",
            overwrite = TRUE)

writeRaster(rf_pred_prob_2050_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/forest/suitability/forest_suitability_2050_ssp126_updated.tif",
            overwrite = TRUE)

writeRaster(rf_pred_prob_2050_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/forest/suitability/forest_suitability_2050_ssp245_updated.tif",
            overwrite = TRUE)

writeRaster(rf_pred_prob_2050_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/forest/suitability/forest_suitability_2050_ssp585_updated.tif",
            overwrite = TRUE)


writeRaster(rf_pred_prob_2080_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/forest/suitability/forest_suitability_2080_ssp126_updated.tif",
            overwrite = TRUE)

writeRaster(rf_pred_prob_2080_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/forest/suitability/forest_suitability_2080_ssp245_updated.tif",
            overwrite = TRUE)

writeRaster(rf_pred_prob_2080_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/forest/suitability/forest_suitability_2080_ssp585_updated.tif",
            overwrite = TRUE)



# --------------------------------------------
# Step 7: Model Evaluation (AUC, TSS)
# --------------------------------------------

# Extract predictors for test data locations
test_predictors <- extract(predictors_stack, test_data[, c("x", "y")])

# Combine label and predictor values
test_model_data <- cbind(label = test_data$label, test_predictors)

# Remove rows with NA values
test_model_data <- na.omit(as.data.frame(test_model_data))

# Predict probability of presence (class 1)
test_pred <- predict(rf_model, newdata = test_model_data, type = "prob")[, 2]

# Predict probabilities for test data (class "1" = presence)
test_pred <- predict(rf_model, newdata = test_data, type = "prob")[, 2]

obs_labels <- as.numeric(as.character(test_model_data$label))  # convert factor to numeric if needed

# Convert obs_labels to factor with levels 0 and 1
obs_labels_factor <- factor(obs_labels, levels = c(0,1))

# Compute ROC object explicitly
roc_obj <- roc(response = obs_labels_factor, predictor = test_pred, quiet = TRUE)
str(roc_obj)
summary(roc_obj)

auc_value <- as.numeric(roc_obj$auc)
cat("AUC =", round(auc_value, 3), "\n")

auc_value_manual <- roc_obj$auc
print(auc_value_manual)


# Get sensitivities, specificities, and thresholds from ROC object
sens <- roc_obj$sensitivities
spec <- roc_obj$specificities
thresh <- roc_obj$thresholds

# Compute TSS = sensitivity + specificity - 1
tss_vals <- sens + spec - 1

# Identify the threshold that gives the maximum TSS
max_tss_index <- which.max(tss_vals)
optimal_threshold <- thresh[max_tss_index]
max_tss <- tss_vals[max_tss_index]

max_tss <- 0.50
# Output results
cat("Optimal threshold (Max Sens + Spec):", round(optimal_threshold, 3), "\n")
cat("TSS at optimal threshold:", round(max_tss, 3), "\n")

# Create binary presence–absence map
binary_forest_map_hist <- rf_pred_prob >= max_tss
binary_forest_map_2020_ssp126 <- rf_pred_prob_2020_ssp126 >= max_tss
binary_forest_map_2020_ssp245 <- rf_pred_prob_2020_ssp245 >= max_tss
binary_forest_map_2020_ssp585 <- rf_pred_prob_2020_ssp585 >= max_tss

binary_forest_map_2050_ssp126 <- rf_pred_prob_2050_ssp126 >= max_tss
binary_forest_map_2050_ssp245 <- rf_pred_prob_2050_ssp245 >= max_tss
binary_forest_map_2050_ssp585 <- rf_pred_prob_2050_ssp585 >= max_tss

binary_forest_map_2080_ssp126 <- rf_pred_prob_2080_ssp126 >= max_tss
binary_forest_map_2080_ssp245 <- rf_pred_prob_2080_ssp245 >= max_tss
binary_forest_map_2080_ssp585 <- rf_pred_prob_2080_ssp585 >= max_tss

plot(binary_forest_map_hist)
plot(binary_forest_map_2020_ssp126)
plot(binary_forest_map_2020_ssp245)
plot(binary_forest_map_2020_ssp585)

plot(binary_forest_map_2050_ssp126)
plot(binary_forest_map_2050_ssp245)
plot(binary_forest_map_2050_ssp585)

plot(binary_forest_map_2080_ssp126)
plot(binary_forest_map_2080_ssp245)
plot(binary_forest_map_2080_ssp585)

writeRaster(binary_forest_map_hist,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/forest/suitability/threshold/binary_forest_map_hist_updated_90.tif",
            overwrite = TRUE)

writeRaster(binary_forest_map_2020_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/forest/suitability/threshold/binary_forest_map_2020_ssp126_updated_90.tif",
            overwrite = TRUE)

writeRaster(binary_forest_map_2020_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/forest/suitability/threshold/binary_forest_map_2020_ssp245_updated_90.tif",
            overwrite = TRUE)

writeRaster(binary_forest_map_2020_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/forest/suitability/threshold/binary_forest_map_2020_ssp585_updated_90.tif",
            overwrite = TRUE)

writeRaster(binary_forest_map_2050_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/forest/suitability/threshold/binary_forest_map_2050_ssp126_updated_90.tif",
            overwrite = TRUE)

writeRaster(binary_forest_map_2050_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/forest/suitability/threshold/binary_forest_map_2050_ssp245_updated_90.tif",
            overwrite = TRUE)

writeRaster(binary_forest_map_2050_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/forest/suitability/threshold/binary_forest_map_2050_ssp585_updated_90.tif",
            overwrite = TRUE)


writeRaster(binary_forest_map_2080_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/forest/suitability/threshold/binary_forest_map_2080_ssp126_updated_90.tif",
            overwrite = TRUE)

writeRaster(binary_forest_map_2080_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/forest/suitability/threshold/binary_forest_map_2080_ssp245_updated_90.tif",
            overwrite = TRUE)

writeRaster(binary_forest_map_2080_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/forest/suitability/threshold/binary_forest_map_2080_ssp585_updated_90.tif",
            overwrite = TRUE)


# forest stable-loss, or refugia

refugia_forest_2020_ssp126 <- binary_forest_map_hist & binary_forest_map_2020_ssp126
plot(refugia_forest_2020_ssp126)
exposure_forest_2020_ssp126 <- binary_forest_map_hist & !binary_forest_map_2020_ssp126
plot(exposure_forest_2020_ssp126)

combined_forest_change_2020_ssp126 <- classify(
  refugia_forest_2020_ssp126, cbind(1, 1))  # Start with refugia: value 1
combined_forest_change_2020_ssp126[exposure_forest_2020_ssp126 == 1] <- 2  # Set exposure to value 2
combined_forest_change_2020_ssp126[refugia_forest_2020_ssp126 == 0 & exposure_forest_2020_ssp126 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")

# Step 3: Plot the heatmap
plot(combined_forest_change_2020_ssp126, col = colors, legend = FALSE, main = "forest Refugia and Exposure (2020 SSP126)")


refugia_forest_2020_ssp245 <- binary_forest_map_hist & binary_forest_map_2020_ssp245
plot(refugia_forest_2020_ssp245)
exposure_forest_2020_ssp245 <- binary_forest_map_hist & !binary_forest_map_2020_ssp245
plot(exposure_forest_2020_ssp245)

combined_forest_change_2020_ssp245 <- classify(
  refugia_forest_2020_ssp245, cbind(1, 1))  # Start with refugia: value 1
combined_forest_change_2020_ssp245[exposure_forest_2020_ssp245 == 1] <- 2  # Set exposure to value 2
combined_forest_change_2020_ssp245[refugia_forest_2020_ssp245 == 0 & exposure_forest_2020_ssp245 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")

# Step 3: Plot the heatmap
plot(combined_forest_change_2020_ssp245, col = colors, legend = FALSE, main = "Water Refugia and Exposure (2020 SSP245)")


refugia_forest_2020_ssp585 <- binary_forest_map_hist & binary_forest_map_2020_ssp585
plot(refugia_forest_2020_ssp585)
exposure_forest_2020_ssp585 <- binary_forest_map_hist & !binary_forest_map_2020_ssp585
plot(exposure_forest_2020_ssp585)

combined_forest_change_2020_ssp585 <- classify(
  refugia_forest_2020_ssp585, cbind(1, 1))  # Start with refugia: value 1
combined_forest_change_2020_ssp585[exposure_forest_2020_ssp585 == 1] <- 2  # Set exposure to value 2
combined_forest_change_2020_ssp585[refugia_forest_2020_ssp585 == 0 & exposure_forest_2020_ssp585 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")

# Step 3: Plot the heatmap
plot(combined_forest_change_2020_ssp585, col = colors, legend = FALSE, main = "Water Refugia and Exposure (2020 SSP245)")



refugia_forest_2050_ssp126 <- binary_forest_map_hist & binary_forest_map_2050_ssp126
plot(refugia_forest_2050_ssp126)
exposure_forest_2050_ssp126 <- binary_forest_map_hist & !binary_forest_map_2050_ssp126
plot(exposure_forest_2050_ssp126)

combined_forest_change_2050_ssp126 <- classify(
  refugia_forest_2050_ssp126, cbind(1, 1))  # Start with refugia: value 1
combined_forest_change_2050_ssp126[exposure_forest_2050_ssp126 == 1] <- 2  # Set exposure to value 2
combined_forest_change_2050_ssp126[refugia_forest_2050_ssp126 == 0 & exposure_forest_2050_ssp126 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")

# Step 3: Plot the heatmap
plot(combined_forest_change_2050_ssp126, col = colors, legend = FALSE, main = "Water Refugia and Exposure (2050 SSP126)")


refugia_forest_2050_ssp245 <- binary_forest_map_hist & binary_forest_map_2050_ssp245
plot(refugia_forest_2050_ssp245)
exposure_forest_2050_ssp245 <- binary_forest_map_hist & !binary_forest_map_2050_ssp245
plot(exposure_forest_2050_ssp245)

combined_forest_change_2050_ssp245 <- classify(
  refugia_forest_2050_ssp245, cbind(1, 1))  # Start with refugia: value 1
combined_forest_change_2050_ssp245[exposure_forest_2050_ssp245 == 1] <- 2  # Set exposure to value 2
combined_forest_change_2050_ssp245[refugia_forest_2050_ssp245 == 0 & exposure_forest_2050_ssp245 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")

# Step 3: Plot the heatmap
plot(combined_forest_change_2050_ssp245, col = colors, legend = FALSE, main = "Water Refugia and Exposure (2050 SSP245)")


refugia_forest_2050_ssp585 <- binary_forest_map_hist & binary_forest_map_2050_ssp585
plot(refugia_forest_2050_ssp585)
exposure_forest_2050_ssp585 <- binary_forest_map_hist & !binary_forest_map_2050_ssp585
plot(exposure_forest_2050_ssp585)

combined_forest_change_2050_ssp585 <- classify(
  refugia_forest_2050_ssp585, cbind(1, 1))  # Start with refugia: value 1
combined_forest_change_2050_ssp585[exposure_forest_2050_ssp585 == 1] <- 2  # Set exposure to value 2
combined_forest_change_2050_ssp585[refugia_forest_2050_ssp585 == 0 & exposure_forest_2050_ssp585 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")

# Step 3: Plot the heatmap
plot(combined_forest_change_2050_ssp585, col = colors, legend = FALSE, main = "Water Refugia and Exposure (2050 SSP585)")


refugia_forest_2080_ssp126 <- binary_forest_map_hist & binary_forest_map_2080_ssp126
plot(refugia_forest_2080_ssp126)
exposure_forest_2080_ssp126 <- binary_forest_map_hist & !binary_forest_map_2080_ssp126
plot(exposure_forest_2080_ssp126)

combined_forest_change_2080_ssp126 <- classify(
  refugia_forest_2080_ssp126, cbind(1, 1))  # Start with refugia: value 1
combined_forest_change_2080_ssp126[exposure_forest_2080_ssp126 == 1] <- 2  # Set exposure to value 2
combined_forest_change_2080_ssp126[refugia_forest_2080_ssp126 == 0 & exposure_forest_2080_ssp126 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")

# Step 3: Plot the heatmap
plot(combined_forest_change_2080_ssp126, col = colors, legend = FALSE, main = "Water Refugia and Exposure (2050 SSP126)")


refugia_forest_2080_ssp245 <- binary_forest_map_hist & binary_forest_map_2080_ssp245
plot(refugia_forest_2080_ssp245)
exposure_forest_2080_ssp245 <- binary_forest_map_hist & !binary_forest_map_2080_ssp245
plot(exposure_forest_2080_ssp245)

combined_forest_change_2080_ssp245 <- classify(
  refugia_forest_2080_ssp245, cbind(1, 1))  # Start with refugia: value 1
combined_forest_change_2080_ssp245[exposure_forest_2080_ssp245 == 1] <- 2  # Set exposure to value 2
combined_forest_change_2080_ssp245[refugia_forest_2080_ssp245 == 0 & exposure_forest_2080_ssp245 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")

# Step 3: Plot the heatmap
plot(combined_forest_change_2080_ssp245, col = colors, legend = FALSE, main = "Water Refugia and Exposure (2050 SSP245)")


refugia_forest_2080_ssp585 <- binary_forest_map_hist & binary_forest_map_2080_ssp585
plot(refugia_forest_2080_ssp585)
exposure_forest_2080_ssp585 <- binary_forest_map_hist & !binary_forest_map_2080_ssp585
plot(exposure_forest_2080_ssp585)

combined_forest_change_2080_ssp585 <- classify(
  refugia_forest_2080_ssp585, cbind(1, 1))  # Start with refugia: value 1
combined_forest_change_2080_ssp585[exposure_forest_2080_ssp585 == 1] <- 2  # Set exposure to value 2
combined_forest_change_2080_ssp585[refugia_forest_2080_ssp585 == 0 & exposure_forest_2080_ssp585 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")


# Step 3: Plot the heatmap
plot(combined_forest_change_2080_ssp585, col = colors, legend = FALSE, main = "forest Refugia and Exposure (2050 SSP585)")


writeRaster(combined_forest_change_2020_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/forest/refugia/threshold/combined_forest_refugia_exposure_2020_ssp126_updated_90.tif",
            overwrite = TRUE)

writeRaster(combined_forest_change_2020_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/forest/refugia/threshold/combined_forest_refugia_exposure_2020_ssp245_updated_90.tif",
            overwrite = TRUE)

writeRaster(combined_forest_change_2020_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/forest/refugia/threshold/combined_forest_refugia_exposure_2020_ssp585_updated_90.tif",
            overwrite = TRUE)

writeRaster(combined_forest_change_2050_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/forest/refugia/threshold/combined_forest_refugia_exposure_2050_ssp126_updated_90.tif",
            overwrite = TRUE)

writeRaster(combined_forest_change_2050_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/forest/refugia/threshold/combined_forest_refugia_exposure_2050_ssp245_updated_90.tif",
            overwrite = TRUE)

writeRaster(combined_forest_change_2050_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/forest/refugia/threshold/combined_forest_refugia_exposure_2050_ssp585_updated_90.tif",
            overwrite = TRUE)

writeRaster(combined_forest_change_2080_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/forest/refugia/threshold/combined_forest_refugia_exposure_2080_ssp126_updated_90.tif",
            overwrite = TRUE)


writeRaster(combined_forest_change_2080_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/forest/refugia/threshold/combined_forest_refugia_exposure_2080_ssp245_updated_90.tif",
            overwrite = TRUE)

writeRaster(combined_forest_change_2080_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/forest/refugia/threshold/combined_forest_refugia_exposure_2080_ssp585_updated_90.tif",
            overwrite = TRUE)



# convert heat maps to polygon
combined_forest_change_polygon_2020_ssp126 <- as.polygons(combined_forest_change_2020_ssp126, dissolve = TRUE)
# Save as a shapefile
writeVector(combined_forest_change_polygon_2020_ssp126, "F:/Uillinois_data/analysis/habitat_suitability/RF/forest/refugia/threshold/combined_forest_refugia_exposure_2020_ssp126_updated_90.shp", filetype = "ESRI Shapefile", overwrite = TRUE)

combined_forest_change_polygon_2020_ssp245 <- as.polygons(combined_forest_change_2020_ssp245, dissolve = TRUE)
writeVector(combined_forest_change_polygon_2020_ssp245, "F:/Uillinois_data/analysis/habitat_suitability/RF/forest/refugia/threshold/combined_forest_refugia_exposure_2020_ssp245_updated_90.shp", filetype = "ESRI Shapefile", overwrite = TRUE)
forest
combined_forest_change_polygon_2020_ssp585 <- as.polygons(combined_forest_change_2020_ssp585, dissolve = TRUE)
writeVector(combined_forest_change_polygon_2020_ssp585, "F:/Uillinois_data/analysis/habitat_suitability/RF/forest/refugia/threshold/combined_forest_refugia_exposure_2020_ssp585_updated_90.shp", filetype = "ESRI Shapefile", overwrite = TRUE)


combined_forest_change_polygon_2050_ssp126 <- as.polygons(combined_forest_change_2050_ssp126, dissolve = TRUE)
writeVector(combined_forest_change_polygon_2050_ssp126, "F:/Uillinois_data/analysis/habitat_suitability/RF/forest/refugia/threshold/combined_forest_refugia_exposure_2050_ssp126_updated_90.shp", filetype = "ESRI Shapefile", overwrite = TRUE)

combined_forest_change_polygon_2050_ssp245 <- as.polygons(combined_forest_change_2050_ssp245, dissolve = TRUE)
writeVector(combined_forest_change_polygon_2050_ssp245, "F:/Uillinois_data/analysis/habitat_suitability/RF/forest/refugia/threshold/combined_forest_refugia_exposure_2050_ssp245_updated_90.shp", filetype = "ESRI Shapefile", overwrite = TRUE)

combined_forest_change_polygon_2050_ssp585 <- as.polygons(combined_forest_change_2050_ssp585, dissolve = TRUE)
writeVector(combined_forest_change_polygon_2050_ssp585, "F:/Uillinois_data/analysis/habitat_suitability/RF/forest/refugia/threshold/combined_forest_refugia_exposure_2050_ssp585_updated_90.shp", filetype = "ESRI Shapefile", overwrite = TRUE)


combined_forest_change_polygon_2080_ssp126 <- as.polygons(combined_forest_change_2080_ssp126, dissolve = TRUE)
writeVector(combined_forest_change_polygon_2080_ssp126, "F:/Uillinois_data/analysis/habitat_suitability/RF/forest/refugia/threshold/combined_forest_refugia_exposure_2080_ssp126_updated_90.shp", filetype = "ESRI Shapefile", overwrite = TRUE)

combined_forest_change_polygon_2080_ssp245 <- as.polygons(combined_forest_change_2080_ssp245, dissolve = TRUE)
writeVector(combined_forest_change_polygon_2080_ssp245, "F:/Uillinois_data/analysis/habitat_suitability/RF/forest/refugia/threshold/combined_forest_refugia_exposure_2080_ssp245_updated_90.shp", filetype = "ESRI Shapefile", overwrite = TRUE)

combined_forest_change_polygon_2080_ssp585 <- as.polygons(combined_forest_change_2080_ssp585, dissolve = TRUE)
writeVector(combined_forest_change_polygon_2080_ssp585, "F:/Uillinois_data/analysis/habitat_suitability/RF/forest/refugia/threshold/combined_forest_refugia_exposure_2080_ssp585_updated_90.shp", filetype = "ESRI Shapefile", overwrite = TRUE)



# Combine results into a data frame

# Refugia

cell_area_km2 <- 1  # each pixel is 1 km² due to 1000m x 1000m resolution

forest_refugia_hist_2020_ssp126_area <- global(refugia_forest_2020_ssp126, "sum", na.rm = TRUE)[[1]] * cell_area_km2
forest_refugia_hist_2020_ssp245_area <- global(refugia_forest_2020_ssp245, "sum", na.rm = TRUE)[[1]] * cell_area_km2
forest_refugia_hist_2020_ssp585_area <- global(refugia_forest_2020_ssp585, "sum", na.rm = TRUE)[[1]] * cell_area_km2

forest_refugia_hist_2050_ssp126_area <- global(refugia_forest_2050_ssp126, "sum", na.rm = TRUE)[[1]] * cell_area_km2
forest_refugia_hist_2050_ssp245_area <- global(refugia_forest_2050_ssp245, "sum", na.rm = TRUE)[[1]] * cell_area_km2
forest_refugia_hist_2050_ssp585_area <- global(refugia_forest_2050_ssp585, "sum", na.rm = TRUE)[[1]] * cell_area_km2

forest_refugia_hist_2080_ssp126_area <- global(refugia_forest_2080_ssp126, "sum", na.rm = TRUE)[[1]] * cell_area_km2
forest_refugia_hist_2080_ssp245_area <- global(refugia_forest_2080_ssp245, "sum", na.rm = TRUE)[[1]] * cell_area_km2
forest_refugia_hist_2080_ssp585_area <- global(refugia_forest_2080_ssp585, "sum", na.rm = TRUE)[[1]] * cell_area_km2


forest_refugia_df <- data.frame(
  TimePeriod = c("2020", "2020", "2020",
                 "2050", "2050", "2050",
                 "2080", "2080", "2080"),
  Scenario = c("ssp126", "ssp245", "ssp585",
               "ssp126", "ssp245", "ssp585",
               "ssp126", "ssp245", "ssp585"),
  RefugiaArea_km2 = c(forest_refugia_hist_2020_ssp126_area,
                      forest_refugia_hist_2020_ssp245_area,
                      forest_refugia_hist_2020_ssp585_area,
                      forest_refugia_hist_2050_ssp126_area,
                      forest_refugia_hist_2050_ssp245_area,
                      forest_refugia_hist_2050_ssp585_area,
                      forest_refugia_hist_2080_ssp126_area,
                      forest_refugia_hist_2080_ssp245_area,
                      forest_refugia_hist_2080_ssp585_area)
)

# Write to CSV
write.csv(forest_refugia_df, "F:/Uillinois_data/analysis/habitat_suitability/RF/forest/refugia/threshold/forest_refugia_areas_by_scenario_updated_90.csv", row.names = FALSE)


# Exposure

forest_exposure_hist_2020_ssp126_area <- global(exposure_forest_2020_ssp126, "sum", na.rm = TRUE)[[1]] * cell_area_km2
forest_exposure_hist_2020_ssp245_area <- global(exposure_forest_2020_ssp245, "sum", na.rm = TRUE)[[1]] * cell_area_km2
forest_exposure_hist_2020_ssp585_area <- global(exposure_forest_2020_ssp585, "sum", na.rm = TRUE)[[1]] * cell_area_km2

forest_exposure_hist_2050_ssp126_area <- global(exposure_forest_2050_ssp126, "sum", na.rm = TRUE)[[1]] * cell_area_km2
forest_exposure_hist_2050_ssp245_area <- global(exposure_forest_2050_ssp245, "sum", na.rm = TRUE)[[1]] * cell_area_km2
forest_exposure_hist_2050_ssp585_area <- global(exposure_forest_2050_ssp585, "sum", na.rm = TRUE)[[1]] * cell_area_km2

forest_exposure_hist_2080_ssp126_area <- global(exposure_forest_2080_ssp126, "sum", na.rm = TRUE)[[1]] * cell_area_km2
forest_exposure_hist_2080_ssp245_area <- global(exposure_forest_2080_ssp245, "sum", na.rm = TRUE)[[1]] * cell_area_km2
forest_exposure_hist_2080_ssp585_area <- global(exposure_forest_2080_ssp585, "sum", na.rm = TRUE)[[1]] * cell_area_km2



forest_exposure_df <- data.frame(
  TimePeriod = c("2020", "2020", "2020",
                 "2050", "2050", "2050",
                 "2080", "2080", "2080"),
  Scenario = c("ssp126", "ssp245", "ssp585",
               "ssp126", "ssp245", "ssp585",
               "ssp126", "ssp245", "ssp585"),
  RefugiaArea_km2 = c(forest_exposure_hist_2020_ssp126_area,
                      forest_exposure_hist_2020_ssp245_area,
                      forest_exposure_hist_2020_ssp585_area,
                      forest_exposure_hist_2050_ssp126_area,
                      forest_exposure_hist_2050_ssp245_area,
                      forest_exposure_hist_2050_ssp585_area,
                      forest_exposure_hist_2080_ssp126_area,
                      forest_exposure_hist_2080_ssp245_area,
                      forest_exposure_hist_2080_ssp585_area)
)

# Write to CSV
write.csv(forest_exposure_df, "F:/Uillinois_data/analysis/habitat_suitability/RF/forest/refugia/threshold/forest_exposure_areas_by_scenario_updated_90.csv", row.names = FALSE)

# Count the number of cells with forest (value == 1)
forest_area_km2 <- sum(values(forest) == 1, na.rm = TRUE)

cat("Total forest area (km²):", forest_area_km2, "\n")

forest_refugia <- data.frame(
  Year = c("2020s", "2020s", "2020s", "2050s", "2050s", "2050s", "2080s", "2080s", "2080s"),
  Emission_Scenario = c("ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585"),
  Refugia = c(85.4, 70.7, 71.5, 51, 43.5, 33.8, 52.4, 29.3, 13.7)
)


# Convert Year to an ordered factor for proper sequencing
forest_refugia$Year <- factor(forest_refugia$Year, levels = c("2020s", "2050s", "2080s"))

# Plot the refugia data and customized axis lines
ggplot(forest_refugia, aes(x = Year, y = Refugia, group = Emission_Scenario, color = Emission_Scenario)) +
  geom_line(size = 1.2) +
  geom_point(size = 3) +
  labs(title = "Projected Forest Refugia for the MW CASC Region",
       x = "Time Period",
       y = "Percentage Refugia",
       color = "Emission Scenario") +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank(),  # Remove minor grid lines
    axis.line = element_line(size = 1, color = "black"),  # Bold x and y axis lines
    axis.text = element_text(size = 11),  # Adjust axis text size
    axis.title = element_text(size = 12, face = "bold")  # Bold x and y axis labels
  )


# Repeat for exposure

# Create the data frame
forest_exposure_data <- data.frame(
  Year = c("2020s", "2020s", "2020s", "2050s", "2050s", "2050s", "2080s", "2080s", "2080s"),
  Emission_Scenario = c("ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585"),
  Vulnerability = c(5.7, 15.4, 14.6, 35.1, 42.6, 52.3, 33.8, 56.8, 72.4)
)

# Convert Year to an ordered factor for proper sequencing
forest_exposure_data$Year <- factor(forest_exposure_data$Year, levels = c("2020s", "2050s", "2080s"))

# Plot the vulnerabile areas data
ggplot(forest_exposure_data, aes(x = Year, y = Vulnerability, group = Emission_Scenario, color = Emission_Scenario)) +
  geom_line(size = 1.2) +
  geom_point(size = 3) +
  labs(title = "Projected Forest Exposure Areas for the MW CASC Region",
       x = "Time Period",
       y = "Percentage Exposure",
       color = "Emission Scenario") +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank(),  # Remove minor grid lines
    axis.line = element_line(size = 1, color = "black"),  # Bold x and y axis lines
    axis.text = element_text(size = 11),  # Adjust axis text size
    axis.title = element_text(size = 12, face = "bold")  # Bold x and y axis labels
  )


# Do for 90th percentile

# Count the number of cells with forest (value == 1)
forest_area_km2 <- sum(values(forest) == 1, na.rm = TRUE)

cat("Total forest area (km²):", forest_area_km2, "\n")

forest_refugia <- data.frame(
  Year = c("2020s", "2020s", "2020s", "2050s", "2050s", "2050s", "2080s", "2080s", "2080s"),
  Emission_Scenario = c("ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585"),
  Refugia = c(57.5, 45.8, 46.4, 21.4, 14.9, 10.1, 22.4, 8, 2.6)
)


# Convert Year to an ordered factor for proper sequencing
forest_refugia$Year <- factor(forest_refugia$Year, levels = c("2020s", "2050s", "2080s"))

# Plot the refugia data and customized axis lines
ggplot(forest_refugia, aes(x = Year, y = Refugia, group = Emission_Scenario, color = Emission_Scenario)) +
  geom_line(size = 1.2) +
  geom_point(size = 3) +
  labs(title = "Projected Forest Refugia for the MW CASC Region",
       x = "Time Period",
       y = "Percentage Refugia",
       color = "Emission Scenario") +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank(),  # Remove minor grid lines
    axis.line = element_line(size = 1, color = "black"),  # Bold x and y axis lines
    axis.text = element_text(size = 11),  # Adjust axis text size
    axis.title = element_text(size = 12, face = "bold")  # Bold x and y axis labels
  )


# Repeat for exposure

# Create the data frame
forest_exposure_data <- data.frame(
  Year = c("2020s", "2020s", "2020s", "2050s", "2050s", "2050s", "2080s", "2080s", "2080s"),
  Emission_Scenario = c("ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585"),
  Vulnerability = c(6.8, 18.5, 19, 43, 49.4, 54.2, 42, 56.4, 61.7)
)

# Convert Year to an ordered factor for proper sequencing
forest_exposure_data$Year <- factor(forest_exposure_data$Year, levels = c("2020s", "2050s", "2080s"))

# Plot the vulnerabile areas data
ggplot(forest_exposure_data, aes(x = Year, y = Vulnerability, group = Emission_Scenario, color = Emission_Scenario)) +
  geom_line(size = 1.2) +
  geom_point(size = 3) +
  labs(title = "Projected Forest Exposure Areas for the MW CASC Region",
       x = "Time Period",
       y = "Percentage Exposure",
       color = "Emission Scenario") +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank(),  # Remove minor grid lines
    axis.line = element_line(size = 1, color = "black"),  # Bold x and y axis lines
    axis.text = element_text(size = 11),  # Adjust axis text size
    axis.title = element_text(size = 12, face = "bold")  # Bold x and y axis labels
  )



# Do for 70th percentile

# Count the number of cells with forest (value == 1)
forest_area_km2 <- sum(values(forest) == 1, na.rm = TRUE)

cat("Total forest area (km²):", forest_area_km2, "\n")

forest_refugia <- data.frame(
  Year = c("2020s", "2020s", "2020s", "2050s", "2050s", "2050s", "2080s", "2080s", "2080s"),
  Emission_Scenario = c("ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585"),
  Refugia = c(91.5, 83.4, 83.9, 68, 62.6, 52.6, 68.6, 49.5, 28.7)
)


# Convert Year to an ordered factor for proper sequencing
forest_refugia$Year <- factor(forest_refugia$Year, levels = c("2020s", "2050s", "2080s"))

# Plot the refugia data and customized axis lines
ggplot(forest_refugia, aes(x = Year, y = Refugia, group = Emission_Scenario, color = Emission_Scenario)) +
  geom_line(size = 1.2) +
  geom_point(size = 3) +
  labs(title = "Projected Forest Refugia for the MW CASC Region",
       x = "Time Period",
       y = "Percentage Refugia",
       color = "Emission Scenario") +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank(),  # Remove minor grid lines
    axis.line = element_line(size = 1, color = "black"),  # Bold x and y axis lines
    axis.text = element_text(size = 11),  # Adjust axis text size
    axis.title = element_text(size = 12, face = "bold")  # Bold x and y axis labels
  )


# Repeat for exposure

# Create the data frame
forest_exposure_data <- data.frame(
  Year = c("2020s", "2020s", "2020s", "2050s", "2050s", "2050s", "2080s", "2080s", "2080s"),
  Emission_Scenario = c("ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585"),
  Vulnerability = c(5.4, 13.5, 13, 29, 34.3, 44.3, 28.3, 47.4, 68.2)
)

# Convert Year to an ordered factor for proper sequencing
forest_exposure_data$Year <- factor(forest_exposure_data$Year, levels = c("2020s", "2050s", "2080s"))

# Plot the vulnerabile areas data
ggplot(forest_exposure_data, aes(x = Year, y = Vulnerability, group = Emission_Scenario, color = Emission_Scenario)) +
  geom_line(size = 1.2) +
  geom_point(size = 3) +
  labs(title = "Projected Forest Exposure Areas for the MW CASC Region",
       x = "Time Period",
       y = "Percentage Exposure",
       color = "Emission Scenario") +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank(),  # Remove minor grid lines
    axis.line = element_line(size = 1, color = "black"),  # Bold x and y axis lines
    axis.text = element_text(size = 11),  # Adjust axis text size
    axis.title = element_text(size = 12, face = "bold")  # Bold x and y axis labels
  )


# Do for 50th percentile

# Count the number of cells with forest (value == 1)
forest_area_km2 <- sum(values(binary_forest_map_hist) == 1, na.rm = TRUE)

cat("Total forest area (km²):", forest_area_km2, "\n")

forest_refugia <- data.frame(
  Year = c("2020s", "2020s", "2020s", "2050s", "2050s", "2050s", "2080s", "2080s", "2080s"),
  Emission_Scenario = c("ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585"),
  Refugia = c(95.7, 92.1, 92.2, 85.1, 82.7, 78.8, 84.6, 77.3, 68.1)
)


# Convert Year to an ordered factor for proper sequencing
forest_refugia$Year <- factor(forest_refugia$Year, levels = c("2020s", "2050s", "2080s"))

# Plot the refugia data and customized axis lines
ggplot(forest_refugia, aes(x = Year, y = Refugia, group = Emission_Scenario, color = Emission_Scenario)) +
  geom_line(size = 1.2) +
  geom_point(size = 3) +
  labs(title = "Projected Forest Refugia for the MW CASC Region",
       x = "Time Period",
       y = "Percentage Refugia",
       color = "Emission Scenario") +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank(),  # Remove minor grid lines
    axis.line = element_line(size = 1, color = "black"),  # Bold x and y axis lines
    axis.text = element_text(size = 11),  # Adjust axis text size
    axis.title = element_text(size = 12, face = "bold")  # Bold x and y axis labels
  )


# Repeat for exposure

# Create the data frame
forest_exposure_data <- data.frame(
  Year = c("2020s", "2020s", "2020s", "2050s", "2050s", "2050s", "2080s", "2080s", "2080s"),
  Emission_Scenario = c("ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585"),
  Vulnerability = c(4.3, 7.9, 7.8, 14.9, 17.3, 21.2, 15.4, 22.7, 40)
)

# Convert Year to an ordered factor for proper sequencing
forest_exposure_data$Year <- factor(forest_exposure_data$Year, levels = c("2020s", "2050s", "2080s"))

# Plot the vulnerabile areas data
ggplot(forest_exposure_data, aes(x = Year, y = Vulnerability, group = Emission_Scenario, color = Emission_Scenario)) +
  geom_line(size = 1.2) +
  geom_point(size = 3) +
  labs(title = "Projected Forest Exposure Areas for the MW CASC Region",
       x = "Time Period",
       y = "Percentage Exposure",
       color = "Emission Scenario") +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank(),  # Remove minor grid lines
    axis.line = element_line(size = 1, color = "black"),  # Bold x and y axis lines
    axis.text = element_text(size = 11),  # Adjust axis text size
    axis.title = element_text(size = 12, face = "bold")  # Bold x and y axis labels
  )



# ----------------------------------------------------------------



# Test RandomForest model for cropland

# resample forest to align with predictors
cropland_r <- resample(cropland, EMT, method = "near")
r_stack <- c(EMT, EXT, PPT_at, PPT_sm, PPT_wt, elevation, slope, cropland_r)
names(r_stack) <- c("EMT", "EXT", "PPT_at", "PPT_sm",
                    "PPT_wt", "elevation", "slope", "cropland")

# prepare data for modeling

# Convert to data frame
df <- as.data.frame(r_stack, xy = TRUE, na.rm = TRUE)
df$cropland <- ifelse(df$cropland >= 1, 1, 0)


# --------------------------------------------
# Step 2: Sample 10k presence & background points
# --------------------------------------------
set.seed(123)
presence_df <- df[df$cropland == 1, c("x", "y")]
background_df <- df[df$cropland == 0, c("x", "y")]

n_presence <- min(100000, nrow(presence_df))
n_background <- min(100000, nrow(background_df))

presence_points <- presence_df[sample(1:nrow(presence_df), n_presence), ]
background_points <- background_df[sample(1:nrow(background_df), n_background), ]

# --------------------------------------------
# Step 3: Train/test split (80/20)
# --------------------------------------------
train_idx_pres <- sample(1:n_presence, size = 0.8 * n_presence)
train_idx_back <- sample(1:n_background, size = 0.8 * n_background)

train_pres <- presence_points[train_idx_pres, ]
test_pres <- presence_points[-train_idx_pres, ]

train_back <- background_points[train_idx_back, ]
test_back <- background_points[-train_idx_back, ]


# --------------------------------------------
# Step 3: Combine and split into train/test (80/20)
# --------------------------------------------
presence_points$label <- 1
background_points$label <- 0

all_data <- rbind(presence_points, background_points)
train_idx <- sample(1:nrow(all_data), size = 0.8 * nrow(all_data))

train_data <- all_data[train_idx, ]
test_data <- all_data[-train_idx, ]


# Extract predictor values
predictor_values <- extract(predictors_stack, train_data[, c("x", "y")])

# Combine and remove NA
model_data <- cbind(label = train_data$label, predictor_values)
model_data <- na.omit(model_data)

# Now convert to data frame
model_data <- as.data.frame(model_data)

# Now safely convert label to a factor
model_data$label <- factor(model_data$label, levels = c(0, 1))


# Train RF model
rf_model <- randomForest(
  label ~ ., 
  data = model_data[, -which(names(model_data) == "ID")],
  ntree = 50,
  importance = TRUE
)

# Get variable importance (Mean Decrease in Gini)
var_imp <- importance(rf_model)

# Extract Gini importance and convert to data frame
var_imp_df <- data.frame(
  Variable = rownames(var_imp),
  Gini = var_imp[, "MeanDecreaseGini"]
)

# Calculate percentage contribution
var_imp_df$PercentContribution <- 100 * var_imp_df$Gini / sum(var_imp_df$Gini)

# Round for display
var_imp_df$PercentContribution <- round(var_imp_df$PercentContribution, 2)

# Sort descending
var_imp_df <- var_imp_df[order(-var_imp_df$PercentContribution), ]

# View
print(var_imp_df)

rf_pred_prob <- terra::predict(predictors_stack, rf_model, type = "prob", index = 2)
plot(rf_pred_prob, main = "Predicted Suitability (RF)")

rf_pred_prob_2020_ssp126 <- terra::predict(predictors_stack_2020_ssp126, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2020_ssp126, main = "Predicted Suitability (RF)")

rf_pred_prob_2020_ssp245 <- terra::predict(predictors_stack_2020_ssp245, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2020_ssp245, main = "Predicted Suitability (RF)")

rf_pred_prob_2020_ssp585 <- terra::predict(predictors_stack_2020_ssp585, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2020_ssp585, main = "Predicted Suitability (RF)")

rf_pred_prob_2050_ssp126 <- terra::predict(predictors_stack_2050_ssp126, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2050_ssp126, main = "Predicted Suitability (RF)")

rf_pred_prob_2050_ssp245 <- terra::predict(predictors_stack_2050_ssp245, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2050_ssp245, main = "Predicted Suitability (RF)")

rf_pred_prob_2050_ssp585 <- terra::predict(predictors_stack_2050_ssp585, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2050_ssp585, main = "Predicted Suitability (RF)")

rf_pred_prob_2080_ssp126 <- terra::predict(predictors_stack_2080_ssp126, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2080_ssp126, main = "Predicted Suitability (RF)")

rf_pred_prob_2080_ssp245 <- terra::predict(predictors_stack_2080_ssp245, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2080_ssp245, main = "Predicted Suitability (RF)")

rf_pred_prob_2080_ssp585 <- terra::predict(predictors_stack_2080_ssp585, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2080_ssp585, main = "Predicted Suitability (RF)")


writeRaster(rf_pred_prob,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/cropland/suitability/cropland_suitability_hist_updated.tif",
            overwrite = TRUE)

writeRaster(rf_pred_prob_2020_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/cropland/suitability/cropland_suitability_2020_ssp126_updated.tif",
            overwrite = TRUE)

writeRaster(rf_pred_prob_2020_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/cropland/suitability/cropland_suitability_2020_ssp245_updated.tif",
            overwrite = TRUE)

writeRaster(rf_pred_prob_2020_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/cropland/suitability/cropland_suitability_2020_ssp585_updated.tif",
            overwrite = TRUE)

writeRaster(rf_pred_prob_2050_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/cropland/suitability/cropland_suitability_2050_ssp126_updated.tif",
            overwrite = TRUE)

writeRaster(rf_pred_prob_2050_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/cropland/suitability/cropland_suitability_2050_ssp245_updated.tif",
            overwrite = TRUE)

writeRaster(rf_pred_prob_2050_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/cropland/suitability/cropland_suitability_2050_ssp585_updated.tif",
            overwrite = TRUE)


writeRaster(rf_pred_prob_2080_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/cropland/suitability/cropland_suitability_2080_ssp126.tif",
            overwrite = TRUE)

writeRaster(rf_pred_prob_2080_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/cropland/suitability/cropland_suitability_2080_ssp245_updated.tif",
            overwrite = TRUE)

writeRaster(rf_pred_prob_2080_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/cropland/suitability/cropland_suitability_2080_ssp585_updated.tif",
            overwrite = TRUE)



# --------------------------------------------
# Step 7: Model Evaluation (AUC, TSS)
# --------------------------------------------

# Extract predictors for test data locations
test_predictors <- extract(predictors_stack, test_data[, c("x", "y")])

# Combine label and predictor values
test_model_data <- cbind(label = test_data$label, test_predictors)

# Remove rows with NA values
test_model_data <- na.omit(as.data.frame(test_model_data))

# Predict probability of presence (class 1)
test_pred <- predict(rf_model, newdata = test_model_data, type = "prob")[, 2]

# Predict probabilities for test data (class "1" = presence)
test_pred <- predict(rf_model, newdata = test_data, type = "prob")[, 2]

obs_labels <- as.numeric(as.character(test_model_data$label))  # convert factor to numeric if needed

# Convert obs_labels to factor with levels 0 and 1
obs_labels_factor <- factor(obs_labels, levels = c(0,1))

# Compute ROC object explicitly
roc_obj <- roc(response = obs_labels_factor, predictor = test_pred, quiet = TRUE)
str(roc_obj)
summary(roc_obj)

auc_value <- as.numeric(roc_obj$auc)
cat("AUC =", round(auc_value, 3), "\n")

auc_value_manual <- roc_obj$auc
print(auc_value_manual)


# Get sensitivities, specificities, and thresholds from ROC object
sens <- roc_obj$sensitivities
spec <- roc_obj$specificities
thresh <- roc_obj$thresholds

# Compute TSS = sensitivity + specificity - 1
tss_vals <- sens + spec - 1

# Identify the threshold that gives the maximum TSS
max_tss_index <- which.max(tss_vals)
optimal_threshold <- thresh[max_tss_index]
max_tss <- tss_vals[max_tss_index]

max_tss <- 0.50
# Output results
cat("Optimal threshold (Max Sens + Spec):", round(optimal_threshold, 3), "\n")
cat("TSS at optimal threshold:", round(max_tss, 3), "\n")

# Create binary presence–absence map
binary_cropland_map_hist <- rf_pred_prob >= max_tss
binary_cropland_map_2020_ssp126 <- rf_pred_prob_2020_ssp126 >= max_tss
binary_cropland_map_2020_ssp245 <- rf_pred_prob_2020_ssp245 >= max_tss
binary_cropland_map_2020_ssp585 <- rf_pred_prob_2020_ssp585 >= max_tss

binary_cropland_map_2050_ssp126 <- rf_pred_prob_2050_ssp126 >= max_tss
binary_cropland_map_2050_ssp245 <- rf_pred_prob_2050_ssp245 >= max_tss
binary_cropland_map_2050_ssp585 <- rf_pred_prob_2050_ssp585 >= max_tss

binary_cropland_map_2080_ssp126 <- rf_pred_prob_2080_ssp126 >= max_tss
binary_cropland_map_2080_ssp245 <- rf_pred_prob_2080_ssp245 >= max_tss
binary_cropland_map_2080_ssp585 <- rf_pred_prob_2080_ssp585 >= max_tss

plot(binary_cropland_map_hist)
plot(binary_cropland_map_2020_ssp126)
plot(binary_cropland_map_2020_ssp245)
plot(binary_cropland_map_2020_ssp585)

plot(binary_cropland_map_2050_ssp126)
plot(binary_cropland_map_2050_ssp245)
plot(binary_cropland_map_2050_ssp585)

plot(binary_cropland_map_2080_ssp126)
plot(binary_cropland_map_2080_ssp245)
plot(binary_cropland_map_2080_ssp585)

writeRaster(binary_cropland_map_hist,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/cropland/suitability/threshold/binary_cropland_map_hist_updated_50.tif",
            overwrite = TRUE)

writeRaster(binary_cropland_map_2020_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/cropland/suitability/threshold/binary_cropland_map_2020_ssp126_updated_50.tif",
            overwrite = TRUE)

writeRaster(binary_cropland_map_2020_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/cropland/suitability/threshold/binary_cropland_map_2020_ssp245_updated_50.tif",
            overwrite = TRUE)

writeRaster(binary_cropland_map_2020_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/cropland/suitability/threshold/binary_cropland_map_2020_ssp585_updated_50.tif",
            overwrite = TRUE)

writeRaster(binary_cropland_map_2050_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/cropland/suitability/threshold/binary_cropland_map_2050_ssp126_updated_50.tif",
            overwrite = TRUE)

writeRaster(binary_cropland_map_2050_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/cropland/suitability/threshold/binary_cropland_map_2050_ssp245_updated_50.tif",
            overwrite = TRUE)

writeRaster(binary_cropland_map_2050_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/cropland/suitability/threshold/binary_cropland_map_2050_ssp585_updated_50.tif",
            overwrite = TRUE)


writeRaster(binary_cropland_map_2080_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/cropland/suitability/threshold/binary_cropland_map_2080_ssp126_updated_50.tif",
            overwrite = TRUE)

writeRaster(binary_cropland_map_2080_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/cropland/suitability/threshold/binary_cropland_map_2080_ssp245_updated_50.tif",
            overwrite = TRUE)

writeRaster(binary_cropland_map_2080_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/cropland/suitability/threshold/binary_cropland_map_2080_ssp585_updated_50.tif",
            overwrite = TRUE)


# cropland stable-loss, or refugia

refugia_cropland_2020_ssp126 <- binary_cropland_map_hist & binary_cropland_map_2020_ssp126
plot(refugia_cropland_2020_ssp126)
exposure_cropland_2020_ssp126 <- binary_cropland_map_hist & !binary_cropland_map_2020_ssp126
plot(exposure_cropland_2020_ssp126)

combined_cropland_change_2020_ssp126 <- classify(
  refugia_cropland_2020_ssp126, cbind(1, 1))  # Start with refugia: value 1
combined_cropland_change_2020_ssp126[exposure_cropland_2020_ssp126 == 1] <- 2  # Set exposure to value 2
combined_cropland_change_2020_ssp126[refugia_cropland_2020_ssp126 == 0 & exposure_cropland_2020_ssp126 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")

# Step 3: Plot the heatmap
plot(combined_cropland_change_2020_ssp126, col = colors, legend = FALSE, main = "forest Refugia and Exposure (2020 SSP126)")


refugia_cropland_2020_ssp245 <- binary_cropland_map_hist & binary_cropland_map_2020_ssp245
plot(refugia_cropland_2020_ssp245)
exposure_cropland_2020_ssp245 <- binary_cropland_map_hist & !binary_cropland_map_2020_ssp245
plot(exposure_cropland_2020_ssp245)

combined_cropland_change_2020_ssp245 <- classify(
  refugia_cropland_2020_ssp245, cbind(1, 1))  # Start with refugia: value 1
combined_cropland_change_2020_ssp245[exposure_cropland_2020_ssp245 == 1] <- 2  # Set exposure to value 2
combined_cropland_change_2020_ssp245[refugia_cropland_2020_ssp245 == 0 & exposure_cropland_2020_ssp245 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")

# Step 3: Plot the heatmap
plot(combined_cropland_change_2020_ssp245, col = colors, legend = FALSE, main = "Water Refugia and Exposure (2020 SSP245)")


refugia_cropland_2020_ssp585 <- binary_cropland_map_hist & binary_cropland_map_2020_ssp585
plot(refugia_cropland_2020_ssp585)
exposure_cropland_2020_ssp585 <- binary_cropland_map_hist & !binary_cropland_map_2020_ssp585
plot(exposure_cropland_2020_ssp585)

combined_cropland_change_2020_ssp585 <- classify(
  refugia_cropland_2020_ssp585, cbind(1, 1))  # Start with refugia: value 1
combined_cropland_change_2020_ssp585[exposure_cropland_2020_ssp585 == 1] <- 2  # Set exposure to value 2
combined_cropland_change_2020_ssp585[refugia_cropland_2020_ssp585 == 0 & exposure_cropland_2020_ssp585 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")

# Step 3: Plot the heatmap
plot(combined_cropland_change_2020_ssp585, col = colors, legend = FALSE, main = "Water Refugia and Exposure (2020 SSP245)")



refugia_cropland_2050_ssp126 <- binary_cropland_map_hist & binary_cropland_map_2050_ssp126
plot(refugia_cropland_2050_ssp126)
exposure_cropland_2050_ssp126 <- binary_cropland_map_hist & !binary_cropland_map_2050_ssp126
plot(exposure_cropland_2050_ssp126)

combined_cropland_change_2050_ssp126 <- classify(
  refugia_cropland_2050_ssp126, cbind(1, 1))  # Start with refugia: value 1
combined_cropland_change_2050_ssp126[exposure_cropland_2050_ssp126 == 1] <- 2  # Set exposure to value 2
combined_cropland_change_2050_ssp126[refugia_cropland_2050_ssp126 == 0 & exposure_cropland_2050_ssp126 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")

# Step 3: Plot the heatmap
plot(combined_cropland_change_2050_ssp126, col = colors, legend = FALSE, main = "Water Refugia and Exposure (2050 SSP126)")


refugia_cropland_2050_ssp245 <- binary_cropland_map_hist & binary_cropland_map_2050_ssp245
plot(refugia_cropland_2050_ssp245)
exposure_cropland_2050_ssp245 <- binary_cropland_map_hist & !binary_cropland_map_2050_ssp245
plot(exposure_cropland_2050_ssp245)

combined_cropland_change_2050_ssp245 <- classify(
  refugia_cropland_2050_ssp245, cbind(1, 1))  # Start with refugia: value 1
combined_cropland_change_2050_ssp245[exposure_cropland_2050_ssp245 == 1] <- 2  # Set exposure to value 2
combined_cropland_change_2050_ssp245[refugia_cropland_2050_ssp245 == 0 & exposure_cropland_2050_ssp245 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")

# Step 3: Plot the heatmap
plot(combined_cropland_change_2050_ssp245, col = colors, legend = FALSE, main = "Water Refugia and Exposure (2050 SSP245)")


refugia_cropland_2050_ssp585 <- binary_cropland_map_hist & binary_cropland_map_2050_ssp585
plot(refugia_cropland_2050_ssp585)
exposure_cropland_2050_ssp585 <- binary_cropland_map_hist & !binary_cropland_map_2050_ssp585
plot(exposure_cropland_2050_ssp585)

combined_cropland_change_2050_ssp585 <- classify(
  refugia_cropland_2050_ssp585, cbind(1, 1))  # Start with refugia: value 1
combined_cropland_change_2050_ssp585[exposure_cropland_2050_ssp585 == 1] <- 2  # Set exposure to value 2
combined_cropland_change_2050_ssp585[refugia_cropland_2050_ssp585 == 0 & exposure_cropland_2050_ssp585 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")

# Step 3: Plot the heatmap
plot(combined_cropland_change_2050_ssp585, col = colors, legend = FALSE, main = "Water Refugia and Exposure (2050 SSP585)")


refugia_cropland_2080_ssp126 <- binary_cropland_map_hist & binary_cropland_map_2080_ssp126
plot(refugia_cropland_2080_ssp126)
exposure_cropland_2080_ssp126 <- binary_cropland_map_hist & !binary_cropland_map_2080_ssp126
plot(exposure_cropland_2080_ssp126)

combined_cropland_change_2080_ssp126 <- classify(
  refugia_cropland_2080_ssp126, cbind(1, 1))  # Start with refugia: value 1
combined_cropland_change_2080_ssp126[exposure_cropland_2080_ssp126 == 1] <- 2  # Set exposure to value 2
combined_cropland_change_2080_ssp126[refugia_cropland_2080_ssp126 == 0 & exposure_cropland_2080_ssp126 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")

# Step 3: Plot the heatmap
plot(combined_cropland_change_2080_ssp126, col = colors, legend = FALSE, main = "Water Refugia and Exposure (2050 SSP126)")


refugia_cropland_2080_ssp245 <- binary_cropland_map_hist & binary_cropland_map_2080_ssp245
plot(refugia_cropland_2080_ssp245)
exposure_cropland_2080_ssp245 <- binary_cropland_map_hist & !binary_cropland_map_2080_ssp245
plot(exposure_cropland_2080_ssp245)

combined_cropland_change_2080_ssp245 <- classify(
  refugia_cropland_2080_ssp245, cbind(1, 1))  # Start with refugia: value 1
combined_cropland_change_2080_ssp245[exposure_cropland_2080_ssp245 == 1] <- 2  # Set exposure to value 2
combined_cropland_change_2080_ssp245[refugia_cropland_2080_ssp245 == 0 & exposure_cropland_2080_ssp245 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")

# Step 3: Plot the heatmap
plot(combined_cropland_change_2080_ssp245, col = colors, legend = FALSE, main = "Water Refugia and Exposure (2050 SSP245)")


refugia_cropland_2080_ssp585 <- binary_cropland_map_hist & binary_cropland_map_2080_ssp585
plot(refugia_cropland_2080_ssp585)
exposure_cropland_2080_ssp585 <- binary_cropland_map_hist & !binary_cropland_map_2080_ssp585
plot(exposure_cropland_2080_ssp585)

combined_cropland_change_2080_ssp585 <- classify(
  refugia_cropland_2080_ssp585, cbind(1, 1))  # Start with refugia: value 1
combined_cropland_change_2080_ssp585[exposure_cropland_2080_ssp585 == 1] <- 2  # Set exposure to value 2
combined_cropland_change_2080_ssp585[refugia_cropland_2080_ssp585 == 0 & exposure_cropland_2080_ssp585 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")


# Step 3: Plot the heatmap
plot(combined_cropland_change_2080_ssp585, col = colors, legend = FALSE, main = "cropland Refugia and Exposure (2050 SSP585)")


writeRaster(combined_cropland_change_2020_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/cropland/refugia/threshold/combined_cropland_refugia_exposure_2020_ssp126_updated_50.tif",
            overwrite = TRUE)

writeRaster(combined_cropland_change_2020_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/cropland/refugia/threshold/combined_cropland_refugia_exposure_2020_ssp245_updated_50.tif",
            overwrite = TRUE)

writeRaster(combined_cropland_change_2020_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/cropland/refugia/threshold/combined_cropland_refugia_exposure_2020_ssp585_updated_50.tif",
            overwrite = TRUE)

writeRaster(combined_cropland_change_2050_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/cropland/refugia/threshold/combined_cropland_refugia_exposure_2050_ssp126_updated_50.tif",
            overwrite = TRUE)

writeRaster(combined_cropland_change_2050_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/cropland/refugia/threshold/combined_cropland_refugia_exposure_2050_ssp245_updated_50.tif",
            overwrite = TRUE)

writeRaster(combined_cropland_change_2050_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/cropland/refugia/threshold/combined_cropland_refugia_exposure_2050_ssp585_updated_50.tif",
            overwrite = TRUE)

writeRaster(combined_cropland_change_2080_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/cropland/refugia/threshold/combined_cropland_refugia_exposure_2080_ssp126_updated_50.tif",
            overwrite = TRUE)


writeRaster(combined_cropland_change_2080_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/cropland/refugia/threshold/combined_cropland_refugia_exposure_2080_ssp245_updated_50.tif",
            overwrite = TRUE)

writeRaster(combined_cropland_change_2080_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/cropland/refugia/threshold/combined_cropland_refugia_exposure_2080_ssp585_updated_50.tif",
            overwrite = TRUE)



# convert heat maps to polygon
combined_cropland_change_polygon_2020_ssp126 <- as.polygons(combined_cropland_change_2020_ssp126, dissolve = TRUE)
# Save as a shapefile
writeVector(combined_cropland_change_polygon_2020_ssp126, "F:/Uillinois_data/analysis/habitat_suitability/RF/cropland/refugia/threshold/combined_cropland_refugia_exposure_2020_ssp126_updated_50.shp", filetype = "ESRI Shapefile", overwrite = TRUE)

combined_cropland_change_polygon_2020_ssp245 <- as.polygons(combined_cropland_change_2020_ssp245, dissolve = TRUE)
writeVector(combined_cropland_change_polygon_2020_ssp245, "F:/Uillinois_data/analysis/habitat_suitability/RF/cropland/refugia/threshold/combined_cropland_refugia_exposure_2020_ssp245_updated_50.shp", filetype = "ESRI Shapefile", overwrite = TRUE)
cropland
combined_cropland_change_polygon_2020_ssp585 <- as.polygons(combined_cropland_change_2020_ssp585, dissolve = TRUE)
writeVector(combined_cropland_change_polygon_2020_ssp585, "F:/Uillinois_data/analysis/habitat_suitability/RF/cropland/refugia/threshold/combined_cropland_refugia_exposure_2020_ssp585_updated_50.shp", filetype = "ESRI Shapefile", overwrite = TRUE)


combined_cropland_change_polygon_2050_ssp126 <- as.polygons(combined_cropland_change_2050_ssp126, dissolve = TRUE)
writeVector(combined_cropland_change_polygon_2050_ssp126, "F:/Uillinois_data/analysis/habitat_suitability/RF/cropland/refugia/threshold/combined_cropland_refugia_exposure_2050_ssp126_updated_50.shp", filetype = "ESRI Shapefile", overwrite = TRUE)

combined_cropland_change_polygon_2050_ssp245 <- as.polygons(combined_cropland_change_2050_ssp245, dissolve = TRUE)
writeVector(combined_cropland_change_polygon_2050_ssp245, "F:/Uillinois_data/analysis/habitat_suitability/RF/cropland/refugia/threshold/combined_cropland_refugia_exposure_2050_ssp245_updated_50.shp", filetype = "ESRI Shapefile", overwrite = TRUE)

combined_cropland_change_polygon_2050_ssp585 <- as.polygons(combined_cropland_change_2050_ssp585, dissolve = TRUE)
writeVector(combined_cropland_change_polygon_2050_ssp585, "F:/Uillinois_data/analysis/habitat_suitability/RF/cropland/refugia/threshold/combined_cropland_refugia_exposure_2050_ssp585_updated_50.shp", filetype = "ESRI Shapefile", overwrite = TRUE)


combined_cropland_change_polygon_2080_ssp126 <- as.polygons(combined_cropland_change_2080_ssp126, dissolve = TRUE)
writeVector(combined_cropland_change_polygon_2080_ssp126, "F:/Uillinois_data/analysis/habitat_suitability/RF/cropland/refugia/threshold/combined_cropland_refugia_exposure_2080_ssp126_updated_50.shp", filetype = "ESRI Shapefile", overwrite = TRUE)

combined_cropland_change_polygon_2080_ssp245 <- as.polygons(combined_cropland_change_2080_ssp245, dissolve = TRUE)
writeVector(combined_cropland_change_polygon_2080_ssp245, "F:/Uillinois_data/analysis/habitat_suitability/RF/cropland/refugia/threshold/combined_cropland_refugia_exposure_2080_ssp245_updated_50.shp", filetype = "ESRI Shapefile", overwrite = TRUE)

combined_cropland_change_polygon_2080_ssp585 <- as.polygons(combined_cropland_change_2080_ssp585, dissolve = TRUE)
writeVector(combined_cropland_change_polygon_2080_ssp585, "F:/Uillinois_data/analysis/habitat_suitability/RF/cropland/refugia/threshold/combined_cropland_refugia_exposure_2080_ssp585_updated_50.shp", filetype = "ESRI Shapefile", overwrite = TRUE)



# Combine results into a data frame

# Refugia

cell_area_km2 <- 1  # each pixel is 1 km² due to 1000m x 1000m resolution

cropland_refugia_hist_2020_ssp126_area <- global(refugia_cropland_2020_ssp126, "sum", na.rm = TRUE)[[1]] * cell_area_km2
cropland_refugia_hist_2020_ssp245_area <- global(refugia_cropland_2020_ssp245, "sum", na.rm = TRUE)[[1]] * cell_area_km2
cropland_refugia_hist_2020_ssp585_area <- global(refugia_cropland_2020_ssp585, "sum", na.rm = TRUE)[[1]] * cell_area_km2

cropland_refugia_hist_2050_ssp126_area <- global(refugia_cropland_2050_ssp126, "sum", na.rm = TRUE)[[1]] * cell_area_km2
cropland_refugia_hist_2050_ssp245_area <- global(refugia_cropland_2050_ssp245, "sum", na.rm = TRUE)[[1]] * cell_area_km2
cropland_refugia_hist_2050_ssp585_area <- global(refugia_cropland_2050_ssp585, "sum", na.rm = TRUE)[[1]] * cell_area_km2

cropland_refugia_hist_2080_ssp126_area <- global(refugia_cropland_2080_ssp126, "sum", na.rm = TRUE)[[1]] * cell_area_km2
cropland_refugia_hist_2080_ssp245_area <- global(refugia_cropland_2080_ssp245, "sum", na.rm = TRUE)[[1]] * cell_area_km2
cropland_refugia_hist_2080_ssp585_area <- global(refugia_cropland_2080_ssp585, "sum", na.rm = TRUE)[[1]] * cell_area_km2


cropland_refugia_df <- data.frame(
  TimePeriod = c("2020", "2020", "2020",
                 "2050", "2050", "2050",
                 "2080", "2080", "2080"),
  Scenario = c("ssp126", "ssp245", "ssp585",
               "ssp126", "ssp245", "ssp585",
               "ssp126", "ssp245", "ssp585"),
  RefugiaArea_km2 = c(cropland_refugia_hist_2020_ssp126_area,
                      cropland_refugia_hist_2020_ssp245_area,
                      cropland_refugia_hist_2020_ssp585_area,
                      cropland_refugia_hist_2050_ssp126_area,
                      cropland_refugia_hist_2050_ssp245_area,
                      cropland_refugia_hist_2050_ssp585_area,
                      cropland_refugia_hist_2080_ssp126_area,
                      cropland_refugia_hist_2080_ssp245_area,
                      cropland_refugia_hist_2080_ssp585_area)
)

# Write to CSV
write.csv(cropland_refugia_df, "F:/Uillinois_data/analysis/habitat_suitability/RF/cropland/refugia/threshold/cropland_refugia_areas_by_scenario_updated_50.csv", row.names = FALSE)


# Exposure

cropland_exposure_hist_2020_ssp126_area <- global(exposure_cropland_2020_ssp126, "sum", na.rm = TRUE)[[1]] * cell_area_km2
cropland_exposure_hist_2020_ssp245_area <- global(exposure_cropland_2020_ssp245, "sum", na.rm = TRUE)[[1]] * cell_area_km2
cropland_exposure_hist_2020_ssp585_area <- global(exposure_cropland_2020_ssp585, "sum", na.rm = TRUE)[[1]] * cell_area_km2

cropland_exposure_hist_2050_ssp126_area <- global(exposure_cropland_2050_ssp126, "sum", na.rm = TRUE)[[1]] * cell_area_km2
cropland_exposure_hist_2050_ssp245_area <- global(exposure_cropland_2050_ssp245, "sum", na.rm = TRUE)[[1]] * cell_area_km2
cropland_exposure_hist_2050_ssp585_area <- global(exposure_cropland_2050_ssp585, "sum", na.rm = TRUE)[[1]] * cell_area_km2

cropland_exposure_hist_2080_ssp126_area <- global(exposure_cropland_2080_ssp126, "sum", na.rm = TRUE)[[1]] * cell_area_km2
cropland_exposure_hist_2080_ssp245_area <- global(exposure_cropland_2080_ssp245, "sum", na.rm = TRUE)[[1]] * cell_area_km2
cropland_exposure_hist_2080_ssp585_area <- global(exposure_cropland_2080_ssp585, "sum", na.rm = TRUE)[[1]] * cell_area_km2



cropland_exposure_df <- data.frame(
  TimePeriod = c("2020", "2020", "2020",
                 "2050", "2050", "2050",
                 "2080", "2080", "2080"),
  Scenario = c("ssp126", "ssp245", "ssp585",
               "ssp126", "ssp245", "ssp585",
               "ssp126", "ssp245", "ssp585"),
  RefugiaArea_km2 = c(cropland_exposure_hist_2020_ssp126_area,
                      cropland_exposure_hist_2020_ssp245_area,
                      cropland_exposure_hist_2020_ssp585_area,
                      cropland_exposure_hist_2050_ssp126_area,
                      cropland_exposure_hist_2050_ssp245_area,
                      cropland_exposure_hist_2050_ssp585_area,
                      cropland_exposure_hist_2080_ssp126_area,
                      cropland_exposure_hist_2080_ssp245_area,
                      cropland_exposure_hist_2080_ssp585_area)
)

# Write to CSV
write.csv(cropland_exposure_df, "F:/Uillinois_data/analysis/habitat_suitability/RF/cropland/refugia/threshold/cropland_exposure_areas_by_scenario_updated_50.csv", row.names = FALSE)


# Count the number of cells with forest (value == 1)
cropland_area_km2 <- sum(values(cropland) == 1, na.rm = TRUE)

cat("Total cropland area (km²):", cropland_area_km2, "\n")

cropland_refugia <- data.frame(
  Year = c("2020s", "2020s", "2020s", "2050s", "2050s", "2050s", "2080s", "2080s", "2080s"),
  Emission_Scenario = c("ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585"),
  Refugia = c(77.4, 67.7, 68.3, 46.6, 40.3, 27.7, 48.3, 23.4, 1.9)
)


# Convert Year to an ordered factor for proper sequencing
cropland_refugia$Year <- factor(cropland_refugia$Year, levels = c("2020s", "2050s", "2080s"))

# Plot the refugia data and customized axis lines
ggplot(cropland_refugia, aes(x = Year, y = Refugia, group = Emission_Scenario, color = Emission_Scenario)) +
  geom_line(size = 1.2) +
  geom_point(size = 3) +
  labs(title = "Projected Cropland Refugia for the MW CASC Region",
       x = "Time Period",
       y = "Percentage Refugia",
       color = "Emission Scenario") +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank(),  # Remove minor grid lines
    axis.line = element_line(size = 1, color = "black"),  # Bold x and y axis lines
    axis.text = element_text(size = 11),  # Adjust axis text size
    axis.title = element_text(size = 12, face = "bold")  # Bold x and y axis labels
  )


# Repeat for exposure

# Create the data frame
cropland_exposure_data <- data.frame(
  Year = c("2020s", "2020s", "2020s", "2050s", "2050s", "2050s", "2080s", "2080s", "2080s"),
  Emission_Scenario = c("ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585"),
  Vulnerability = c(4.7, 14.5, 13.9, 35.6, 41.8, 54.4, 33.9, 58.8, 80.2)
)

# Convert Year to an ordered factor for proper sequencing
cropland_exposure_data$Year <- factor(cropland_exposure_data$Year, levels = c("2020s", "2050s", "2080s"))

# Plot the vulnerabile areas data
ggplot(cropland_exposure_data, aes(x = Year, y = Vulnerability, group = Emission_Scenario, color = Emission_Scenario)) +
  geom_line(size = 1.2) +
  geom_point(size = 3) +
  labs(title = "Projected Cropland Exposure Areas for the MW CASC Region",
       x = "Time Period",
       y = "Percentage Exposure",
       color = "Emission Scenario") +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank(),  # Remove minor grid lines
    axis.line = element_line(size = 1, color = "black"),  # Bold x and y axis lines
    axis.text = element_text(size = 11),  # Adjust axis text size
    axis.title = element_text(size = 12, face = "bold")  # Bold x and y axis labels
  )


# Do for 90th percentile

# Count the number of cells with forest (value == 1)
cropland_area_km2 <- sum(values(cropland) == 1, na.rm = TRUE)

cat("Total cropland area (km²):", cropland_area_km2, "\n")

cropland_refugia <- data.frame(
  Year = c("2020s", "2020s", "2020s", "2050s", "2050s", "2050s", "2080s", "2080s", "2080s"),
  Emission_Scenario = c("ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585"),
  Refugia = c(57.9, 46, 44.8, 21, 15.1, 7.7, 21.3, 5, 0)
)

# Convert Year to an ordered factor for proper sequencing
cropland_refugia$Year <- factor(cropland_refugia$Year, levels = c("2020s", "2050s", "2080s"))

# Plot the refugia data and customized axis lines
ggplot(cropland_refugia, aes(x = Year, y = Refugia, group = Emission_Scenario, color = Emission_Scenario)) +
  geom_line(size = 1.2) +
  geom_point(size = 3) +
  labs(title = "Projected Cropland Refugia for the MW CASC Region",
       x = "Time Period",
       y = "Percentage Refugia",
       color = "Emission Scenario") +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank(),  # Remove minor grid lines
    axis.line = element_line(size = 1, color = "black"),  # Bold x and y axis lines
    axis.text = element_text(size = 11),  # Adjust axis text size
    axis.title = element_text(size = 12, face = "bold")  # Bold x and y axis labels
  )


# Repeat for exposure

# Create the data frame
cropland_exposure_data <- data.frame(
  Year = c("2020s", "2020s", "2020s", "2050s", "2050s", "2050s", "2080s", "2080s", "2080s"),
  Emission_Scenario = c("ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585"),
  Vulnerability = c(6.1, 18, 19.2, 43, 49, 56.3, 42.7, 59, 64)
)

# Convert Year to an ordered factor for proper sequencing
cropland_exposure_data$Year <- factor(cropland_exposure_data$Year, levels = c("2020s", "2050s", "2080s"))

# Plot the vulnerabile areas data
ggplot(cropland_exposure_data, aes(x = Year, y = Vulnerability, group = Emission_Scenario, color = Emission_Scenario)) +
  geom_line(size = 1.2) +
  geom_point(size = 3) +
  labs(title = "Projected Cropland Exposure Areas for the MW CASC Region",
       x = "Time Period",
       y = "Percentage Exposure",
       color = "Emission Scenario") +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank(),  # Remove minor grid lines
    axis.line = element_line(size = 1, color = "black"),  # Bold x and y axis lines
    axis.text = element_text(size = 11),  # Adjust axis text size
    axis.title = element_text(size = 12, face = "bold")  # Bold x and y axis labels
  )


# Do for 70th percentile

# Count the number of cells with forest (value == 1)
cropland_area_km2 <- sum(values(cropland) == 1, na.rm = TRUE)

cat("Total cropland area (km²):", cropland_area_km2, "\n")

cropland_refugia <- data.frame(
  Year = c("2020s", "2020s", "2020s", "2050s", "2050s", "2050s", "2080s", "2080s", "2080s"),
  Emission_Scenario = c("ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585"),
  Refugia = c(86.3, 78.5, 79.4, 63.2, 57.6, 45.7, 65.2, 42.4, 9.6)
)

# Convert Year to an ordered factor for proper sequencing
cropland_refugia$Year <- factor(cropland_refugia$Year, levels = c("2020s", "2050s", "2080s"))

# Plot the refugia data and customized axis lines
ggplot(cropland_refugia, aes(x = Year, y = Refugia, group = Emission_Scenario, color = Emission_Scenario)) +
  geom_line(size = 1.2) +
  geom_point(size = 3) +
  labs(title = "Projected Cropland Refugia for the MW CASC Region",
       x = "Time Period",
       y = "Percentage Refugia",
       color = "Emission Scenario") +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank(),  # Remove minor grid lines
    axis.line = element_line(size = 1, color = "black"),  # Bold x and y axis lines
    axis.text = element_text(size = 11),  # Adjust axis text size
    axis.title = element_text(size = 12, face = "bold")  # Bold x and y axis labels
  )


# Repeat for exposure

# Create the data frame
cropland_exposure_data <- data.frame(
  Year = c("2020s", "2020s", "2020s", "2050s", "2050s", "2050s", "2080s", "2080s", "2080s"),
  Emission_Scenario = c("ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585"),
  Vulnerability = c(4.3, 12.3, 11.2, 27.4, 33.1, 45, 25.4, 48.3, 81.1)
)

# Convert Year to an ordered factor for proper sequencing
cropland_exposure_data$Year <- factor(cropland_exposure_data$Year, levels = c("2020s", "2050s", "2080s"))

# Plot the vulnerabile areas data
ggplot(cropland_exposure_data, aes(x = Year, y = Vulnerability, group = Emission_Scenario, color = Emission_Scenario)) +
  geom_line(size = 1.2) +
  geom_point(size = 3) +
  labs(title = "Projected Cropland Exposure Areas for the MW CASC Region",
       x = "Time Period",
       y = "Percentage Exposure",
       color = "Emission Scenario") +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank(),  # Remove minor grid lines
    axis.line = element_line(size = 1, color = "black"),  # Bold x and y axis lines
    axis.text = element_text(size = 11),  # Adjust axis text size
    axis.title = element_text(size = 12, face = "bold")  # Bold x and y axis labels
  )


# Do for 50th percentile

# Count the number of cells with forest (value == 1)
cropland_area_km2 <- sum(values(binary_cropland_map_hist) == 1, na.rm = TRUE)

cat("Total cropland area (km²):", cropland_area_km2, "\n")

cropland_refugia <- data.frame(
  Year = c("2020s", "2020s", "2020s", "2050s", "2050s", "2050s", "2080s", "2080s", "2080s"),
  Emission_Scenario = c("ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585"),
  Refugia = c(96.6, 93.1, 93.8, 89.8, 89, 84.1, 90.2, 82.1, 66.8)
)

# Convert Year to an ordered factor for proper sequencing
cropland_refugia$Year <- factor(cropland_refugia$Year, levels = c("2020s", "2050s", "2080s"))

# Plot the refugia data and customized axis lines
ggplot(cropland_refugia, aes(x = Year, y = Refugia, group = Emission_Scenario, color = Emission_Scenario)) +
  geom_line(size = 1.2) +
  geom_point(size = 3) +
  labs(title = "Projected Cropland Refugia for the MW CASC Region",
       x = "Time Period",
       y = "Percentage Refugia",
       color = "Emission Scenario") +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank(),  # Remove minor grid lines
    axis.line = element_line(size = 1, color = "black"),  # Bold x and y axis lines
    axis.text = element_text(size = 11),  # Adjust axis text size
    axis.title = element_text(size = 12, face = "bold")  # Bold x and y axis labels
  )


# Repeat for exposure

# Create the data frame
cropland_exposure_data <- data.frame(
  Year = c("2020s", "2020s", "2020s", "2050s", "2050s", "2050s", "2080s", "2080s", "2080s"),
  Emission_Scenario = c("ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585"),
  Vulnerability = c(3.4, 6.9, 6.2, 10.2, 11, 15.9, 9.8, 18, 33.2)
)

# Convert Year to an ordered factor for proper sequencing
cropland_exposure_data$Year <- factor(cropland_exposure_data$Year, levels = c("2020s", "2050s", "2080s"))

# Plot the vulnerabile areas data
ggplot(cropland_exposure_data, aes(x = Year, y = Vulnerability, group = Emission_Scenario, color = Emission_Scenario)) +
  geom_line(size = 1.2) +
  geom_point(size = 3) +
  labs(title = "Projected Cropland Exposure Areas for the MW CASC Region",
       x = "Time Period",
       y = "Percentage Exposure",
       color = "Emission Scenario") +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank(),  # Remove minor grid lines
    axis.line = element_line(size = 1, color = "black"),  # Bold x and y axis lines
    axis.text = element_text(size = 11),  # Adjust axis text size
    axis.title = element_text(size = 12, face = "bold")  # Bold x and y axis labels
  )



# ----------------------------------------------------------------



# Test RandomForest model for grassland

# resample forest to align with predictors
grassland_r <- resample(grassland, EMT, method = "near")
r_stack <- c(EMT, EXT, PPT_at, PPT_sm, PPT_wt, elevation, slope, grassland_r)
names(r_stack) <- c("EMT", "EXT", "PPT_at", "PPT_sm",
                    "PPT_wt", "elevation", "slope", "grassland")

# prepare data for modeling

# Convert to data frame
df <- as.data.frame(r_stack, xy = TRUE, na.rm = TRUE)
df$grassland <- ifelse(df$grassland>= 1, 1, 0)


# --------------------------------------------
# Step 2: Sample 10k presence & background points
# --------------------------------------------
set.seed(123)
presence_df <- df[df$grassland == 1, c("x", "y")]
background_df <- df[df$grassland== 0, c("x", "y")]

n_presence <- min(100000, nrow(presence_df))
n_background <- min(100000, nrow(background_df))

presence_points <- presence_df[sample(1:nrow(presence_df), n_presence), ]
background_points <- background_df[sample(1:nrow(background_df), n_background), ]

# --------------------------------------------
# Step 3: Train/test split (80/20)
# --------------------------------------------
train_idx_pres <- sample(1:n_presence, size = 0.8 * n_presence)
train_idx_back <- sample(1:n_background, size = 0.8 * n_background)

train_pres <- presence_points[train_idx_pres, ]
test_pres <- presence_points[-train_idx_pres, ]

train_back <- background_points[train_idx_back, ]
test_back <- background_points[-train_idx_back, ]


# --------------------------------------------
# Step 3: Combine and split into train/test (80/20)
# --------------------------------------------
presence_points$label <- 1
background_points$label <- 0

all_data <- rbind(presence_points, background_points)
train_idx <- sample(1:nrow(all_data), size = 0.8 * nrow(all_data))

train_data <- all_data[train_idx, ]
test_data <- all_data[-train_idx, ]


# Extract predictor values
predictor_values <- extract(predictors_stack, train_data[, c("x", "y")])

# Combine and remove NA
model_data <- cbind(label = train_data$label, predictor_values)
model_data <- na.omit(model_data)

# Now convert to data frame
model_data <- as.data.frame(model_data)

# Now safely convert label to a factor
model_data$label <- factor(model_data$label, levels = c(0, 1))


# Train RF model
rf_model <- randomForest(
  label ~ ., 
  data = model_data[, -which(names(model_data) == "ID")],
  ntree = 50,
  importance = TRUE
)

# Get variable importance (Mean Decrease in Gini)
var_imp <- importance(rf_model)

# Extract Gini importance and convert to data frame
var_imp_df <- data.frame(
  Variable = rownames(var_imp),
  Gini = var_imp[, "MeanDecreaseGini"]
)

# Calculate percentage contribution
var_imp_df$PercentContribution <- 100 * var_imp_df$Gini / sum(var_imp_df$Gini)

# Round for display
var_imp_df$PercentContribution <- round(var_imp_df$PercentContribution, 2)

# Sort descending
var_imp_df <- var_imp_df[order(-var_imp_df$PercentContribution), ]

# View
print(var_imp_df)

rf_pred_prob <- terra::predict(predictors_stack, rf_model, type = "prob", index = 2)
plot(rf_pred_prob, main = "Predicted Suitability (RF)")

rf_pred_prob_2020_ssp126 <- terra::predict(predictors_stack_2020_ssp126, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2020_ssp126, main = "Predicted Suitability (RF)")

rf_pred_prob_2020_ssp245 <- terra::predict(predictors_stack_2020_ssp245, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2020_ssp245, main = "Predicted Suitability (RF)")

rf_pred_prob_2020_ssp585 <- terra::predict(predictors_stack_2020_ssp585, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2020_ssp585, main = "Predicted Suitability (RF)")

rf_pred_prob_2050_ssp126 <- terra::predict(predictors_stack_2050_ssp126, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2050_ssp126, main = "Predicted Suitability (RF)")

rf_pred_prob_2050_ssp245 <- terra::predict(predictors_stack_2050_ssp245, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2050_ssp245, main = "Predicted Suitability (RF)")

rf_pred_prob_2050_ssp585 <- terra::predict(predictors_stack_2050_ssp585, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2050_ssp585, main = "Predicted Suitability (RF)")

rf_pred_prob_2080_ssp126 <- terra::predict(predictors_stack_2080_ssp126, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2080_ssp126, main = "Predicted Suitability (RF)")

rf_pred_prob_2080_ssp245 <- terra::predict(predictors_stack_2080_ssp245, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2080_ssp245, main = "Predicted Suitability (RF)")

rf_pred_prob_2080_ssp585 <- terra::predict(predictors_stack_2080_ssp585, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2080_ssp585, main = "Predicted Suitability (RF)")


writeRaster(rf_pred_prob,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/grassland/suitability/grassland_suitability_hist_updated.tif",
            overwrite = TRUE)

writeRaster(rf_pred_prob_2020_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/grassland/suitability/grassland_suitability_2020_ssp126_updated.tif",
            overwrite = TRUE)

writeRaster(rf_pred_prob_2020_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/grassland/suitability/grassland_suitability_2020_ssp245_updated.tif",
            overwrite = TRUE)

writeRaster(rf_pred_prob_2020_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/grassland/suitability/grassland_suitability_2020_ssp585_updated.tif",
            overwrite = TRUE)

writeRaster(rf_pred_prob_2050_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/grassland/suitability/grassland_suitability_2050_ssp126_updated.tif",
            overwrite = TRUE)

writeRaster(rf_pred_prob_2050_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/grassland/suitability/grassland_suitability_2050_ssp245_updated.tif",
            overwrite = TRUE)

writeRaster(rf_pred_prob_2050_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/grassland/suitability/grassland_suitability_2050_ssp585_updated.tif",
            overwrite = TRUE)


writeRaster(rf_pred_prob_2080_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/grassland/suitability/grassland_suitability_2080_ssp126_updated.tif",
            overwrite = TRUE)

writeRaster(rf_pred_prob_2080_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/grassland/suitability/grassland_suitability_2080_ssp245_updated.tif",
            overwrite = TRUE)

writeRaster(rf_pred_prob_2080_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/grassland/suitability/grassland_suitability_2080_ssp585_updated.tif",
            overwrite = TRUE)



# --------------------------------------------
# Step 7: Model Evaluation (AUC, TSS)
# --------------------------------------------

# Extract predictors for test data locations
test_predictors <- extract(predictors_stack, test_data[, c("x", "y")])

# Combine label and predictor values
test_model_data <- cbind(label = test_data$label, test_predictors)

# Remove rows with NA values
test_model_data <- na.omit(as.data.frame(test_model_data))

# Predict probability of presence (class 1)
test_pred <- predict(rf_model, newdata = test_model_data, type = "prob")[, 2]

# Predict probabilities for test data (class "1" = presence)
test_pred <- predict(rf_model, newdata = test_data, type = "prob")[, 2]

obs_labels <- as.numeric(as.character(test_model_data$label))  # convert factor to numeric if needed

# Convert obs_labels to factor with levels 0 and 1
obs_labels_factor <- factor(obs_labels, levels = c(0,1))

# Compute ROC object explicitly
roc_obj <- roc(response = obs_labels_factor, predictor = test_pred, quiet = TRUE)
str(roc_obj)
summary(roc_obj)

auc_value <- as.numeric(roc_obj$auc)
cat("AUC =", round(auc_value, 3), "\n")

auc_value_manual <- roc_obj$auc
print(auc_value_manual)


# Get sensitivities, specificities, and thresholds from ROC object
sens <- roc_obj$sensitivities
spec <- roc_obj$specificities
thresh <- roc_obj$thresholds

# Compute TSS = sensitivity + specificity - 1
tss_vals <- sens + spec - 1

# Identify the threshold that gives the maximum TSS
max_tss_index <- which.max(tss_vals)
optimal_threshold <- thresh[max_tss_index]
max_tss <- tss_vals[max_tss_index]

max_tss <- 0.50
# Output results
cat("Optimal threshold (Max Sens + Spec):", round(optimal_threshold, 3), "\n")
cat("TSS at optimal threshold:", round(max_tss, 3), "\n")

# Create binary presence–absence map
binary_grassland_map_hist <- rf_pred_prob >= max_tss
binary_grassland_map_2020_ssp126 <- rf_pred_prob_2020_ssp126 >= max_tss
binary_grassland_map_2020_ssp245 <- rf_pred_prob_2020_ssp245 >= max_tss
binary_grassland_map_2020_ssp585 <- rf_pred_prob_2020_ssp585 >= max_tss

binary_grassland_map_2050_ssp126 <- rf_pred_prob_2050_ssp126 >= max_tss
binary_grassland_map_2050_ssp245 <- rf_pred_prob_2050_ssp245 >= max_tss
binary_grassland_map_2050_ssp585 <- rf_pred_prob_2050_ssp585 >= max_tss

binary_grassland_map_2080_ssp126 <- rf_pred_prob_2080_ssp126 >= max_tss
binary_grassland_map_2080_ssp245 <- rf_pred_prob_2080_ssp245 >= max_tss
binary_grassland_map_2080_ssp585 <- rf_pred_prob_2080_ssp585 >= max_tss

plot(binary_grassland_map_hist)
plot(binary_grassland_map_2020_ssp126)
plot(binary_grassland_map_2020_ssp245)
plot(binary_grassland_map_2020_ssp585)

plot(binary_grassland_map_2050_ssp126)
plot(binary_grassland_map_2050_ssp245)
plot(binary_grassland_map_2050_ssp585)

plot(binary_grassland_map_2080_ssp126)
plot(binary_grassland_map_2080_ssp245)
plot(binary_grassland_map_2080_ssp585)

writeRaster(binary_grassland_map_hist,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/grassland/suitability/threshold/binary_grassland_map_hist_updated_50.tif",
            overwrite = TRUE)

writeRaster(binary_grassland_map_2020_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/grassland/suitability/threshold/binary_grassland_map_2020_ssp126_updated_50.tif",
            overwrite = TRUE)

writeRaster(binary_grassland_map_2020_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/grassland/suitability/threshold/binary_grassland_map_2020_ssp245_updated_50.tif",
            overwrite = TRUE)

writeRaster(binary_grassland_map_2020_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/grassland/suitability/threshold/binary_grassland_map_2020_ssp585_updated_50.tif",
            overwrite = TRUE)

writeRaster(binary_grassland_map_2050_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/grassland/suitability/threshold/binary_grassland_map_2050_ssp126_updated_50.tif",
            overwrite = TRUE)

writeRaster(binary_grassland_map_2050_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/grassland/suitability/threshold/binary_grassland_map_2050_ssp245_updated_50.tif",
            overwrite = TRUE)

writeRaster(binary_grassland_map_2050_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/grassland/suitability/threshold/binary_grassland_map_2050_ssp585_updated_50.tif",
            overwrite = TRUE)


writeRaster(binary_grassland_map_2080_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/grassland/suitability/threshold/binary_grassland_map_2080_ssp126_updated_50.tif",
            overwrite = TRUE)

writeRaster(binary_grassland_map_2080_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/grassland/suitability/threshold/binary_grassland_map_2080_ssp245_updated_50.tif",
            overwrite = TRUE)

writeRaster(binary_grassland_map_2080_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/grassland/suitability/threshold/binary_grassland_map_2080_ssp585_updated_50.tif",
            overwrite = TRUE)


# grassland stable-loss, or refugia

refugia_grassland_2020_ssp126 <- binary_grassland_map_hist & binary_grassland_map_2020_ssp126
plot(refugia_grassland_2020_ssp126)
exposure_grassland_2020_ssp126 <- binary_grassland_map_hist & !binary_grassland_map_2020_ssp126
plot(exposure_grassland_2020_ssp126)

combined_grassland_change_2020_ssp126 <- classify(
  refugia_grassland_2020_ssp126, cbind(1, 1))  # Start with refugia: value 1
combined_grassland_change_2020_ssp126[exposure_grassland_2020_ssp126 == 1] <- 2  # Set exposure to value 2
combined_grassland_change_2020_ssp126[refugia_grassland_2020_ssp126 == 0 & exposure_grassland_2020_ssp126 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")

# Step 3: Plot the heatmap
plot(combined_grassland_change_2020_ssp126, col = colors, legend = FALSE, main = "forest Refugia and Exposure (2020 SSP126)")


refugia_grassland_2020_ssp245 <- binary_grassland_map_hist & binary_grassland_map_2020_ssp245
plot(refugia_grassland_2020_ssp245)
exposure_grassland_2020_ssp245 <- binary_grassland_map_hist & !binary_grassland_map_2020_ssp245
plot(exposure_grassland_2020_ssp245)

combined_grassland_change_2020_ssp245 <- classify(
  refugia_grassland_2020_ssp245, cbind(1, 1))  # Start with refugia: value 1
combined_grassland_change_2020_ssp245[exposure_grassland_2020_ssp245 == 1] <- 2  # Set exposure to value 2
combined_grassland_change_2020_ssp245[refugia_grassland_2020_ssp245 == 0 & exposure_grassland_2020_ssp245 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")

# Step 3: Plot the heatmap
plot(combined_grassland_change_2020_ssp245, col = colors, legend = FALSE, main = "Water Refugia and Exposure (2020 SSP245)")


refugia_grassland_2020_ssp585 <- binary_grassland_map_hist & binary_grassland_map_2020_ssp585
plot(refugia_grassland_2020_ssp585)
exposure_grassland_2020_ssp585 <- binary_grassland_map_hist & !binary_grassland_map_2020_ssp585
plot(exposure_grassland_2020_ssp585)

combined_grassland_change_2020_ssp585 <- classify(
  refugia_grassland_2020_ssp585, cbind(1, 1))  # Start with refugia: value 1
combined_grassland_change_2020_ssp585[exposure_grassland_2020_ssp585 == 1] <- 2  # Set exposure to value 2
combined_grassland_change_2020_ssp585[refugia_grassland_2020_ssp585 == 0 & exposure_grassland_2020_ssp585 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")

# Step 3: Plot the heatmap
plot(combined_grassland_change_2020_ssp585, col = colors, legend = FALSE, main = "Water Refugia and Exposure (2020 SSP245)")



refugia_grassland_2050_ssp126 <- binary_grassland_map_hist & binary_grassland_map_2050_ssp126
plot(refugia_grassland_2050_ssp126)
exposure_grassland_2050_ssp126 <- binary_grassland_map_hist & !binary_grassland_map_2050_ssp126
plot(exposure_grassland_2050_ssp126)

combined_grassland_change_2050_ssp126 <- classify(
  refugia_grassland_2050_ssp126, cbind(1, 1))  # Start with refugia: value 1
combined_grassland_change_2050_ssp126[exposure_grassland_2050_ssp126 == 1] <- 2  # Set exposure to value 2
combined_grassland_change_2050_ssp126[refugia_grassland_2050_ssp126 == 0 & exposure_grassland_2050_ssp126 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")

# Step 3: Plot the heatmap
plot(combined_grassland_change_2050_ssp126, col = colors, legend = FALSE, main = "Water Refugia and Exposure (2050 SSP126)")


refugia_grassland_2050_ssp245 <- binary_grassland_map_hist & binary_grassland_map_2050_ssp245
plot(refugia_grassland_2050_ssp245)
exposure_grassland_2050_ssp245 <- binary_grassland_map_hist & !binary_grassland_map_2050_ssp245
plot(exposure_grassland_2050_ssp245)

combined_grassland_change_2050_ssp245 <- classify(
  refugia_grassland_2050_ssp245, cbind(1, 1))  # Start with refugia: value 1
combined_grassland_change_2050_ssp245[exposure_grassland_2050_ssp245 == 1] <- 2  # Set exposure to value 2
combined_grassland_change_2050_ssp245[refugia_grassland_2050_ssp245 == 0 & exposure_grassland_2050_ssp245 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")

# Step 3: Plot the heatmap
plot(combined_grassland_change_2050_ssp245, col = colors, legend = FALSE, main = "Water Refugia and Exposure (2050 SSP245)")


refugia_grassland_2050_ssp585 <- binary_grassland_map_hist & binary_grassland_map_2050_ssp585
plot(refugia_grassland_2050_ssp585)
exposure_grassland_2050_ssp585 <- binary_grassland_map_hist & !binary_grassland_map_2050_ssp585
plot(exposure_grassland_2050_ssp585)

combined_grassland_change_2050_ssp585 <- classify(
  refugia_grassland_2050_ssp585, cbind(1, 1))  # Start with refugia: value 1
combined_grassland_change_2050_ssp585[exposure_grassland_2050_ssp585 == 1] <- 2  # Set exposure to value 2
combined_grassland_change_2050_ssp585[refugia_grassland_2050_ssp585 == 0 & exposure_grassland_2050_ssp585 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")

# Step 3: Plot the heatmap
plot(combined_grassland_change_2050_ssp585, col = colors, legend = FALSE, main = "Water Refugia and Exposure (2050 SSP585)")


refugia_grassland_2080_ssp126 <- binary_grassland_map_hist & binary_grassland_map_2080_ssp126
plot(refugia_grassland_2080_ssp126)
exposure_grassland_2080_ssp126 <- binary_grassland_map_hist & !binary_grassland_map_2080_ssp126
plot(exposure_grassland_2080_ssp126)

combined_grassland_change_2080_ssp126 <- classify(
  refugia_grassland_2080_ssp126, cbind(1, 1))  # Start with refugia: value 1
combined_grassland_change_2080_ssp126[exposure_grassland_2080_ssp126 == 1] <- 2  # Set exposure to value 2
combined_grassland_change_2080_ssp126[refugia_grassland_2080_ssp126 == 0 & exposure_grassland_2080_ssp126 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")

# Step 3: Plot the heatmap
plot(combined_grassland_change_2080_ssp126, col = colors, legend = FALSE, main = "Water Refugia and Exposure (2050 SSP126)")


refugia_grassland_2080_ssp245 <- binary_grassland_map_hist & binary_grassland_map_2080_ssp245
plot(refugia_grassland_2080_ssp245)
exposure_grassland_2080_ssp245 <- binary_grassland_map_hist & !binary_grassland_map_2080_ssp245
plot(exposure_grassland_2080_ssp245)

combined_grassland_change_2080_ssp245 <- classify(
  refugia_grassland_2080_ssp245, cbind(1, 1))  # Start with refugia: value 1
combined_grassland_change_2080_ssp245[exposure_grassland_2080_ssp245 == 1] <- 2  # Set exposure to value 2
combined_grassland_change_2080_ssp245[refugia_grassland_2080_ssp245 == 0 & exposure_grassland_2080_ssp245 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")

# Step 3: Plot the heatmap
plot(combined_grassland_change_2080_ssp245, col = colors, legend = FALSE, main = "Water Refugia and Exposure (2050 SSP245)")


refugia_grassland_2080_ssp585 <- binary_grassland_map_hist & binary_grassland_map_2080_ssp585
plot(refugia_grassland_2080_ssp585)
exposure_grassland_2080_ssp585 <- binary_grassland_map_hist & !binary_grassland_map_2080_ssp585
plot(exposure_grassland_2080_ssp585)

combined_grassland_change_2080_ssp585 <- classify(
  refugia_grassland_2080_ssp585, cbind(1, 1))  # Start with refugia: value 1
combined_grassland_change_2080_ssp585[exposure_grassland_2080_ssp585 == 1] <- 2  # Set exposure to value 2
combined_grassland_change_2080_ssp585[refugia_grassland_2080_ssp585 == 0 & exposure_grassland_2080_ssp585 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")


# Step 3: Plot the heatmap
plot(combined_grassland_change_2080_ssp585, col = colors, legend = FALSE, main = "cropland Refugia and Exposure (2050 SSP585)")


writeRaster(combined_grassland_change_2020_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/grassland/refugia/threshold/combined_grassland_refugia_exposure_2020_ssp126_updated_50.tif",
            overwrite = TRUE)

writeRaster(combined_grassland_change_2020_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/grassland/refugia/threshold/combined_grassland_refugia_exposure_2020_ssp245_updated_50.tif",
            overwrite = TRUE)

writeRaster(combined_grassland_change_2020_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/grassland/refugia/threshold/combined_grassland_refugia_exposure_2020_ssp585_updated_50.tif",
            overwrite = TRUE)

writeRaster(combined_grassland_change_2050_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/grassland/refugia/threshold/combined_grassland_refugia_exposure_2050_ssp126_updated_50.tif",
            overwrite = TRUE)

writeRaster(combined_grassland_change_2050_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/grassland/refugia/threshold/combined_grassland_refugia_exposure_2050_ssp245_updated_50.tif",
            overwrite = TRUE)

writeRaster(combined_grassland_change_2050_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/grassland/refugia/threshold/combined_grassland_refugia_exposure_2050_ssp585_updated_50.tif",
            overwrite = TRUE)

writeRaster(combined_grassland_change_2080_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/grassland/refugia/threshold/combined_grassland_refugia_exposure_2080_ssp126_updated_50.tif",
            overwrite = TRUE)


writeRaster(combined_grassland_change_2080_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/grassland/refugia/threshold/combined_grassland_refugia_exposure_2080_ssp245_updated_50.tif",
            overwrite = TRUE)

writeRaster(combined_grassland_change_2080_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/grassland/refugia/threshold/combined_grassland_refugia_exposure_2080_ssp585_updated_50.tif",
            overwrite = TRUE)



# convert heat maps to polygon
combined_grassland_change_polygon_2020_ssp126 <- as.polygons(combined_grassland_change_2020_ssp126, dissolve = TRUE)
# Save as a shapefile
writeVector(combined_grassland_change_polygon_2020_ssp126, "F:/Uillinois_data/analysis/habitat_suitability/RF/grassland/refugia/threshold/combined_grassland_refugia_exposure_2020_ssp126_updated_50.shp", filetype = "ESRI Shapefile", overwrite = TRUE)

combined_grassland_change_polygon_2020_ssp245 <- as.polygons(combined_grassland_change_2020_ssp245, dissolve = TRUE)
writeVector(combined_grassland_change_polygon_2020_ssp245, "F:/Uillinois_data/analysis/habitat_suitability/RF/grassland/refugia/threshold/combined_grassland_refugia_exposure_2020_ssp245_updated_50.shp", filetype = "ESRI Shapefile", overwrite = TRUE)
grassland
combined_grassland_change_polygon_2020_ssp585 <- as.polygons(combined_grassland_change_2020_ssp585, dissolve = TRUE)
writeVector(combined_grassland_change_polygon_2020_ssp585, "F:/Uillinois_data/analysis/habitat_suitability/RF/grassland/refugia/threshold/combined_grassland_refugia_exposure_2020_ssp585_updated_50.shp", filetype = "ESRI Shapefile", overwrite = TRUE)


combined_grassland_change_polygon_2050_ssp126 <- as.polygons(combined_grassland_change_2050_ssp126, dissolve = TRUE)
writeVector(combined_grassland_change_polygon_2050_ssp126, "F:/Uillinois_data/analysis/habitat_suitability/RF/grassland/refugia/threshold/combined_grassland_refugia_exposure_2050_ssp126_updated_50.shp", filetype = "ESRI Shapefile", overwrite = TRUE)

combined_grassland_change_polygon_2050_ssp245 <- as.polygons(combined_grassland_change_2050_ssp245, dissolve = TRUE)
writeVector(combined_grassland_change_polygon_2050_ssp245, "F:/Uillinois_data/analysis/habitat_suitability/RF/grassland/refugia/threshold/combined_grassland_refugia_exposure_2050_ssp245_updated_50.shp", filetype = "ESRI Shapefile", overwrite = TRUE)

combined_grassland_change_polygon_2050_ssp585 <- as.polygons(combined_grassland_change_2050_ssp585, dissolve = TRUE)
writeVector(combined_grassland_change_polygon_2050_ssp585, "F:/Uillinois_data/analysis/habitat_suitability/RF/grassland/refugia/threshold/combined_grassland_refugia_exposure_2050_ssp585_updated_50.shp", filetype = "ESRI Shapefile", overwrite = TRUE)


combined_grassland_change_polygon_2080_ssp126 <- as.polygons(combined_grassland_change_2080_ssp126, dissolve = TRUE)
writeVector(combined_grassland_change_polygon_2080_ssp126, "F:/Uillinois_data/analysis/habitat_suitability/RF/grassland/refugia/threshold/combined_grassland_refugia_exposure_2080_ssp126_updated_50.shp", filetype = "ESRI Shapefile", overwrite = TRUE)

combined_grassland_change_polygon_2080_ssp245 <- as.polygons(combined_grassland_change_2080_ssp245, dissolve = TRUE)
writeVector(combined_grassland_change_polygon_2080_ssp245, "F:/Uillinois_data/analysis/habitat_suitability/RF/grassland/refugia/threshold/combined_grassland_refugia_exposure_2080_ssp245_updated_50.shp", filetype = "ESRI Shapefile", overwrite = TRUE)

combined_grassland_change_polygon_2080_ssp585 <- as.polygons(combined_grassland_change_2080_ssp585, dissolve = TRUE)
writeVector(combined_grassland_change_polygon_2080_ssp585, "F:/Uillinois_data/analysis/habitat_suitability/RF/grassland/refugia/threshold/combined_grassland_refugia_exposure_2080_ssp585_updated_50.shp", filetype = "ESRI Shapefile", overwrite = TRUE)



# Combine results into a data frame

# Refugia

cell_area_km2 <- 1  # each pixel is 1 km² due to 1000m x 1000m resolution

grassland_refugia_hist_2020_ssp126_area <- global(refugia_grassland_2020_ssp126, "sum", na.rm = TRUE)[[1]] * cell_area_km2
grassland_refugia_hist_2020_ssp245_area <- global(refugia_grassland_2020_ssp245, "sum", na.rm = TRUE)[[1]] * cell_area_km2
grassland_refugia_hist_2020_ssp585_area <- global(refugia_grassland_2020_ssp585, "sum", na.rm = TRUE)[[1]] * cell_area_km2

grassland_refugia_hist_2050_ssp126_area <- global(refugia_grassland_2050_ssp126, "sum", na.rm = TRUE)[[1]] * cell_area_km2
grassland_refugia_hist_2050_ssp245_area <- global(refugia_grassland_2050_ssp245, "sum", na.rm = TRUE)[[1]] * cell_area_km2
grassland_refugia_hist_2050_ssp585_area <- global(refugia_grassland_2050_ssp585, "sum", na.rm = TRUE)[[1]] * cell_area_km2

grassland_refugia_hist_2080_ssp126_area <- global(refugia_grassland_2080_ssp126, "sum", na.rm = TRUE)[[1]] * cell_area_km2
grassland_refugia_hist_2080_ssp245_area <- global(refugia_grassland_2080_ssp245, "sum", na.rm = TRUE)[[1]] * cell_area_km2
grassland_refugia_hist_2080_ssp585_area <- global(refugia_grassland_2080_ssp585, "sum", na.rm = TRUE)[[1]] * cell_area_km2


grassland_refugia_df <- data.frame(
  TimePeriod = c("2020", "2020", "2020",
                 "2050", "2050", "2050",
                 "2080", "2080", "2080"),
  Scenario = c("ssp126", "ssp245", "ssp585",
               "ssp126", "ssp245", "ssp585",
               "ssp126", "ssp245", "ssp585"),
  RefugiaArea_km2 = c(grassland_refugia_hist_2020_ssp126_area,
                      grassland_refugia_hist_2020_ssp245_area,
                      grassland_refugia_hist_2020_ssp585_area,
                      grassland_refugia_hist_2050_ssp126_area,
                      grassland_refugia_hist_2050_ssp245_area,
                      grassland_refugia_hist_2050_ssp585_area,
                      grassland_refugia_hist_2080_ssp126_area,
                      grassland_refugia_hist_2080_ssp245_area,
                      grassland_refugia_hist_2080_ssp585_area)
)

# Write to CSV
write.csv(grassland_refugia_df, "F:/Uillinois_data/analysis/habitat_suitability/RF/grassland/refugia/threshold/grassland_refugia_areas_by_scenario_updated_50.csv", row.names = FALSE)


# Exposure

grassland_exposure_hist_2020_ssp126_area <- global(exposure_grassland_2020_ssp126, "sum", na.rm = TRUE)[[1]] * cell_area_km2
grassland_exposure_hist_2020_ssp245_area <- global(exposure_grassland_2020_ssp245, "sum", na.rm = TRUE)[[1]] * cell_area_km2
grassland_exposure_hist_2020_ssp585_area <- global(exposure_grassland_2020_ssp585, "sum", na.rm = TRUE)[[1]] * cell_area_km2

grassland_exposure_hist_2050_ssp126_area <- global(exposure_grassland_2050_ssp126, "sum", na.rm = TRUE)[[1]] * cell_area_km2
grassland_exposure_hist_2050_ssp245_area <- global(exposure_grassland_2050_ssp245, "sum", na.rm = TRUE)[[1]] * cell_area_km2
grassland_exposure_hist_2050_ssp585_area <- global(exposure_grassland_2050_ssp585, "sum", na.rm = TRUE)[[1]] * cell_area_km2

grassland_exposure_hist_2080_ssp126_area <- global(exposure_grassland_2080_ssp126, "sum", na.rm = TRUE)[[1]] * cell_area_km2
grassland_exposure_hist_2080_ssp245_area <- global(exposure_grassland_2080_ssp245, "sum", na.rm = TRUE)[[1]] * cell_area_km2
grassland_exposure_hist_2080_ssp585_area <- global(exposure_grassland_2080_ssp585, "sum", na.rm = TRUE)[[1]] * cell_area_km2


grassland_exposure_df <- data.frame(
  TimePeriod = c("2020", "2020", "2020",
                 "2050", "2050", "2050",
                 "2080", "2080", "2080"),
  Scenario = c("ssp126", "ssp245", "ssp585",
               "ssp126", "ssp245", "ssp585",
               "ssp126", "ssp245", "ssp585"),
  RefugiaArea_km2 = c(grassland_exposure_hist_2020_ssp126_area,
                      grassland_exposure_hist_2020_ssp245_area,
                      grassland_exposure_hist_2020_ssp585_area,
                      grassland_exposure_hist_2050_ssp126_area,
                      grassland_exposure_hist_2050_ssp245_area,
                      grassland_exposure_hist_2050_ssp585_area,
                      grassland_exposure_hist_2080_ssp126_area,
                      grassland_exposure_hist_2080_ssp245_area,
                      grassland_exposure_hist_2080_ssp585_area)
)

# Write to CSV
write.csv(grassland_exposure_df, "F:/Uillinois_data/analysis/habitat_suitability/RF/grassland/refugia/threshold/grassland_exposure_areas_by_scenario_updated_50.csv", row.names = FALSE)

# Count the number of cells with forest (value == 1)
grassland_area_km2 <- sum(values(grassland) == 1, na.rm = TRUE)

cat("Total grassland area (km²):", grassland_area_km2, "\n")

grassland_refugia <- data.frame(
  Year = c("2020s", "2020s", "2020s", "2050s", "2050s", "2050s", "2080s", "2080s", "2080s"),
  Emission_Scenario = c("ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585"),
  Refugia = c(86.4, 42.3, 21.5, 6, 0.3, 0, 3.7, 0, 0)
)


# Convert Year to an ordered factor for proper sequencing
grassland_refugia$Year <- factor(grassland_refugia$Year, levels = c("2020s", "2050s", "2080s"))

# Plot the refugia data and customized axis lines
ggplot(grassland_refugia, aes(x = Year, y = Refugia, group = Emission_Scenario, color = Emission_Scenario)) +
  geom_line(size = 1.2) +
  geom_point(size = 3) +
  labs(title = "Projected Grassland Refugia for the MW CASC Region",
       x = "Time Period",
       y = "Percentage Refugia",
       color = "Emission Scenario") +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank(),  # Remove minor grid lines
    axis.line = element_line(size = 1, color = "black"),  # Bold x and y axis lines
    axis.text = element_text(size = 11),  # Adjust axis text size
    axis.title = element_text(size = 12, face = "bold")  # Bold x and y axis labels
  )


# Repeat for exposure

# Create the data frame
grassland_exposure_data <- data.frame(
  Year = c("2020s", "2020s", "2020s", "2050s", "2050s", "2050s", "2080s", "2080s", "2080s"),
  Emission_Scenario = c("ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585"),
  Vulnerability = c(7.4, 25.7, 27.2, 53.5, 56.1, 66.9, 52, 71.2, 82)
)

# Convert Year to an ordered factor for proper sequencing
grassland_exposure_data$Year <- factor(grassland_exposure_data$Year, levels = c("2020s", "2050s", "2080s"))

# Plot the vulnerabile areas data
ggplot(grassland_exposure_data, aes(x = Year, y = Vulnerability, group = Emission_Scenario, color = Emission_Scenario)) +
  geom_line(size = 1.2) +
  geom_point(size = 3) +
  labs(title = "Projected Grassland Exposure Areas for the MW CASC Region",
       x = "Time Period",
       y = "Percentage Exposure",
       color = "Emission Scenario") +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank(),  # Remove minor grid lines
    axis.line = element_line(size = 1, color = "black"),  # Bold x and y axis lines
    axis.text = element_text(size = 11),  # Adjust axis text size
    axis.title = element_text(size = 12, face = "bold")  # Bold x and y axis labels
  )


# do for 90th percentile
# Count the number of cells with forest (value == 1)
grassland_area_km2 <- sum(values(binary_grassland_map_hist) == 1, na.rm = TRUE)

cat("Total grassland area (km²):", grassland_area_km2, "\n")

grassland_refugia <- data.frame(
  Year = c("2020s", "2020s", "2020s", "2050s", "2050s", "2050s", "2080s", "2080s", "2080s"),
  Emission_Scenario = c("ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585"),
  Refugia = c(91.7, 69.8, 62.4, 39.2, 28.5, 29.4, 38.7, 32.5, 26.4)
)


# Convert Year to an ordered factor for proper sequencing
grassland_refugia$Year <- factor(grassland_refugia$Year, levels = c("2020s", "2050s", "2080s"))

# Plot the refugia data and customized axis lines
ggplot(grassland_refugia, aes(x = Year, y = Refugia, group = Emission_Scenario, color = Emission_Scenario)) +
  geom_line(size = 1.2) +
  geom_point(size = 3) +
  labs(title = "Projected Grassland Refugia for the MW CASC Region",
       x = "Time Period",
       y = "Percentage Refugia",
       color = "Emission Scenario") +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank(),  # Remove minor grid lines
    axis.line = element_line(size = 1, color = "black"),  # Bold x and y axis lines
    axis.text = element_text(size = 11),  # Adjust axis text size
    axis.title = element_text(size = 12, face = "bold")  # Bold x and y axis labels
  )


# Repeat for exposure

# Create the data frame
grassland_exposure_data <- data.frame(
  Year = c("2020s", "2020s", "2020s", "2050s", "2050s", "2050s", "2080s", "2080s", "2080s"),
  Emission_Scenario = c("ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585"),
  Vulnerability = c(8.3, 30.2, 37.6, 60.8, 71.5, 70.6, 61.3, 67.5, 73.6)
)

# Convert Year to an ordered factor for proper sequencing
grassland_exposure_data$Year <- factor(grassland_exposure_data$Year, levels = c("2020s", "2050s", "2080s"))

# Plot the vulnerabile areas data
ggplot(grassland_exposure_data, aes(x = Year, y = Vulnerability, group = Emission_Scenario, color = Emission_Scenario)) +
  geom_line(size = 1.2) +
  geom_point(size = 3) +
  labs(title = "Projected Grassland Exposure Areas for the MW CASC Region",
       x = "Time Period",
       y = "Percentage Exposure",
       color = "Emission Scenario") +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank(),  # Remove minor grid lines
    axis.line = element_line(size = 1, color = "black"),  # Bold x and y axis lines
    axis.text = element_text(size = 11),  # Adjust axis text size
    axis.title = element_text(size = 12, face = "bold")  # Bold x and y axis labels
  )


# do for 70th percentile
# Count the number of cells with forest (value == 1)
grassland_area_km2 <- sum(values(binary_grassland_map_hist) == 1, na.rm = TRUE)

cat("Total grassland area (km²):", grassland_area_km2, "\n")

grassland_refugia <- data.frame(
  Year = c("2020s", "2020s", "2020s", "2050s", "2050s", "2050s", "2080s", "2080s", "2080s"),
  Emission_Scenario = c("ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585"),
  Refugia = c(92.2, 77, 72.6, 56.3, 52, 48.7, 55.4, 49.6, 45)
)


# Convert Year to an ordered factor for proper sequencing
grassland_refugia$Year <- factor(grassland_refugia$Year, levels = c("2020s", "2050s", "2080s"))

# Plot the refugia data and customized axis lines
ggplot(grassland_refugia, aes(x = Year, y = Refugia, group = Emission_Scenario, color = Emission_Scenario)) +
  geom_line(size = 1.2) +
  geom_point(size = 3) +
  labs(title = "Projected Grassland Refugia for the MW CASC Region",
       x = "Time Period",
       y = "Percentage Refugia",
       color = "Emission Scenario") +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank(),  # Remove minor grid lines
    axis.line = element_line(size = 1, color = "black"),  # Bold x and y axis lines
    axis.text = element_text(size = 11),  # Adjust axis text size
    axis.title = element_text(size = 12, face = "bold")  # Bold x and y axis labels
  )


# Repeat for exposure

# Create the data frame
grassland_exposure_data <- data.frame(
  Year = c("2020s", "2020s", "2020s", "2050s", "2050s", "2050s", "2080s", "2080s", "2080s"),
  Emission_Scenario = c("ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585"),
  Vulnerability = c(7.8, 23, 27.4, 43.7, 48, 51.3, 44.6, 50.4, 55)
)

# Convert Year to an ordered factor for proper sequencing
grassland_exposure_data$Year <- factor(grassland_exposure_data$Year, levels = c("2020s", "2050s", "2080s"))

# Plot the vulnerabile areas data
ggplot(grassland_exposure_data, aes(x = Year, y = Vulnerability, group = Emission_Scenario, color = Emission_Scenario)) +
  geom_line(size = 1.2) +
  geom_point(size = 3) +
  labs(title = "Projected Grassland Exposure Areas for the MW CASC Region",
       x = "Time Period",
       y = "Percentage Exposure",
       color = "Emission Scenario") +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank(),  # Remove minor grid lines
    axis.line = element_line(size = 1, color = "black"),  # Bold x and y axis lines
    axis.text = element_text(size = 11),  # Adjust axis text size
    axis.title = element_text(size = 12, face = "bold")  # Bold x and y axis labels
  )


# do for 50th percentile
# Count the number of cells with forest (value == 1)
grassland_area_km2 <- sum(values(binary_grassland_map_hist) == 1, na.rm = TRUE)

cat("Total grassland area (km²):", grassland_area_km2, "\n")

grassland_refugia <- data.frame(
  Year = c("2020s", "2020s", "2020s", "2050s", "2050s", "2050s", "2080s", "2080s", "2080s"),
  Emission_Scenario = c("ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585"),
  Refugia = c(91.1, 79, 76.1, 61.7, 61.8, 57, 61.4, 56.2, 55.8)
)


# Convert Year to an ordered factor for proper sequencing
grassland_refugia$Year <- factor(grassland_refugia$Year, levels = c("2020s", "2050s", "2080s"))

# Plot the refugia data and customized axis lines
ggplot(grassland_refugia, aes(x = Year, y = Refugia, group = Emission_Scenario, color = Emission_Scenario)) +
  geom_line(size = 1.2) +
  geom_point(size = 3) +
  labs(title = "Projected Grassland Refugia for the MW CASC Region",
       x = "Time Period",
       y = "Percentage Refugia",
       color = "Emission Scenario") +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank(),  # Remove minor grid lines
    axis.line = element_line(size = 1, color = "black"),  # Bold x and y axis lines
    axis.text = element_text(size = 11),  # Adjust axis text size
    axis.title = element_text(size = 12, face = "bold")  # Bold x and y axis labels
  )


# Repeat for exposure

# Create the data frame
grassland_exposure_data <- data.frame(
  Year = c("2020s", "2020s", "2020s", "2050s", "2050s", "2050s", "2080s", "2080s", "2080s"),
  Emission_Scenario = c("ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585"),
  Vulnerability = c(12.3, 29.1, 33.1, 52.9, 52.8, 59.4, 53.5, 60.6, 61.2)
)

# Convert Year to an ordered factor for proper sequencing
grassland_exposure_data$Year <- factor(grassland_exposure_data$Year, levels = c("2020s", "2050s", "2080s"))

# Plot the vulnerabile areas data
ggplot(grassland_exposure_data, aes(x = Year, y = Vulnerability, group = Emission_Scenario, color = Emission_Scenario)) +
  geom_line(size = 1.2) +
  geom_point(size = 3) +
  labs(title = "Projected Grassland Exposure Areas for the MW CASC Region",
       x = "Time Period",
       y = "Percentage Exposure",
       color = "Emission Scenario") +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank(),  # Remove minor grid lines
    axis.line = element_line(size = 1, color = "black"),  # Bold x and y axis lines
    axis.text = element_text(size = 11),  # Adjust axis text size
    axis.title = element_text(size = 12, face = "bold")  # Bold x and y axis labels
  )



# ----------------------------------------------------------------



# Test RandomForest model for wetlands

# resample forest to align with predictors
wetland_r <- resample(wetland, EMT, method = "near")
r_stack <- c(EMT, EXT, PPT_at, PPT_sm, PPT_wt, elevation, slope, wetland_r)
names(r_stack) <- c("EMT", "EXT", "PPT_at", "PPT_sm",
                    "PPT_wt", "elevation", "slope", "wetland")

# prepare data for modeling

# Convert to data frame
df <- as.data.frame(r_stack, xy = TRUE, na.rm = TRUE)
df$wetland <- ifelse(df$wetland >= 1, 1, 0)


# --------------------------------------------
# Step 2: Sample 10k presence & background points
# --------------------------------------------
set.seed(123)
presence_df <- df[df$wetland == 1, c("x", "y")]
background_df <- df[df$wetland == 0, c("x", "y")]

n_presence <- min(100000, nrow(presence_df))
n_background <- min(100000, nrow(background_df))

presence_points <- presence_df[sample(1:nrow(presence_df), n_presence), ]
background_points <- background_df[sample(1:nrow(background_df), n_background), ]

# --------------------------------------------
# Step 3: Train/test split (80/20)
# --------------------------------------------
train_idx_pres <- sample(1:n_presence, size = 0.8 * n_presence)
train_idx_back <- sample(1:n_background, size = 0.8 * n_background)

train_pres <- presence_points[train_idx_pres, ]
test_pres <- presence_points[-train_idx_pres, ]

train_back <- background_points[train_idx_back, ]
test_back <- background_points[-train_idx_back, ]


# --------------------------------------------
# Step 3: Combine and split into train/test (80/20)
# --------------------------------------------
presence_points$label <- 1
background_points$label <- 0

all_data <- rbind(presence_points, background_points)
train_idx <- sample(1:nrow(all_data), size = 0.8 * nrow(all_data))

train_data <- all_data[train_idx, ]
test_data <- all_data[-train_idx, ]


# Extract predictor values
predictor_values <- extract(predictors_stack, train_data[, c("x", "y")])

# Combine and remove NA
model_data <- cbind(label = train_data$label, predictor_values)
model_data <- na.omit(model_data)

# Now convert to data frame
model_data <- as.data.frame(model_data)

# Now safely convert label to a factor
model_data$label <- factor(model_data$label, levels = c(0, 1))


# Train RF model
rf_model <- randomForest(
  label ~ ., 
  data = model_data[, -which(names(model_data) == "ID")],
  ntree = 50,
  importance = TRUE
)

# Get variable importance (Mean Decrease in Gini)
var_imp <- importance(rf_model)

# Extract Gini importance and convert to data frame
var_imp_df <- data.frame(
  Variable = rownames(var_imp),
  Gini = var_imp[, "MeanDecreaseGini"]
)

# Calculate percentage contribution
var_imp_df$PercentContribution <- 100 * var_imp_df$Gini / sum(var_imp_df$Gini)

# Round for display
var_imp_df$PercentContribution <- round(var_imp_df$PercentContribution, 2)

# Sort descending
var_imp_df <- var_imp_df[order(-var_imp_df$PercentContribution), ]

# View
print(var_imp_df)

rf_pred_prob <- terra::predict(predictors_stack, rf_model, type = "prob", index = 2)
plot(rf_pred_prob, main = "Predicted Suitability (RF)")

rf_pred_prob_2020_ssp126 <- terra::predict(predictors_stack_2020_ssp126, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2020_ssp126, main = "Predicted Suitability (RF)")

rf_pred_prob_2020_ssp245 <- terra::predict(predictors_stack_2020_ssp245, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2020_ssp245, main = "Predicted Suitability (RF)")

rf_pred_prob_2020_ssp585 <- terra::predict(predictors_stack_2020_ssp585, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2020_ssp585, main = "Predicted Suitability (RF)")

rf_pred_prob_2050_ssp126 <- terra::predict(predictors_stack_2050_ssp126, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2050_ssp126, main = "Predicted Suitability (RF)")

rf_pred_prob_2050_ssp245 <- terra::predict(predictors_stack_2050_ssp245, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2050_ssp245, main = "Predicted Suitability (RF)")

rf_pred_prob_2050_ssp585 <- terra::predict(predictors_stack_2050_ssp585, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2050_ssp585, main = "Predicted Suitability (RF)")

rf_pred_prob_2080_ssp126 <- terra::predict(predictors_stack_2080_ssp126, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2080_ssp126, main = "Predicted Suitability (RF)")

rf_pred_prob_2080_ssp245 <- terra::predict(predictors_stack_2080_ssp245, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2080_ssp245, main = "Predicted Suitability (RF)")

rf_pred_prob_2080_ssp585 <- terra::predict(predictors_stack_2080_ssp585, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2080_ssp585, main = "Predicted Suitability (RF)")


writeRaster(rf_pred_prob,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/wetland/suitability/wetland_suitability_hist_updated.tif",
            overwrite = TRUE)

writeRaster(rf_pred_prob_2020_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/wetland/suitability/wetland_suitability_2020_ssp126_updated.tif",
            overwrite = TRUE)

writeRaster(rf_pred_prob_2020_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/wetland/suitability/wetland_suitability_2020_ssp245_updated.tif",
            overwrite = TRUE)

writeRaster(rf_pred_prob_2020_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/wetland/suitability/wetland_suitability_2020_ssp585_updated.tif",
            overwrite = TRUE)

writeRaster(rf_pred_prob_2050_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/wetland/suitability/wetland_suitability_2050_ssp126_updated.tif",
            overwrite = TRUE)

writeRaster(rf_pred_prob_2050_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/wetland/suitability/wetland_suitability_2050_ssp245_updated.tif",
            overwrite = TRUE)

writeRaster(rf_pred_prob_2050_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/wetland/suitability/wetland_suitability_2050_ssp585_updated.tif",
            overwrite = TRUE)


writeRaster(rf_pred_prob_2080_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/wetland/suitability/wetland_suitability_2080_ssp126_updated.tif",
            overwrite = TRUE)

writeRaster(rf_pred_prob_2080_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/wetland/suitability/wetland_suitability_2080_ssp245_updated.tif",
            overwrite = TRUE)

writeRaster(rf_pred_prob_2080_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/wetland/suitability/wetland_suitability_2080_ssp585_updated.tif",
            overwrite = TRUE)



# --------------------------------------------
# Step 7: Model Evaluation (AUC, TSS)
# --------------------------------------------

# Extract predictors for test data locations
test_predictors <- extract(predictors_stack, test_data[, c("x", "y")])

# Combine label and predictor values
test_model_data <- cbind(label = test_data$label, test_predictors)

# Remove rows with NA values
test_model_data <- na.omit(as.data.frame(test_model_data))

# Predict probability of presence (class 1)
test_pred <- predict(rf_model, newdata = test_model_data, type = "prob")[, 2]

obs_labels <- as.numeric(as.character(test_model_data$label))  # convert factor to numeric if needed

# Convert obs_labels to factor with levels 0 and 1
obs_labels_factor <- factor(obs_labels, levels = c(0,1))

# Compute ROC object explicitly
roc_obj <- roc(response = obs_labels_factor, predictor = test_pred, quiet = TRUE)
str(roc_obj)
summary(roc_obj)

auc_value <- as.numeric(roc_obj$auc)
cat("AUC =", round(auc_value, 3), "\n")

auc_value_manual <- roc_obj$auc
print(auc_value_manual)


# Get sensitivities, specificities, and thresholds from ROC object
sens <- roc_obj$sensitivities
spec <- roc_obj$specificities
thresh <- roc_obj$thresholds

# Compute TSS = sensitivity + specificity - 1
tss_vals <- sens + spec - 1

# Identify the threshold that gives the maximum TSS
max_tss_index <- which.max(tss_vals)
optimal_threshold <- thresh[max_tss_index]
max_tss <- tss_vals[max_tss_index]

max_tss <- 0.50
# Output results
cat("Optimal threshold (Max Sens + Spec):", round(optimal_threshold, 3), "\n")
cat("TSS at optimal threshold:", round(max_tss, 3), "\n")

# Create binary presence–absence map
binary_wetland_map_hist <- rf_pred_prob >= max_tss
binary_wetland_map_2020_ssp126 <- rf_pred_prob_2020_ssp126 >= max_tss
binary_wetland_map_2020_ssp245 <- rf_pred_prob_2020_ssp245 >= max_tss
binary_wetland_map_2020_ssp585 <- rf_pred_prob_2020_ssp585 >= max_tss

binary_wetland_map_2050_ssp126 <- rf_pred_prob_2050_ssp126 >= max_tss
binary_wetland_map_2050_ssp245 <- rf_pred_prob_2050_ssp245 >= max_tss
binary_wetland_map_2050_ssp585 <- rf_pred_prob_2050_ssp585 >= max_tss

binary_wetland_map_2080_ssp126 <- rf_pred_prob_2080_ssp126 >= max_tss
binary_wetland_map_2080_ssp245 <- rf_pred_prob_2080_ssp245 >= max_tss
binary_wetland_map_2080_ssp585 <- rf_pred_prob_2080_ssp585 >= max_tss

plot(binary_wetland_map_hist)
plot(binary_wetland_map_2020_ssp126)
plot(binary_wetland_map_2020_ssp245)
plot(binary_wetland_map_2020_ssp585)

plot(binary_wetland_map_2050_ssp126)
plot(binary_wetland_map_2050_ssp245)
plot(binary_wetland_map_2050_ssp585)

plot(binary_wetland_map_2080_ssp126)
plot(binary_wetland_map_2080_ssp245)
plot(binary_wetland_map_2080_ssp585)

writeRaster(binary_wetland_map_hist,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/wetland/suitability/threshold/binary_wetland_map_hist_updated_50.tif",
            overwrite = TRUE)

writeRaster(binary_wetland_map_2020_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/wetland/suitability/threshold/binary_wetland_map_2020_ssp126_updated_50.tif",
            overwrite = TRUE)

writeRaster(binary_wetland_map_2020_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/wetland/suitability/threshold/binary_wetland_map_2020_ssp245_updated_50.tif",
            overwrite = TRUE)

writeRaster(binary_wetland_map_2020_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/wetland/suitability/threshold/binary_wetland_map_2020_ssp585_updated_50.tif",
            overwrite = TRUE)

writeRaster(binary_wetland_map_2050_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/wetland/suitability/threshold/binary_wetland_map_2050_ssp126_updated_50.tif",
            overwrite = TRUE)

writeRaster(binary_wetland_map_2050_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/wetland/suitability/threshold/binary_wetland_map_2050_ssp245_updated_50.tif",
            overwrite = TRUE)

writeRaster(binary_wetland_map_2050_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/wetland/suitability/threshold/binary_wetland_map_2050_ssp585_updated_50.tif",
            overwrite = TRUE)


writeRaster(binary_wetland_map_2080_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/wetland/suitability/threshold/binary_wetland_map_2080_ssp126_updated_50.tif",
            overwrite = TRUE)

writeRaster(binary_wetland_map_2080_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/wetland/suitability/threshold/binary_wetland_map_2080_ssp245_updated_50.tif",
            overwrite = TRUE)

writeRaster(binary_wetland_map_2080_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/wetland/suitability/threshold/binary_wetland_map_2080_ssp585_updated_50.tif",
            overwrite = TRUE)


# wetland stable-loss, or refugia

refugia_wetland_2020_ssp126 <- binary_wetland_map_hist & binary_wetland_map_2020_ssp126
plot(refugia_wetland_2020_ssp126)
exposure_wetland_2020_ssp126 <- binary_wetland_map_hist & !binary_wetland_map_2020_ssp126
plot(exposure_wetland_2020_ssp126)

combined_wetland_change_2020_ssp126 <- classify(
  refugia_wetland_2020_ssp126, cbind(1, 1))  # Start with refugia: value 1
combined_wetland_change_2020_ssp126[exposure_wetland_2020_ssp126 == 1] <- 2  # Set exposure to value 2
combined_wetland_change_2020_ssp126[refugia_wetland_2020_ssp126 == 0 & exposure_wetland_2020_ssp126 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")

# Step 3: Plot the heatmap
plot(combined_wetland_change_2020_ssp126, col = colors, legend = FALSE, main = "forest Refugia and Exposure (2020 SSP126)")


refugia_wetland_2020_ssp245 <- binary_wetland_map_hist & binary_wetland_map_2020_ssp245
plot(refugia_wetland_2020_ssp245)
exposure_wetland_2020_ssp245 <- binary_wetland_map_hist & !binary_wetland_map_2020_ssp245
plot(exposure_wetland_2020_ssp245)

combined_wetland_change_2020_ssp245 <- classify(
  refugia_wetland_2020_ssp245, cbind(1, 1))  # Start with refugia: value 1
combined_wetland_change_2020_ssp245[exposure_wetland_2020_ssp245 == 1] <- 2  # Set exposure to value 2
combined_wetland_change_2020_ssp245[refugia_wetland_2020_ssp245 == 0 & exposure_wetland_2020_ssp245 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")

# Step 3: Plot the heatmap
plot(combined_wetland_change_2020_ssp245, col = colors, legend = FALSE, main = "Water Refugia and Exposure (2020 SSP245)")


refugia_wetland_2020_ssp585 <- binary_wetland_map_hist & binary_wetland_map_2020_ssp585
plot(refugia_wetland_2020_ssp585)
exposure_wetland_2020_ssp585 <- binary_wetland_map_hist & !binary_wetland_map_2020_ssp585
plot(exposure_wetland_2020_ssp585)

combined_wetland_change_2020_ssp585 <- classify(
  refugia_wetland_2020_ssp585, cbind(1, 1))  # Start with refugia: value 1
combined_wetland_change_2020_ssp585[exposure_wetland_2020_ssp585 == 1] <- 2  # Set exposure to value 2
combined_wetland_change_2020_ssp585[refugia_wetland_2020_ssp585 == 0 & exposure_wetland_2020_ssp585 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")

# Step 3: Plot the heatmap
plot(combined_wetland_change_2020_ssp585, col = colors, legend = FALSE, main = "Water Refugia and Exposure (2020 SSP245)")



refugia_wetland_2050_ssp126 <- binary_wetland_map_hist & binary_wetland_map_2050_ssp126
plot(refugia_wetland_2050_ssp126)
exposure_wetland_2050_ssp126 <- binary_wetland_map_hist & !binary_wetland_map_2050_ssp126
plot(exposure_wetland_2050_ssp126)

combined_wetland_change_2050_ssp126 <- classify(
  refugia_wetland_2050_ssp126, cbind(1, 1))  # Start with refugia: value 1
combined_wetland_change_2050_ssp126[exposure_wetland_2050_ssp126 == 1] <- 2  # Set exposure to value 2
combined_wetland_change_2050_ssp126[refugia_wetland_2050_ssp126 == 0 & exposure_wetland_2050_ssp126 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")

# Step 3: Plot the heatmap
plot(combined_wetland_change_2050_ssp126, col = colors, legend = FALSE, main = "Water Refugia and Exposure (2050 SSP126)")


refugia_wetland_2050_ssp245 <- binary_wetland_map_hist & binary_wetland_map_2050_ssp245
plot(refugia_wetland_2050_ssp245)
exposure_wetland_2050_ssp245 <- binary_wetland_map_hist & !binary_wetland_map_2050_ssp245
plot(exposure_wetland_2050_ssp245)

combined_wetland_change_2050_ssp245 <- classify(
  refugia_wetland_2050_ssp245, cbind(1, 1))  # Start with refugia: value 1
combined_wetland_change_2050_ssp245[exposure_wetland_2050_ssp245 == 1] <- 2  # Set exposure to value 2
combined_wetland_change_2050_ssp245[refugia_wetland_2050_ssp245 == 0 & exposure_wetland_2050_ssp245 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")

# Step 3: Plot the heatmap
plot(combined_wetland_change_2050_ssp245, col = colors, legend = FALSE, main = "Water Refugia and Exposure (2050 SSP245)")


refugia_wetland_2050_ssp585 <- binary_wetland_map_hist & binary_wetland_map_2050_ssp585
plot(refugia_wetland_2050_ssp585)
exposure_wetland_2050_ssp585 <- binary_wetland_map_hist & !binary_wetland_map_2050_ssp585
plot(exposure_wetland_2050_ssp585)

combined_wetland_change_2050_ssp585 <- classify(
  refugia_wetland_2050_ssp585, cbind(1, 1))  # Start with refugia: value 1
combined_wetland_change_2050_ssp585[exposure_wetland_2050_ssp585 == 1] <- 2  # Set exposure to value 2
combined_wetland_change_2050_ssp585[refugia_wetland_2050_ssp585 == 0 & exposure_wetland_2050_ssp585 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")

# Step 3: Plot the heatmap
plot(combined_wetland_change_2050_ssp585, col = colors, legend = FALSE, main = "Water Refugia and Exposure (2050 SSP585)")


refugia_wetland_2080_ssp126 <- binary_wetland_map_hist & binary_wetland_map_2080_ssp126
plot(refugia_wetland_2080_ssp126)
exposure_wetland_2080_ssp126 <- binary_wetland_map_hist & !binary_wetland_map_2080_ssp126
plot(exposure_wetland_2080_ssp126)

combined_wetland_change_2080_ssp126 <- classify(
  refugia_wetland_2080_ssp126, cbind(1, 1))  # Start with refugia: value 1
combined_wetland_change_2080_ssp126[exposure_wetland_2080_ssp126 == 1] <- 2  # Set exposure to value 2
combined_wetland_change_2080_ssp126[refugia_wetland_2080_ssp126 == 0 & exposure_wetland_2080_ssp126 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")

# Step 3: Plot the heatmap
plot(combined_wetland_change_2080_ssp126, col = colors, legend = FALSE, main = "Water Refugia and Exposure (2050 SSP126)")


refugia_wetland_2080_ssp245 <- binary_wetland_map_hist & binary_wetland_map_2080_ssp245
plot(refugia_wetland_2080_ssp245)
exposure_wetland_2080_ssp245 <- binary_wetland_map_hist & !binary_wetland_map_2080_ssp245
plot(exposure_wetland_2080_ssp245)

combined_wetland_change_2080_ssp245 <- classify(
  refugia_wetland_2080_ssp245, cbind(1, 1))  # Start with refugia: value 1
combined_wetland_change_2080_ssp245[exposure_wetland_2080_ssp245 == 1] <- 2  # Set exposure to value 2
combined_wetland_change_2080_ssp245[refugia_wetland_2080_ssp245 == 0 & exposure_wetland_2080_ssp245 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")

# Step 3: Plot the heatmap
plot(combined_wetland_change_2080_ssp245, col = colors, legend = FALSE, main = "Water Refugia and Exposure (2050 SSP245)")


refugia_wetland_2080_ssp585 <- binary_wetland_map_hist & binary_wetland_map_2080_ssp585
plot(refugia_wetland_2080_ssp585)
exposure_wetland_2080_ssp585 <- binary_wetland_map_hist & !binary_wetland_map_2080_ssp585
plot(exposure_wetland_2080_ssp585)

combined_wetland_change_2080_ssp585 <- classify(
  refugia_wetland_2080_ssp585, cbind(1, 1))  # Start with refugia: value 1
combined_wetland_change_2080_ssp585[exposure_wetland_2080_ssp585 == 1] <- 2  # Set exposure to value 2
combined_wetland_change_2080_ssp585[refugia_wetland_2080_ssp585 == 0 & exposure_wetland_2080_ssp585 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")


# Step 3: Plot the heatmap
plot(combined_wetland_change_2080_ssp585, col = colors, legend = FALSE, main = "wetland Refugia and Exposure (2050 SSP585)")


writeRaster(combined_wetland_change_2020_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/wetland/refugia/threshold/combined_wetland_refugia_exposure_2020_ssp126_updated_50.tif",
            overwrite = TRUE)

writeRaster(combined_wetland_change_2020_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/wetland/refugia/threshold/combined_wetland_refugia_exposure_2020_ssp245_updated_50.tif",
            overwrite = TRUE)

writeRaster(combined_wetland_change_2020_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/wetland/refugia/threshold/combined_wetland_refugia_exposure_2020_ssp585_updated_50.tif",
            overwrite = TRUE)

writeRaster(combined_wetland_change_2050_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/wetland/refugia/threshold/combined_wetland_refugia_exposure_2050_ssp126_updated_50.tif",
            overwrite = TRUE)

writeRaster(combined_wetland_change_2050_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/wetland/refugia/threshold/combined_wetland_refugia_exposure_2050_ssp245_updated_50.tif",
            overwrite = TRUE)

writeRaster(combined_wetland_change_2050_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/wetland/refugia/threshold/combined_wetland_refugia_exposure_2050_ssp585_updated_50.tif",
            overwrite = TRUE)

writeRaster(combined_wetland_change_2080_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/wetland/refugia/threshold/combined_wetland_refugia_exposure_2080_ssp126_updated_50.tif",
            overwrite = TRUE)


writeRaster(combined_wetland_change_2080_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/wetland/refugia/threshold/combined_wetland_refugia_exposure_2080_ssp245_updated_50.tif",
            overwrite = TRUE)

writeRaster(combined_wetland_change_2080_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/wetland/refugia/threshold/combined_wetland_refugia_exposure_2080_ssp585_updated_50.tif",
            overwrite = TRUE)



# convert heat maps to polygon
combined_wetland_change_polygon_2020_ssp126 <- as.polygons(combined_wetland_change_2020_ssp126, dissolve = TRUE)
# Save as a shapefile
writeVector(combined_wetland_change_polygon_2020_ssp126, "F:/Uillinois_data/analysis/habitat_suitability/RF/wetland/refugia/threshold/combined_wetland_refugia_exposure_2020_ssp126_updated_50.shp", filetype = "ESRI Shapefile", overwrite = TRUE)

combined_wetland_change_polygon_2020_ssp245 <- as.polygons(combined_wetland_change_2020_ssp245, dissolve = TRUE)
writeVector(combined_wetland_change_polygon_2020_ssp245, "F:/Uillinois_data/analysis/habitat_suitability/RF/wetland/refugia/threshold/combined_wetland_refugia_exposure_2020_ssp245_updated_50.shp", filetype = "ESRI Shapefile", overwrite = TRUE)
wetland
combined_wetland_change_polygon_2020_ssp585 <- as.polygons(combined_wetland_change_2020_ssp585, dissolve = TRUE)
writeVector(combined_wetland_change_polygon_2020_ssp585, "F:/Uillinois_data/analysis/habitat_suitability/RF/wetland/refugia/threshold/combined_wetland_refugia_exposure_2020_ssp585_updated_50.shp", filetype = "ESRI Shapefile", overwrite = TRUE)


combined_wetland_change_polygon_2050_ssp126 <- as.polygons(combined_wetland_change_2050_ssp126, dissolve = TRUE)
writeVector(combined_wetland_change_polygon_2050_ssp126, "F:/Uillinois_data/analysis/habitat_suitability/RF/wetland/refugia/threshold/combined_wetland_refugia_exposure_2050_ssp126_updated_50.shp", filetype = "ESRI Shapefile", overwrite = TRUE)

combined_wetland_change_polygon_2050_ssp245 <- as.polygons(combined_wetland_change_2050_ssp245, dissolve = TRUE)
writeVector(combined_wetland_change_polygon_2050_ssp245, "F:/Uillinois_data/analysis/habitat_suitability/RF/wetland/refugia/threshold/combined_wetland_refugia_exposure_2050_ssp245_updated_50.shp", filetype = "ESRI Shapefile", overwrite = TRUE)

combined_wetland_change_polygon_2050_ssp585 <- as.polygons(combined_wetland_change_2050_ssp585, dissolve = TRUE)
writeVector(combined_wetland_change_polygon_2050_ssp585, "F:/Uillinois_data/analysis/habitat_suitability/RF/wetland/refugia/threshold/combined_wetland_refugia_exposure_2050_ssp585_updated_50.shp", filetype = "ESRI Shapefile", overwrite = TRUE)


combined_wetland_change_polygon_2080_ssp126 <- as.polygons(combined_wetland_change_2080_ssp126, dissolve = TRUE)
writeVector(combined_wetland_change_polygon_2080_ssp126, "F:/Uillinois_data/analysis/habitat_suitability/RF/wetland/refugia/threshold/combined_wetland_refugia_exposure_2080_ssp126_updated_50.shp", filetype = "ESRI Shapefile", overwrite = TRUE)

combined_wetland_change_polygon_2080_ssp245 <- as.polygons(combined_wetland_change_2080_ssp245, dissolve = TRUE)
writeVector(combined_wetland_change_polygon_2080_ssp245, "F:/Uillinois_data/analysis/habitat_suitability/RF/wetland/refugia/threshold/combined_wetland_refugia_exposure_2080_ssp245_updated_50.shp", filetype = "ESRI Shapefile", overwrite = TRUE)

combined_wetland_change_polygon_2080_ssp585 <- as.polygons(combined_wetland_change_2080_ssp585, dissolve = TRUE)
writeVector(combined_wetland_change_polygon_2080_ssp585, "F:/Uillinois_data/analysis/habitat_suitability/RF/wetland/refugia/threshold/combined_wetland_refugia_exposure_2080_ssp585_updated_50.shp", filetype = "ESRI Shapefile", overwrite = TRUE)



# Combine results into a data frame

# Refugia

cell_area_km2 <- 1  # each pixel is 1 km² due to 1000m x 1000m resolution

wetland_refugia_hist_2020_ssp126_area <- global(refugia_wetland_2020_ssp126, "sum", na.rm = TRUE)[[1]] * cell_area_km2
wetland_refugia_hist_2020_ssp245_area <- global(refugia_wetland_2020_ssp245, "sum", na.rm = TRUE)[[1]] * cell_area_km2
wetland_refugia_hist_2020_ssp585_area <- global(refugia_wetland_2020_ssp585, "sum", na.rm = TRUE)[[1]] * cell_area_km2

wetland_refugia_hist_2050_ssp126_area <- global(refugia_wetland_2050_ssp126, "sum", na.rm = TRUE)[[1]] * cell_area_km2
wetland_refugia_hist_2050_ssp245_area <- global(refugia_wetland_2050_ssp245, "sum", na.rm = TRUE)[[1]] * cell_area_km2
wetland_refugia_hist_2050_ssp585_area <- global(refugia_wetland_2050_ssp585, "sum", na.rm = TRUE)[[1]] * cell_area_km2

wetland_refugia_hist_2080_ssp126_area <- global(refugia_wetland_2080_ssp126, "sum", na.rm = TRUE)[[1]] * cell_area_km2
wetland_refugia_hist_2080_ssp245_area <- global(refugia_wetland_2080_ssp245, "sum", na.rm = TRUE)[[1]] * cell_area_km2
wetland_refugia_hist_2080_ssp585_area <- global(refugia_wetland_2080_ssp585, "sum", na.rm = TRUE)[[1]] * cell_area_km2


wetland_refugia_df <- data.frame(
  TimePeriod = c("2020", "2020", "2020",
                 "2050", "2050", "2050",
                 "2080", "2080", "2080"),
  Scenario = c("ssp126", "ssp245", "ssp585",
               "ssp126", "ssp245", "ssp585",
               "ssp126", "ssp245", "ssp585"),
  RefugiaArea_km2 = c(wetland_refugia_hist_2020_ssp126_area,
                      wetland_refugia_hist_2020_ssp245_area,
                      wetland_refugia_hist_2020_ssp585_area,
                      wetland_refugia_hist_2050_ssp126_area,
                      wetland_refugia_hist_2050_ssp245_area,
                      wetland_refugia_hist_2050_ssp585_area,
                      wetland_refugia_hist_2080_ssp126_area,
                      wetland_refugia_hist_2080_ssp245_area,
                      wetland_refugia_hist_2080_ssp585_area)
)

# Write to CSV
write.csv(wetland_refugia_df, "F:/Uillinois_data/analysis/habitat_suitability/RF/wetland/refugia/threshold/wetland_refugia_areas_by_scenario_updated_90.csv", row.names = FALSE)


# Exposure

wetland_exposure_hist_2020_ssp126_area <- global(exposure_wetland_2020_ssp126, "sum", na.rm = TRUE)[[1]] * cell_area_km2
wetland_exposure_hist_2020_ssp245_area <- global(exposure_wetland_2020_ssp245, "sum", na.rm = TRUE)[[1]] * cell_area_km2
wetland_exposure_hist_2020_ssp585_area <- global(exposure_wetland_2020_ssp585, "sum", na.rm = TRUE)[[1]] * cell_area_km2

wetland_exposure_hist_2050_ssp126_area <- global(exposure_wetland_2050_ssp126, "sum", na.rm = TRUE)[[1]] * cell_area_km2
wetland_exposure_hist_2050_ssp245_area <- global(exposure_wetland_2050_ssp245, "sum", na.rm = TRUE)[[1]] * cell_area_km2
wetland_exposure_hist_2050_ssp585_area <- global(exposure_wetland_2050_ssp585, "sum", na.rm = TRUE)[[1]] * cell_area_km2

wetland_exposure_hist_2080_ssp126_area <- global(exposure_wetland_2080_ssp126, "sum", na.rm = TRUE)[[1]] * cell_area_km2
wetland_exposure_hist_2080_ssp245_area <- global(exposure_wetland_2080_ssp245, "sum", na.rm = TRUE)[[1]] * cell_area_km2
wetland_exposure_hist_2080_ssp585_area <- global(exposure_wetland_2080_ssp585, "sum", na.rm = TRUE)[[1]] * cell_area_km2


wetland_exposure_df <- data.frame(
  TimePeriod = c("2020", "2020", "2020",
                 "2050", "2050", "2050",
                 "2080", "2080", "2080"),
  Scenario = c("ssp126", "ssp245", "ssp585",
               "ssp126", "ssp245", "ssp585",
               "ssp126", "ssp245", "ssp585"),
  RefugiaArea_km2 = c(wetland_exposure_hist_2020_ssp126_area,
                      wetland_exposure_hist_2020_ssp245_area,
                      wetland_exposure_hist_2020_ssp585_area,
                      wetland_exposure_hist_2050_ssp126_area,
                      wetland_exposure_hist_2050_ssp245_area,
                      wetland_exposure_hist_2050_ssp585_area,
                      wetland_exposure_hist_2080_ssp126_area,
                      wetland_exposure_hist_2080_ssp245_area,
                      wetland_exposure_hist_2080_ssp585_area)
)

# Write to CSV
write.csv(wetland_exposure_df, "F:/Uillinois_data/analysis/habitat_suitability/RF/wetland/refugia/threshold/wetland_exposure_areas_by_scenario_updated_50.csv", row.names = FALSE)

# Count the number of cells with forest (value == 1)
wetland_area_km2 <- sum(values(wetland) == 1, na.rm = TRUE)

cat("Total wetland area (km²):", wetland_area_km2, "\n")

# Step 1: Count the number of wetland pixels (value == 1)
wetland_cells <- global(binary_wetland_map_hist == 1, "sum", na.rm = TRUE)[1]
wetland_cells

# Step 2: Calculate the total area (1 km² per pixel)
wetland_area_km2 <- wetland_cells * 1  # since each pixel = 1 km²

wetland_refugia <- data.frame(
  Year = c("2020s", "2020s", "2020s", "2050s", "2050s", "2050s", "2080s", "2080s", "2080s"),
  Emission_Scenario = c("ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585"),
  Refugia = c(84.2, 47.6, 36.7, 8.8, 6.5, 1.5, 10.3, 0.7, 0.1)
)


# Convert Year to an ordered factor for proper sequencing
wetland_refugia$Year <- factor(wetland_refugia$Year, levels = c("2020s", "2050s", "2080s"))

# Plot the refugia data and customized axis lines
ggplot(wetland_refugia, aes(x = Year, y = Refugia, group = Emission_Scenario, color = Emission_Scenario)) +
  geom_line(size = 1.2) +
  geom_point(size = 3) +
  labs(title = "Projected Wetland Refugia for the MW CASC Region",
       x = "Time Period",
       y = "Percentage Refugia",
       color = "Emission Scenario") +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank(),  # Remove minor grid lines
    axis.line = element_line(size = 1, color = "black"),  # Bold x and y axis lines
    axis.text = element_text(size = 11),  # Adjust axis text size
    axis.title = element_text(size = 12, face = "bold")  # Bold x and y axis labels
  )


# Repeat for exposure

# Create the data frame
wetland_exposure_data <- data.frame(
  Year = c("2020s", "2020s", "2020s", "2050s", "2050s", "2050s", "2080s", "2080s", "2080s"),
  Emission_Scenario = c("ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585"),
  Vulnerability = c(15.8, 52.4, 63.3, 91.2, 94, 98.5, 89.7, 99.3, 99.9)
)

# Convert Year to an ordered factor for proper sequencing
wetland_exposure_data$Year <- factor(wetland_exposure_data$Year, levels = c("2020s", "2050s", "2080s"))

# Plot the vulnerabile areas data
ggplot(wetland_exposure_data, aes(x = Year, y = Vulnerability, group = Emission_Scenario, color = Emission_Scenario)) +
  geom_line(size = 1.2) +
  geom_point(size = 3) +
  labs(title = "Projected Wetland Exposure Areas for the MW CASC Region",
       x = "Time Period",
       y = "Percentage Exposure",
       color = "Emission Scenario") +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank(),  # Remove minor grid lines
    axis.line = element_line(size = 1, color = "black"),  # Bold x and y axis lines
    axis.text = element_text(size = 11),  # Adjust axis text size
    axis.title = element_text(size = 12, face = "bold")  # Bold x and y axis labels
  )


# do for 90th percentile
# Count the number of cells with forest (value == 1)
wetland_area_km2 <- sum(values(binary_wetland_map_hist) == 1, na.rm = TRUE)

cat("Total wetland area (km²):", wetland_area_km2, "\n")

# Step 1: Count the number of wetland pixels (value == 1)
wetland_cells <- global(binary_wetland_map_hist == 1, "sum", na.rm = TRUE)[1]
wetland_cells

# Step 2: Calculate the total area (1 km² per pixel)
wetland_area_km2 <- wetland_cells * 1  # since each pixel = 1 km²

wetland_refugia <- data.frame(
  Year = c("2020s", "2020s", "2020s", "2050s", "2050s", "2050s", "2080s", "2080s", "2080s"),
  Emission_Scenario = c("ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585"),
  Refugia = c(88.1, 58.6, 46.4, 3.9, 1.2, 0.1, 4.3, 0, 0)
)


# Convert Year to an ordered factor for proper sequencing
wetland_refugia$Year <- factor(wetland_refugia$Year, levels = c("2020s", "2050s", "2080s"))

# Plot the refugia data and customized axis lines
ggplot(wetland_refugia, aes(x = Year, y = Refugia, group = Emission_Scenario, color = Emission_Scenario)) +
  geom_line(size = 1.2) +
  geom_point(size = 3) +
  labs(title = "Projected Wetland Refugia for the MW CASC Region",
       x = "Time Period",
       y = "Percentage Refugia",
       color = "Emission Scenario") +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank(),  # Remove minor grid lines
    axis.line = element_line(size = 1, color = "black"),  # Bold x and y axis lines
    axis.text = element_text(size = 11),  # Adjust axis text size
    axis.title = element_text(size = 12, face = "bold")  # Bold x and y axis labels
  )


# Repeat for exposure

# Create the data frame
wetland_exposure_data <- data.frame(
  Year = c("2020s", "2020s", "2020s", "2050s", "2050s", "2050s", "2080s", "2080s", "2080s"),
  Emission_Scenario = c("ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585"),
  Vulnerability = c(11.9, 41.4, 53.6, 96.1, 98.8, 99.9, 95.7, 100, 100)
)

# Convert Year to an ordered factor for proper sequencing
wetland_exposure_data$Year <- factor(wetland_exposure_data$Year, levels = c("2020s", "2050s", "2080s"))

# Plot the vulnerabile areas data
ggplot(wetland_exposure_data, aes(x = Year, y = Vulnerability, group = Emission_Scenario, color = Emission_Scenario)) +
  geom_line(size = 1.2) +
  geom_point(size = 3) +
  labs(title = "Projected Wetland Exposure Areas for the MW CASC Region",
       x = "Time Period",
       y = "Percentage Exposure",
       color = "Emission Scenario") +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank(),  # Remove minor grid lines
    axis.line = element_line(size = 1, color = "black"),  # Bold x and y axis lines
    axis.text = element_text(size = 11),  # Adjust axis text size
    axis.title = element_text(size = 12, face = "bold")  # Bold x and y axis labels
  )


# do for 70th percentile
# Count the number of cells with forest (value == 1)
wetland_area_km2 <- sum(values(binary_wetland_map_hist) == 1, na.rm = TRUE)

cat("Total wetland area (km²):", wetland_area_km2, "\n")

# Step 1: Count the number of wetland pixels (value == 1)
wetland_cells <- global(binary_wetland_map_hist == 1, "sum", na.rm = TRUE)[1]
wetland_cells

# Step 2: Calculate the total area (1 km² per pixel)
wetland_area_km2 <- wetland_cells * 1  # since each pixel = 1 km²

wetland_refugia <- data.frame(
  Year = c("2020s", "2020s", "2020s", "2050s", "2050s", "2050s", "2080s", "2080s", "2080s"),
  Emission_Scenario = c("ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585"),
  Refugia = c(92.1, 76.5, 69.6, 27.7, 15.6, 5.4, 25.8, 2.2, 0.1)
)


# Convert Year to an ordered factor for proper sequencing
wetland_refugia$Year <- factor(wetland_refugia$Year, levels = c("2020s", "2050s", "2080s"))

# Plot the refugia data and customized axis lines
ggplot(wetland_refugia, aes(x = Year, y = Refugia, group = Emission_Scenario, color = Emission_Scenario)) +
  geom_line(size = 1.2) +
  geom_point(size = 3) +
  labs(title = "Projected Wetland Refugia for the MW CASC Region",
       x = "Time Period",
       y = "Percentage Refugia",
       color = "Emission Scenario") +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank(),  # Remove minor grid lines
    axis.line = element_line(size = 1, color = "black"),  # Bold x and y axis lines
    axis.text = element_text(size = 11),  # Adjust axis text size
    axis.title = element_text(size = 12, face = "bold")  # Bold x and y axis labels
  )


# Repeat for exposure

# Create the data frame
wetland_exposure_data <- data.frame(
  Year = c("2020s", "2020s", "2020s", "2050s", "2050s", "2050s", "2080s", "2080s", "2080s"),
  Emission_Scenario = c("ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585"),
  Vulnerability = c(8, 23.5, 30.4, 72.3, 84.4, 94.6, 74.2, 97.8, 99.9)
)

# Convert Year to an ordered factor for proper sequencing
wetland_exposure_data$Year <- factor(wetland_exposure_data$Year, levels = c("2020s", "2050s", "2080s"))

# Plot the vulnerabile areas data
ggplot(wetland_exposure_data, aes(x = Year, y = Vulnerability, group = Emission_Scenario, color = Emission_Scenario)) +
  geom_line(size = 1.2) +
  geom_point(size = 3) +
  labs(title = "Projected Wetland Exposure Areas for the MW CASC Region",
       x = "Time Period",
       y = "Percentage Exposure",
       color = "Emission Scenario") +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank(),  # Remove minor grid lines
    axis.line = element_line(size = 1, color = "black"),  # Bold x and y axis lines
    axis.text = element_text(size = 11),  # Adjust axis text size
    axis.title = element_text(size = 12, face = "bold")  # Bold x and y axis labels
  )


# do for 50th percentile
# Count the number of cells with forest (value == 1)
wetland_area_km2 <- sum(values(wetland) == 1, na.rm = TRUE)

cat("Total wetland area (km²):", wetland_area_km2, "\n")

# Step 1: Count the number of wetland pixels (value == 1)
wetland_cells <- global(binary_wetland_map_hist == 1, "sum", na.rm = TRUE)[1]
wetland_cells

# Step 2: Calculate the total area (1 km² per pixel)
wetland_area_km2 <- wetland_cells * 1  # since each pixel = 1 km²

wetland_refugia <- data.frame(
  Year = c("2020s", "2020s", "2020s", "2050s", "2050s", "2050s", "2080s", "2080s", "2080s"),
  Emission_Scenario = c("ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585"),
  Refugia = c(93.1, 85.7, 82.4, 52.6, 41.7, 24.2, 51.7, 17, 3.1)
)


# Convert Year to an ordered factor for proper sequencing
wetland_refugia$Year <- factor(wetland_refugia$Year, levels = c("2020s", "2050s", "2080s"))

# Plot the refugia data and customized axis lines
ggplot(wetland_refugia, aes(x = Year, y = Refugia, group = Emission_Scenario, color = Emission_Scenario)) +
  geom_line(size = 1.2) +
  geom_point(size = 3) +
  labs(title = "Projected Wetland Refugia for the MW CASC Region",
       x = "Time Period",
       y = "Percentage Refugia",
       color = "Emission Scenario") +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank(),  # Remove minor grid lines
    axis.line = element_line(size = 1, color = "black"),  # Bold x and y axis lines
    axis.text = element_text(size = 11),  # Adjust axis text size
    axis.title = element_text(size = 12, face = "bold")  # Bold x and y axis labels
  )


# Repeat for exposure

# Create the data frame
wetland_exposure_data <- data.frame(
  Year = c("2020s", "2020s", "2020s", "2050s", "2050s", "2050s", "2080s", "2080s", "2080s"),
  Emission_Scenario = c("ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585"),
  Vulnerability = c(7, 14.3, 17.6, 47.4, 58.3, 75.8, 48.3, 83, 97)
)

# Convert Year to an ordered factor for proper sequencing
wetland_exposure_data$Year <- factor(wetland_exposure_data$Year, levels = c("2020s", "2050s", "2080s"))

# Plot the vulnerabile areas data
ggplot(wetland_exposure_data, aes(x = Year, y = Vulnerability, group = Emission_Scenario, color = Emission_Scenario)) +
  geom_line(size = 1.2) +
  geom_point(size = 3) +
  labs(title = "Projected Wetland Exposure Areas for the MW CASC Region",
       x = "Time Period",
       y = "Percentage Exposure",
       color = "Emission Scenario") +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank(),  # Remove minor grid lines
    axis.line = element_line(size = 1, color = "black"),  # Bold x and y axis lines
    axis.text = element_text(size = 11),  # Adjust axis text size
    axis.title = element_text(size = 12, face = "bold")  # Bold x and y axis labels
  )



# ----------------------------------------------------------------



# Test RandomForest model for built-up

# resample forest to align with predictors
urban_r <- resample(urban, EMT, method = "near")
r_stack <- c(EMT, EXT, PPT_at, PPT_sm, PPT_wt, urban_r)
names(r_stack) <- c("EMT", "EXT", "PPT_at", "PPT_sm",
                    "PPT_wt", "urban")

# prepare data for modeling

# Convert to data frame
df <- as.data.frame(r_stack, xy = TRUE, na.rm = TRUE)
df$urban <- ifelse(df$urban >= 1, 1, 0)


# --------------------------------------------
# Step 2: Sample 10k presence & background points
# --------------------------------------------
set.seed(123)
presence_df <- df[df$urban == 1, c("x", "y")]
background_df <- df[df$urban == 0, c("x", "y")]

n_presence <- min(100000, nrow(presence_df))
n_background <- min(100000, nrow(background_df))

presence_points <- presence_df[sample(1:nrow(presence_df), n_presence), ]
background_points <- background_df[sample(1:nrow(background_df), n_background), ]

# --------------------------------------------
# Step 3: Train/test split (80/20)
# --------------------------------------------
train_idx_pres <- sample(1:n_presence, size = 0.8 * n_presence)
train_idx_back <- sample(1:n_background, size = 0.8 * n_background)

train_pres <- presence_points[train_idx_pres, ]
test_pres <- presence_points[-train_idx_pres, ]

train_back <- background_points[train_idx_back, ]
test_back <- background_points[-train_idx_back, ]


# --------------------------------------------
# Step 3: Combine and split into train/test (80/20)
# --------------------------------------------
presence_points$label <- 1
background_points$label <- 0

all_data <- rbind(presence_points, background_points)
train_idx <- sample(1:nrow(all_data), size = 0.8 * nrow(all_data))

train_data <- all_data[train_idx, ]
test_data <- all_data[-train_idx, ]


# Extract predictor values
predictor_values <- extract(predictors_stack_2020_ssp126, train_data[, c("x", "y")])

# Combine and remove NA
model_data <- cbind(label = train_data$label, predictor_values)
model_data <- na.omit(model_data)

# Now convert to data frame
model_data <- as.data.frame(model_data)

# Now safely convert label to a factor
model_data$label <- factor(model_data$label, levels = c(0, 1))


# Train RF model
rf_model <- randomForest(
  label ~ ., 
  data = model_data,
  ntree = 50,
  importance = TRUE
)

# Get variable importance (Mean Decrease in Gini)
var_imp <- importance(rf_model)

# Extract Gini importance and convert to data frame
var_imp_df <- data.frame(
  Variable = rownames(var_imp),
  Gini = var_imp[, "MeanDecreaseGini"]
)

# Calculate percentage contribution
var_imp_df$PercentContribution <- 100 * var_imp_df$Gini / sum(var_imp_df$Gini)

# Round for display
var_imp_df$PercentContribution <- round(var_imp_df$PercentContribution, 2)

# Sort descending
var_imp_df <- var_imp_df[order(-var_imp_df$PercentContribution), ]

# View
print(var_imp_df)


# prepare predictors for mapping by converting to terra
predictors_stack_terra <- rast(predictors_stack)

names(predictors_stack_terra) <- c("EMT", "EXT", "PPT_at", "PPT_sm", "PPT_wt")
rf_pred_prob <- terra::predict(predictors_stack_terra, rf_model, type = "prob", index = 2)
plot(rf_pred_prob, main = "Predicted Suitability (RF)")

predictors_stack_terra_2020_ssp126 <- rast(predictors_stack_2020_ssp126)
names(predictors_stack_terra_2020_ssp126) <- c("EMT", "EXT", "PPT_at", "PPT_sm", "PPT_wt")
rf_pred_prob_2020_ssp126 <- terra::predict(predictors_stack_terra_2020_ssp126, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2020_ssp126, main = "Predicted Suitability (RF)")

predictors_stack_terra_2020_ssp245 <- rast(predictors_stack_2020_ssp245)
names(predictors_stack_terra_2020_ssp245) <- c("EMT", "EXT", "PPT_at", "PPT_sm", "PPT_wt")
rf_pred_prob_2020_ssp245 <- terra::predict(predictors_stack_terra_2020_ssp245, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2020_ssp245, main = "Predicted Suitability (RF)")

predictors_stack_terra_2020_ssp585 <- rast(predictors_stack_2020_ssp585)
names(predictors_stack_terra_2020_ssp585) <- c("EMT", "EXT", "PPT_at", "PPT_sm", "PPT_wt")
rf_pred_prob_2020_ssp585 <- terra::predict(predictors_stack_terra_2020_ssp585, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2020_ssp585, main = "Predicted Suitability (RF)")

predictors_stack_terra_2050_ssp126 <- rast(predictors_stack_2050_ssp126)
names(predictors_stack_terra_2050_ssp126) <- c("EMT", "EXT", "PPT_at", "PPT_sm", "PPT_wt")
rf_pred_prob_2050_ssp126 <- terra::predict(predictors_stack_terra_2050_ssp126, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2050_ssp126, main = "Predicted Suitability (RF)")


predictors_stack_terra_2050_ssp245 <- rast(predictors_stack_2050_ssp245)
names(predictors_stack_terra_2050_ssp245) <- c("EMT", "EXT", "PPT_at", "PPT_sm", "PPT_wt")
rf_pred_prob_2050_ssp245 <- terra::predict(predictors_stack_terra_2050_ssp245, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2050_ssp245, main = "Predicted Suitability (RF)")

predictors_stack_terra_2050_ssp585 <- rast(predictors_stack_2050_ssp585)
names(predictors_stack_terra_2050_ssp585) <- c("EMT", "EXT", "PPT_at", "PPT_sm", "PPT_wt")
rf_pred_prob_2050_ssp585 <- terra::predict(predictors_stack_terra_2050_ssp585, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2050_ssp585, main = "Predicted Suitability (RF)")


predictors_stack_terra_2080_ssp126 <- rast(predictors_stack_2080_ssp126)
names(predictors_stack_terra_2080_ssp126) <- c("EMT", "EXT", "PPT_at", "PPT_sm", "PPT_wt")
rf_pred_prob_2080_ssp126 <- terra::predict(predictors_stack_terra_2080_ssp126, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2080_ssp126, main = "Predicted Suitability (RF)")

predictors_stack_terra_2080_ssp245 <- rast(predictors_stack_2080_ssp245)
names(predictors_stack_terra_2080_ssp245) <- c("EMT", "EXT", "PPT_at", "PPT_sm", "PPT_wt")
rf_pred_prob_2080_ssp245 <- terra::predict(predictors_stack_terra_2080_ssp245, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2080_ssp245, main = "Predicted Suitability (RF)")

predictors_stack_terra_2080_ssp585 <- rast(predictors_stack_2080_ssp585)
names(predictors_stack_terra_2080_ssp585) <- c("EMT", "EXT", "PPT_at", "PPT_sm", "PPT_wt")
rf_pred_prob_2080_ssp585 <- terra::predict(predictors_stack_terra_2080_ssp585, rf_model, type = "prob", index = 2)
plot(rf_pred_prob_2080_ssp585, main = "Predicted Suitability (RF)")


writeRaster(rf_pred_prob,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/urban/suitability/urban_suitability_hist.tif",
            overwrite = TRUE)

writeRaster(rf_pred_prob_2020_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/urban/suitability/urban_suitability_2020_ssp126.tif",
            overwrite = TRUE)

writeRaster(rf_pred_prob_2020_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/urban/suitability/urban_suitability_2020_ssp245.tif",
            overwrite = TRUE)

writeRaster(rf_pred_prob_2020_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/urban/suitability/urban_suitability_2020_ssp585.tif",
            overwrite = TRUE)

writeRaster(rf_pred_prob_2050_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/urban/suitability/urban_suitability_2050_ssp126.tif",
            overwrite = TRUE)

writeRaster(rf_pred_prob_2050_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/urban/suitability/urban_suitability_2050_ssp245.tif",
            overwrite = TRUE)

writeRaster(rf_pred_prob_2050_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/urban/suitability/urban_suitability_2050_ssp585.tif",
            overwrite = TRUE)


writeRaster(rf_pred_prob_2080_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/urban/suitability/urban_suitability_2080_ssp126.tif",
            overwrite = TRUE)

writeRaster(rf_pred_prob_2080_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/urban/suitability/urban_suitability_2080_ssp245.tif",
            overwrite = TRUE)

writeRaster(rf_pred_prob_2080_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/urban/suitability/urban_suitability_2080_ssp585.tif",
            overwrite = TRUE)



# --------------------------------------------
# Step 7: Model Evaluation (AUC, TSS)
# --------------------------------------------

# Extract predictors for test data locations
test_predictors <- extract(predictors_stack, test_data[, c("x", "y")])

# Combine label and predictor values
test_model_data <- cbind(label = test_data$label, test_predictors)

# Remove rows with NA values
test_model_data <- na.omit(as.data.frame(test_model_data))

# Predict probability of presence (class 1)
test_pred <- predict(rf_model, newdata = test_model_data, type = "prob")[, 2]

# Predict probabilities for test data (class "1" = presence)
test_pred <- predict(rf_model, newdata = test_data, type = "prob")[, 2]

obs_labels <- as.numeric(as.character(test_model_data$label))  # convert factor to numeric if needed

# Convert obs_labels to factor with levels 0 and 1
obs_labels_factor <- factor(obs_labels, levels = c(0,1))

# Compute ROC object explicitly
roc_obj <- roc(response = obs_labels_factor, predictor = test_pred, quiet = TRUE)
str(roc_obj)
summary(roc_obj)

auc_value <- as.numeric(roc_obj$auc)
cat("AUC =", round(auc_value, 3), "\n")

auc_value_manual <- roc_obj$auc
print(auc_value_manual)


# Get sensitivities, specificities, and thresholds from ROC object
sens <- roc_obj$sensitivities
spec <- roc_obj$specificities
thresh <- roc_obj$thresholds

# Compute TSS = sensitivity + specificity - 1
tss_vals <- sens + spec - 1

# Identify the threshold that gives the maximum TSS
max_tss_index <- which.max(tss_vals)
optimal_threshold <- thresh[max_tss_index]
max_tss <- tss_vals[max_tss_index]

#max_tss <- 0.9
# Output results
cat("Optimal threshold (Max Sens + Spec):", round(optimal_threshold, 3), "\n")
cat("TSS at optimal threshold:", round(max_tss, 3), "\n")

# Create binary presence–absence map
binary_urban_map_hist <- rf_pred_prob >= max_tss
binary_urban_map_2020_ssp126 <- rf_pred_prob_2020_ssp126 >= max_tss
binary_urban_map_2020_ssp245 <- rf_pred_prob_2020_ssp245 >= max_tss
binary_urban_map_2020_ssp585 <- rf_pred_prob_2020_ssp585 >= max_tss

binary_urban_map_2050_ssp126 <- rf_pred_prob_2050_ssp126 >= max_tss
binary_urban_map_2050_ssp245 <- rf_pred_prob_2050_ssp245 >= max_tss
binary_urban_map_2050_ssp585 <- rf_pred_prob_2050_ssp585 >= max_tss

binary_urban_map_2080_ssp126 <- rf_pred_prob_2080_ssp126 >= max_tss
binary_urban_map_2080_ssp245 <- rf_pred_prob_2080_ssp245 >= max_tss
binary_urban_map_2080_ssp585 <- rf_pred_prob_2080_ssp585 >= max_tss

plot(binary_urban_map_hist)
plot(binary_urban_map_2020_ssp126)
plot(binary_urban_map_2020_ssp245)
plot(binary_urban_map_2020_ssp585)

plot(binary_urban_map_2050_ssp126)
plot(binary_urban_map_2050_ssp245)
plot(binary_urban_map_2050_ssp585)

plot(binary_urban_map_2080_ssp126)
plot(binary_urban_map_2080_ssp245)
plot(binary_urban_map_2080_ssp585)

writeRaster(binary_urban_map_hist,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/urban/suitability/binary_urban_map_hist.tif",
            overwrite = TRUE)

writeRaster(binary_urban_map_2020_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/urban/suitability/binary_urban_map_2020_ssp126.tif",
            overwrite = TRUE)

writeRaster(binary_urban_map_2020_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/urban/suitability/binary_urban_map_2020_ssp245.tif",
            overwrite = TRUE)

writeRaster(binary_urban_map_2020_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/urban/suitability/binary_urban_map_2020_ssp585.tif",
            overwrite = TRUE)

writeRaster(binary_urban_map_2050_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/urban/suitability/binary_urban_map_2050_ssp126.tif",
            overwrite = TRUE)

writeRaster(binary_urban_map_2050_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/urban/suitability/binary_urban_map_2050_ssp245.tif",
            overwrite = TRUE)

writeRaster(binary_urban_map_2050_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/urban/suitability/binary_urban_map_2050_ssp585.tif",
            overwrite = TRUE)


writeRaster(binary_urban_map_2080_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/urban/suitability/(binary_urban_map_2080_ssp126.tif",
            overwrite = TRUE)

writeRaster(binary_urban_map_2080_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/urban/suitability/binary_urban_map_2080_ssp245.tif",
            overwrite = TRUE)

writeRaster(binary_urban_map_2080_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/urban/suitability/binary_urban_map_2080_ssp585.tif",
            overwrite = TRUE)


# grassland stable-loss, or refugia

refugia_urban_2020_ssp126 <- binary_urban_map_hist & binary_urban_map_2020_ssp126
plot(refugia_urban_2020_ssp126)
exposure_urban_2020_ssp126 <- binary_urban_map_hist & !binary_urban_map_2020_ssp126
plot(exposure_urban_2020_ssp126)

combined_urban_change_2020_ssp126 <- classify(
  refugia_urban_2020_ssp126, cbind(1, 1))  # Start with refugia: value 1
combined_urban_change_2020_ssp126[exposure_urban_2020_ssp126 == 1] <- 2  # Set exposure to value 2
combined_urban_change_2020_ssp126[refugia_urban_2020_ssp126 == 0 & exposure_urban_2020_ssp126 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")

# Step 3: Plot the heatmap
plot(combined_urban_change_2020_ssp126, col = colors, legend = FALSE, main = "forest Refugia and Exposure (2020 SSP126)")


refugia_urban_2020_ssp245 <- binary_urban_map_hist & binary_urban_map_2020_ssp245
plot(refugia_urban_2020_ssp245)
exposure_urban_2020_ssp245 <- binary_urban_map_hist & !binary_urban_map_2020_ssp245
plot(exposure_urban_2020_ssp245)

combined_urban_change_2020_ssp245 <- classify(
  refugia_urban_2020_ssp245, cbind(1, 1))  # Start with refugia: value 1
combined_urban_change_2020_ssp245[exposure_urban_2020_ssp245 == 1] <- 2  # Set exposure to value 2
combined_urban_change_2020_ssp245[refugia_urban_2020_ssp245 == 0 & exposure_urban_2020_ssp245 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")

# Step 3: Plot the heatmap
plot(combined_urban_change_2020_ssp245, col = colors, legend = FALSE, main = "Water Refugia and Exposure (2020 SSP245)")


refugia_urban_2020_ssp585 <- binary_urban_map_hist & binary_urban_map_2020_ssp585
plot(refugia_urban_2020_ssp585)
exposure_urban_2020_ssp585 <- binary_urban_map_hist & !binary_urban_map_2020_ssp585
plot(exposure_urban_2020_ssp585)

combined_urban_change_2020_ssp585 <- classify(
  refugia_urban_2020_ssp585, cbind(1, 1))  # Start with refugia: value 1
combined_urban_change_2020_ssp585[exposure_urban_2020_ssp585 == 1] <- 2  # Set exposure to value 2
combined_urban_change_2020_ssp585[refugia_urban_2020_ssp585 == 0 & exposure_urban_2020_ssp585 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")

# Step 3: Plot the heatmap
plot(combined_urban_change_2020_ssp585, col = colors, legend = FALSE, main = "Water Refugia and Exposure (2020 SSP245)")



refugia_urban_2050_ssp126 <- binary_urban_map_hist & binary_urban_map_2050_ssp126
plot(refugia_urban_2050_ssp126)
exposure_urban_2050_ssp126 <- binary_urban_map_hist & !binary_urban_map_2050_ssp126
plot(exposure_urban_2050_ssp126)

combined_urban_change_2050_ssp126 <- classify(
  refugia_urban_2050_ssp126, cbind(1, 1))  # Start with refugia: value 1
combined_urban_change_2050_ssp126[exposure_urban_2050_ssp126 == 1] <- 2  # Set exposure to value 2
combined_urban_change_2050_ssp126[refugia_urban_2050_ssp126 == 0 & exposure_urban_2050_ssp126 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")

# Step 3: Plot the heatmap
plot(combined_urban_change_2050_ssp126, col = colors, legend = FALSE, main = "Water Refugia and Exposure (2050 SSP126)")


refugia_urban_2050_ssp245 <- binary_urban_map_hist & binary_urban_map_2050_ssp245
plot(refugia_urban_2050_ssp245)
exposure_urban_2050_ssp245 <- binary_urban_map_hist & !binary_urban_map_2050_ssp245
plot(exposure_urban_2050_ssp245)

combined_urban_change_2050_ssp245 <- classify(
  refugia_urban_2050_ssp245, cbind(1, 1))  # Start with refugia: value 1
combined_urban_change_2050_ssp245[exposure_urban_2050_ssp245 == 1] <- 2  # Set exposure to value 2
combined_urban_change_2050_ssp245[refugia_urban_2050_ssp245 == 0 & exposure_urban_2050_ssp245 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")

# Step 3: Plot the heatmap
plot(combined_urban_change_2050_ssp245, col = colors, legend = FALSE, main = "Water Refugia and Exposure (2050 SSP245)")


refugia_urban_2050_ssp585 <- binary_urban_map_hist & binary_urban_map_2050_ssp585
plot(refugia_urban_2050_ssp585)
exposure_urban_2050_ssp585 <- binary_urban_map_hist & !binary_urban_map_2050_ssp585
plot(exposure_urban_2050_ssp585)

combined_urban_change_2050_ssp585 <- classify(
  refugia_urban_2050_ssp585, cbind(1, 1))  # Start with refugia: value 1
combined_urban_change_2050_ssp585[exposure_urban_2050_ssp585 == 1] <- 2  # Set exposure to value 2
combined_urban_change_2050_ssp585[refugia_urban_2050_ssp585 == 0 & exposure_urban_2050_ssp585 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")

# Step 3: Plot the heatmap
plot(combined_urban_change_2050_ssp585, col = colors, legend = FALSE, main = "Water Refugia and Exposure (2050 SSP585)")


refugia_urban_2080_ssp126 <- binary_urban_map_hist & binary_urban_map_2080_ssp126
plot(refugia_urban_2080_ssp126)
exposure_urban_2080_ssp126 <- binary_urban_map_hist & !binary_urban_map_2080_ssp126
plot(exposure_urban_2080_ssp126)

combined_urban_change_2080_ssp126 <- classify(
  refugia_urban_2080_ssp126, cbind(1, 1))  # Start with refugia: value 1
combined_urban_change_2080_ssp126[exposure_urban_2080_ssp126 == 1] <- 2  # Set exposure to value 2
combined_urban_change_2080_ssp126[refugia_urban_2080_ssp126 == 0 & exposure_urban_2080_ssp126 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")

# Step 3: Plot the heatmap
plot(combined_urban_change_2080_ssp126, col = colors, legend = FALSE, main = "Water Refugia and Exposure (2050 SSP126)")


refugia_urban_2080_ssp245 <- binary_urban_map_hist & binary_urban_map_2080_ssp245
plot(refugia_urban_2080_ssp245)
exposure_urban_2080_ssp245 <- binary_urban_map_hist & !binary_urban_map_2080_ssp245
plot(exposure_urban_2080_ssp245)

combined_urban_change_2080_ssp245 <- classify(
  refugia_urban_2080_ssp245, cbind(1, 1))  # Start with refugia: value 1
combined_urban_change_2080_ssp245[exposure_urban_2080_ssp245 == 1] <- 2  # Set exposure to value 2
combined_urban_change_2080_ssp245[refugia_urban_2080_ssp245 == 0 & exposure_urban_2080_ssp245 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")

# Step 3: Plot the heatmap
plot(combined_urban_change_2080_ssp245, col = colors, legend = FALSE, main = "Water Refugia and Exposure (2050 SSP245)")


refugia_urban_2080_ssp585 <- binary_urban_map_hist & binary_urban_map_2080_ssp585
plot(refugia_urban_2080_ssp585)
exposure_urban_2080_ssp585 <- binary_urban_map_hist & !binary_urban_map_2080_ssp585
plot(exposure_urban_2080_ssp585)

combined_urban_change_2080_ssp585 <- classify(
  refugia_urban_2080_ssp585, cbind(1, 1))  # Start with refugia: value 1
combined_urban_change_2080_ssp585[exposure_urban_2080_ssp585 == 1] <- 2  # Set exposure to value 2
combined_urban_change_2080_ssp585[refugia_urban_2080_ssp585 == 0 & exposure_urban_2080_ssp585 == 0] <- 0  # No change

# Step 2: Define categories and colors
categories <- c("No Change", "Refugia", "Exposure")
colors <- c("lightgrey", "blue", "red")


# Step 3: Plot the heatmap
plot(combined_urban_change_2080_ssp585, col = colors, legend = FALSE, main = "wetland Refugia and Exposure (2050 SSP585)")


writeRaster(combined_urban_change_2020_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/urban/refugia/combined_urban_refugia_exposure_2020_ssp126.tif",
            overwrite = TRUE)

writeRaster(combined_urban_change_2020_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/urban/refugia/combined_urban_refugia_exposure_2020_ssp245.tif",
            overwrite = TRUE)

writeRaster(combined_urban_change_2020_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/urban/refugia/combined_urban_refugia_exposure_2020_ssp585.tif",
            overwrite = TRUE)

writeRaster(combined_urban_change_2050_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/urban/refugia/combined_urban_refugia_exposure_2050_ssp126.tif",
            overwrite = TRUE)

writeRaster(combined_urban_change_2050_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/urban/refugia/combined_urban_refugia_exposure_2050_ssp245.tif",
            overwrite = TRUE)

writeRaster(combined_urban_change_2050_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/urban/refugia/combined_urban_refugia_exposure_2050_ssp585.tif",
            overwrite = TRUE)

writeRaster(combined_urban_change_2080_ssp126,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/urban/refugia/combined_urban_refugia_exposure_2080_ssp126.tif",
            overwrite = TRUE)


writeRaster(combined_urban_change_2080_ssp245,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/urban/refugia/combined_urban_refugia_exposure_2080_ssp245.tif",
            overwrite = TRUE)

writeRaster(combined_urban_change_2080_ssp585,
            "F:/Uillinois_data/analysis/habitat_suitability/RF/urban/refugia/combined_urban_refugia_exposure_2080_ssp585.tif",
            overwrite = TRUE)



# convert heat maps to polygon
combined_urban_change_polygon_2020_ssp126 <- as.polygons(combined_urban_change_2020_ssp126, dissolve = TRUE)
# Save as a shapefile
writeVector(combined_urban_change_polygon_2020_ssp126, "F:/Uillinois_data/analysis/habitat_suitability/RF/urban/refugia/combined_urban_refugia_exposure_2020_ssp126.shp", filetype = "ESRI Shapefile", overwrite = TRUE)

combined_urban_change_polygon_2020_ssp245 <- as.polygons(combined_urban_change_2020_ssp245, dissolve = TRUE)
writeVector(combined_urban_change_polygon_2020_ssp245, "F:/Uillinois_data/analysis/habitat_suitability/RF/urban/refugia/combined_urban_refugia_exposure_2020_ssp245.shp", filetype = "ESRI Shapefile", overwrite = TRUE)
urban
combined_urban_change_polygon_2020_ssp585 <- as.polygons(combined_urban_change_2020_ssp585, dissolve = TRUE)
writeVector(combined_urban_change_polygon_2020_ssp585, "F:/Uillinois_data/analysis/habitat_suitability/RF/urban/refugia/combined_urban_refugia_exposure_2020_ssp585.shp", filetype = "ESRI Shapefile", overwrite = TRUE)


combined_urban_change_polygon_2050_ssp126 <- as.polygons(combined_urban_change_2050_ssp126, dissolve = TRUE)
writeVector(combined_urban_change_polygon_2050_ssp126, "F:/Uillinois_data/analysis/habitat_suitability/RF/urban/refugia/combined_urban_refugia_exposure_2050_ssp126.shp", filetype = "ESRI Shapefile", overwrite = TRUE)

combined_urban_change_polygon_2050_ssp245 <- as.polygons(combined_urban_change_2050_ssp245, dissolve = TRUE)
writeVector(combined_urban_change_polygon_2050_ssp245, "F:/Uillinois_data/analysis/habitat_suitability/RF/urban/refugia/combined_urban_refugia_exposure_2050_ssp245.shp", filetype = "ESRI Shapefile", overwrite = TRUE)

combined_urban_change_polygon_2050_ssp585 <- as.polygons(combined_urban_change_2050_ssp585, dissolve = TRUE)
writeVector(combined_urban_change_polygon_2050_ssp585, "F:/Uillinois_data/analysis/habitat_suitability/RF/urban/refugia/combined_urban_refugia_exposure_2050_ssp585.shp", filetype = "ESRI Shapefile", overwrite = TRUE)


combined_urban_change_polygon_2080_ssp126 <- as.polygons(combined_urban_change_2080_ssp126, dissolve = TRUE)
writeVector(combined_urban_change_polygon_2080_ssp126, "F:/Uillinois_data/analysis/habitat_suitability/RF/urban/refugia/combined_urban_refugia_exposure_2080_ssp126.shp", filetype = "ESRI Shapefile", overwrite = TRUE)

combined_urban_change_polygon_2080_ssp245 <- as.polygons(combined_urban_change_2080_ssp245, dissolve = TRUE)
writeVector(combined_urban_change_polygon_2080_ssp245, "F:/Uillinois_data/analysis/habitat_suitability/RF/urban/refugia/combined_urban_refugia_exposure_2080_ssp245.shp", filetype = "ESRI Shapefile", overwrite = TRUE)

combined_urban_change_polygon_2080_ssp585 <- as.polygons(combined_urban_change_2080_ssp585, dissolve = TRUE)
writeVector(combined_urban_change_polygon_2080_ssp585, "F:/Uillinois_data/analysis/habitat_suitability/RF/urban/refugia/combined_urban_refugia_exposure_2080_ssp585.shp", filetype = "ESRI Shapefile", overwrite = TRUE)



# Combine results into a data frame

# Refugia

cell_area_km2 <- 1  # each pixel is 1 km² due to 1000m x 1000m resolution

urban_refugia_hist_2020_ssp126_area <- global(refugia_urban_2020_ssp126, "sum", na.rm = TRUE)[[1]] * cell_area_km2
urban_refugia_hist_2020_ssp245_area <- global(refugia_urban_2020_ssp245, "sum", na.rm = TRUE)[[1]] * cell_area_km2
urban_refugia_hist_2020_ssp585_area <- global(refugia_urban_2020_ssp585, "sum", na.rm = TRUE)[[1]] * cell_area_km2

urban_refugia_hist_2050_ssp126_area <- global(refugia_urban_2050_ssp126, "sum", na.rm = TRUE)[[1]] * cell_area_km2
urban_refugia_hist_2050_ssp245_area <- global(refugia_urban_2050_ssp245, "sum", na.rm = TRUE)[[1]] * cell_area_km2
urban_refugia_hist_2050_ssp585_area <- global(refugia_urban_2050_ssp585, "sum", na.rm = TRUE)[[1]] * cell_area_km2

urban_refugia_hist_2080_ssp126_area <- global(refugia_urban_2080_ssp126, "sum", na.rm = TRUE)[[1]] * cell_area_km2
urban_refugia_hist_2080_ssp245_area <- global(refugia_urban_2080_ssp245, "sum", na.rm = TRUE)[[1]] * cell_area_km2
urban_refugia_hist_2080_ssp585_area <- global(refugia_urban_2080_ssp585, "sum", na.rm = TRUE)[[1]] * cell_area_km2


urban_refugia_df <- data.frame(
  TimePeriod = c("2020", "2020", "2020",
                 "2050", "2050", "2050",
                 "2080", "2080", "2080"),
  Scenario = c("ssp126", "ssp245", "ssp585",
               "ssp126", "ssp245", "ssp585",
               "ssp126", "ssp245", "ssp585"),
  RefugiaArea_km2 = c(urban_refugia_hist_2020_ssp126_area,
                      urban_refugia_hist_2020_ssp245_area,
                      urban_refugia_hist_2020_ssp585_area,
                      urban_refugia_hist_2050_ssp126_area,
                      urban_refugia_hist_2050_ssp245_area,
                      urban_refugia_hist_2050_ssp585_area,
                      urban_refugia_hist_2080_ssp126_area,
                      urban_refugia_hist_2080_ssp245_area,
                      urban_refugia_hist_2080_ssp585_area)
)

# Write to CSV
write.csv(urban_refugia_df, "F:/Uillinois_data/analysis/habitat_suitability/RF/urban/refugia/urban_refugia_areas_by_scenario.csv", row.names = FALSE)


# Exposure

urban_exposure_hist_2020_ssp126_area <- global(exposure_urban_2020_ssp126, "sum", na.rm = TRUE)[[1]] * cell_area_km2
urban_exposure_hist_2020_ssp245_area <- global(exposure_urban_2020_ssp245, "sum", na.rm = TRUE)[[1]] * cell_area_km2
urban_exposure_hist_2020_ssp585_area <- global(exposure_urban_2020_ssp585, "sum", na.rm = TRUE)[[1]] * cell_area_km2

urban_exposure_hist_2050_ssp126_area <- global(exposure_urban_2050_ssp126, "sum", na.rm = TRUE)[[1]] * cell_area_km2
urban_exposure_hist_2050_ssp245_area <- global(exposure_urban_2050_ssp245, "sum", na.rm = TRUE)[[1]] * cell_area_km2
urban_exposure_hist_2050_ssp585_area <- global(exposure_urban_2050_ssp585, "sum", na.rm = TRUE)[[1]] * cell_area_km2

urban_exposure_hist_2080_ssp126_area <- global(exposure_urban_2080_ssp126, "sum", na.rm = TRUE)[[1]] * cell_area_km2
urban_exposure_hist_2080_ssp245_area <- global(exposure_urban_2080_ssp245, "sum", na.rm = TRUE)[[1]] * cell_area_km2
urban_exposure_hist_2080_ssp585_area <- global(exposure_urban_2080_ssp585, "sum", na.rm = TRUE)[[1]] * cell_area_km2


urban_exposure_df <- data.frame(
  TimePeriod = c("2020", "2020", "2020",
                 "2050", "2050", "2050",
                 "2080", "2080", "2080"),
  Scenario = c("ssp126", "ssp245", "ssp585",
               "ssp126", "ssp245", "ssp585",
               "ssp126", "ssp245", "ssp585"),
  RefugiaArea_km2 = c(urban_exposure_hist_2020_ssp126_area,
                      urban_exposure_hist_2020_ssp245_area,
                      urban_exposure_hist_2020_ssp585_area,
                      urban_exposure_hist_2050_ssp126_area,
                      urban_exposure_hist_2050_ssp245_area,
                      urban_exposure_hist_2050_ssp585_area,
                      urban_exposure_hist_2080_ssp126_area,
                      urban_exposure_hist_2080_ssp245_area,
                      urban_exposure_hist_2080_ssp585_area)
)

# Write to CSV
write.csv(urban_exposure_df, "F:/Uillinois_data/analysis/habitat_suitability/RF/urban/refugia/urban_exposure_areas_by_scenario.csv", row.names = FALSE)


# Count the number of cells with forest (value == 1)
urban_area_km2 <- sum(values(urban) == 1, na.rm = TRUE)

cat("Total urban area (km²):", urban_area_km2, "\n")

# Step 1: Count the number of wetland pixels (value == 1)
urban_cells <- global(binary_urban_map_hist == 1, "sum", na.rm = TRUE)[1]
urban_cells

# Step 2: Calculate the total area (1 km² per pixel)
urban_area_km2 <- urban_cells * 1  # since each pixel = 1 km²

urban_refugia <- data.frame(
  Year = c("2020s", "2020s", "2020s", "2050s", "2050s", "2050s", "2080s", "2080s", "2080s"),
  Emission_Scenario = c("ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585"),
  Refugia = c(80.5, 30.9, 30.8, 4.8, 3.1, 1.7, 5.7, 2.2, 0)
)


# Convert Year to an ordered factor for proper sequencing
urban_refugia$Year <- factor(urban_refugia$Year, levels = c("2020s", "2050s", "2080s"))

# Plot the refugia data and customized axis lines
ggplot(urban_refugia, aes(x = Year, y = Refugia, group = Emission_Scenario, color = Emission_Scenario)) +
  geom_line(size = 1.2) +
  geom_point(size = 3) +
  labs(title = "Projected Urban/Built-up Refugia for the MW CASC Region",
       x = "Time Period",
       y = "Percentage Refugia",
       color = "Emission Scenario") +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank(),  # Remove minor grid lines
    axis.line = element_line(size = 1, color = "black"),  # Bold x and y axis lines
    axis.text = element_text(size = 11),  # Adjust axis text size
    axis.title = element_text(size = 12, face = "bold")  # Bold x and y axis labels
  )


# Repeat for exposure

# Create the data frame
urban_exposure_data <- data.frame(
  Year = c("2020s", "2020s", "2020s", "2050s", "2050s", "2050s", "2080s", "2080s", "2080s"),
  Emission_Scenario = c("ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585", "ssp126", "ssp245", "ssp585"),
  Vulnerability = c(19.5, 69.1, 69.2, 95.2, 96.9, 98.3, 94.3, 97.8, 99.9)
)

# Convert Year to an ordered factor for proper sequencing
urban_exposure_data$Year <- factor(urban_exposure_data$Year, levels = c("2020s", "2050s", "2080s"))

# Plot the vulnerabile areas data
ggplot(urban_exposure_data, aes(x = Year, y = Vulnerability, group = Emission_Scenario, color = Emission_Scenario)) +
  geom_line(size = 1.2) +
  geom_point(size = 3) +
  labs(title = "Projected Urban/Built-up Exposure Areas for the MW CASC Region",
       x = "Time Period",
       y = "Percentage Exposure",
       color = "Emission Scenario") +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank(),  # Remove minor grid lines
    axis.line = element_line(size = 1, color = "black"),  # Bold x and y axis lines
    axis.text = element_text(size = 11),  # Adjust axis text size
    axis.title = element_text(size = 12, face = "bold")  # Bold x and y axis labels
  )














